[{"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/index.tsx":"1","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/reportWebVitals.ts":"2","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/App.tsx":"3","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/stores/webStore.ts":"4","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/PrivateRoute.tsx":"5","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Login.tsx":"6","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/Dashboard.tsx":"7","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserList/UserList.tsx":"8","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserCreate.tsx":"9","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserImport.tsx":"10","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserPreview.tsx":"11","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/LoggingDashboard/LoggingDashboard.tsx":"12","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Notification/Notification.tsx":"13","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/PushData.tsx":"14","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Setting.tsx":"15","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/ChangePassword.tsx":"16","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Notification.tsx":"17","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/CreatePushData.tsx":"18","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/Geofence.tsx":"19","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceEdit.tsx":"20","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceCreate.tsx":"21","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Alert/Alert.tsx":"22","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useRequestOTP.ts":"23","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useMe.ts":"24","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useVerifyOTP.ts":"25","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListUser.ts":"26","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListAllUser.ts":"27","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useUpdateGeofence.ts":"28","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useCreateGeofence.ts":"29","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/PrivateContainer.tsx":"30","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/AfterLogin.tsx":"31","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/ProjectWrapper.tsx":"32","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/RequestOTP.tsx":"33","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardTotalUserByGender.tsx":"34","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardNationality.tsx":"35","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardAge.tsx":"36","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardLengthOfStay.tsx":"37","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardMap.tsx":"38","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardUserList.tsx":"39","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardSOS.tsx":"40","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/SwiperUserLists.tsx":"41","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceToolbar.tsx":"42","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceHeader.tsx":"43","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceFormWrapper.tsx":"44","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceForm.tsx":"45","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GefenceMapView.tsx":"46","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceList.tsx":"47","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useLogout.ts":"48","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/useChangePassword.ts":"49","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/usePasswordVerifyOTP.ts":"50","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/usePasswordRequestOTP.ts":"51","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserInfoCard.tsx":"52","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/useListPushData.ts":"53","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/useCallAPI.ts":"54","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListSOSUser.ts":"55","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/utils/index.tsx":"56","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/data/graphColor.ts":"57","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByAge.ts":"58","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadLengthOfStay.ts":"59","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListBranches.ts":"60","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useReadPlace.ts":"61","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useListAllGeofence.ts":"62","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useDeleteGeofence.ts":"63","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useReadUser.ts":"64","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/Options/usePlace.ts":"65","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useImportUser.ts":"66","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByGender.ts":"67","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByNationality.ts":"68","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/utils/const.tsx":"69","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/Map.tsx":"70","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/notification/useListNotifications.ts":"71","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListAgencies.ts":"72","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useUploadImage.ts":"73","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListHospital.ts":"74","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useCreateUser.ts":"75","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/HeartRateGraph.tsx":"76","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/BloodPressureGrph.tsx":"77","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/BodyTempGraph.tsx":"78","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/DeviceHistoryDatagrid.tsx":"79","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useUpdateUser.ts":"80","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/types/setting.ts":"81","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/types/notification.ts":"82","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/ResponsiveLineChat.tsx":"83","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/firebase.js":"84"},{"size":528,"mtime":1619359816519,"results":"85","hashOfConfig":"86"},{"size":425,"mtime":1616338460288,"results":"87","hashOfConfig":"86"},{"size":7605,"mtime":1619446412424,"results":"88","hashOfConfig":"86"},{"size":2906,"mtime":1616338460465,"results":"89","hashOfConfig":"86"},{"size":3496,"mtime":1616338460104,"results":"90","hashOfConfig":"86"},{"size":5661,"mtime":1616338460128,"results":"91","hashOfConfig":"86"},{"size":13063,"mtime":1616338460126,"results":"92","hashOfConfig":"86"},{"size":22832,"mtime":1618888770178,"results":"93","hashOfConfig":"86"},{"size":29028,"mtime":1616338460284,"results":"94","hashOfConfig":"86"},{"size":24872,"mtime":1616338460285,"results":"95","hashOfConfig":"86"},{"size":17879,"mtime":1616338460286,"results":"96","hashOfConfig":"86"},{"size":6434,"mtime":1616338460127,"results":"97","hashOfConfig":"86"},{"size":14609,"mtime":1616338460129,"results":"98","hashOfConfig":"86"},{"size":10868,"mtime":1616338460258,"results":"99","hashOfConfig":"86"},{"size":5151,"mtime":1616338460258,"results":"100","hashOfConfig":"86"},{"size":7787,"mtime":1616338460150,"results":"101","hashOfConfig":"86"},{"size":3594,"mtime":1616338460257,"results":"102","hashOfConfig":"86"},{"size":50958,"mtime":1616338460151,"results":"103","hashOfConfig":"86"},{"size":1681,"mtime":1616338460188,"results":"104","hashOfConfig":"86"},{"size":4415,"mtime":1616338460214,"results":"105","hashOfConfig":"86"},{"size":5461,"mtime":1616338460201,"results":"106","hashOfConfig":"86"},{"size":6123,"mtime":1616338460111,"results":"107","hashOfConfig":"86"},{"size":1400,"mtime":1616338460312,"results":"108","hashOfConfig":"86"},{"size":1253,"mtime":1616338460290,"results":"109","hashOfConfig":"86"},{"size":1759,"mtime":1616338460312,"results":"110","hashOfConfig":"86"},{"size":1378,"mtime":1616338460463,"results":"111","hashOfConfig":"86"},{"size":1775,"mtime":1616338460461,"results":"112","hashOfConfig":"86"},{"size":1489,"mtime":1616338460366,"results":"113","hashOfConfig":"86"},{"size":1046,"mtime":1616338460350,"results":"114","hashOfConfig":"86"},{"size":13807,"mtime":1616338460103,"results":"115","hashOfConfig":"86"},{"size":657,"mtime":1616338460110,"results":"116","hashOfConfig":"86"},{"size":2602,"mtime":1616338460104,"results":"117","hashOfConfig":"86"},{"size":6458,"mtime":1616338460142,"results":"118","hashOfConfig":"86"},{"size":9269,"mtime":1616338460125,"results":"119","hashOfConfig":"86"},{"size":4284,"mtime":1616338460125,"results":"120","hashOfConfig":"86"},{"size":3904,"mtime":1616338460111,"results":"121","hashOfConfig":"86"},{"size":3023,"mtime":1616338460112,"results":"122","hashOfConfig":"86"},{"size":4356,"mtime":1616338460124,"results":"123","hashOfConfig":"86"},{"size":14886,"mtime":1618219207562,"results":"124","hashOfConfig":"86"},{"size":8360,"mtime":1618805884626,"results":"125","hashOfConfig":"86"},{"size":3826,"mtime":1616338460284,"results":"126","hashOfConfig":"86"},{"size":2839,"mtime":1616338460257,"results":"127","hashOfConfig":"86"},{"size":3151,"mtime":1616338460237,"results":"128","hashOfConfig":"86"},{"size":5184,"mtime":1616338460215,"results":"129","hashOfConfig":"86"},{"size":18336,"mtime":1617938749977,"results":"130","hashOfConfig":"86"},{"size":12831,"mtime":1616338460173,"results":"131","hashOfConfig":"86"},{"size":4121,"mtime":1616338460256,"results":"132","hashOfConfig":"86"},{"size":742,"mtime":1616338460290,"results":"133","hashOfConfig":"86"},{"size":676,"mtime":1616338460424,"results":"134","hashOfConfig":"86"},{"size":831,"mtime":1616338460459,"results":"135","hashOfConfig":"86"},{"size":685,"mtime":1616338460459,"results":"136","hashOfConfig":"86"},{"size":9793,"mtime":1618805694758,"results":"137","hashOfConfig":"86"},{"size":1178,"mtime":1616338460458,"results":"138","hashOfConfig":"86"},{"size":1102,"mtime":1616338460464,"results":"139","hashOfConfig":"86"},{"size":1455,"mtime":1618222346311,"results":"140","hashOfConfig":"86"},{"size":667,"mtime":1616338460470,"results":"141","hashOfConfig":"86"},{"size":393,"mtime":1616338460110,"results":"142","hashOfConfig":"86"},{"size":908,"mtime":1616338460313,"results":"143","hashOfConfig":"86"},{"size":1139,"mtime":1616338460312,"results":"144","hashOfConfig":"86"},{"size":501,"mtime":1616338460462,"results":"145","hashOfConfig":"86"},{"size":1115,"mtime":1616338460366,"results":"146","hashOfConfig":"86"},{"size":2390,"mtime":1616338460351,"results":"147","hashOfConfig":"86"},{"size":835,"mtime":1616338460351,"results":"148","hashOfConfig":"86"},{"size":9484,"mtime":1616338460463,"results":"149","hashOfConfig":"86"},{"size":379,"mtime":1616338460288,"results":"150","hashOfConfig":"86"},{"size":1158,"mtime":1616338460460,"results":"151","hashOfConfig":"86"},{"size":829,"mtime":1616338460321,"results":"152","hashOfConfig":"86"},{"size":1093,"mtime":1616338460322,"results":"153","hashOfConfig":"86"},{"size":291,"mtime":1616338460469,"results":"154","hashOfConfig":"86"},{"size":6342,"mtime":1616338460103,"results":"155","hashOfConfig":"86"},{"size":2892,"mtime":1616338460367,"results":"156","hashOfConfig":"86"},{"size":635,"mtime":1616338460461,"results":"157","hashOfConfig":"86"},{"size":826,"mtime":1616338460464,"results":"158","hashOfConfig":"86"},{"size":589,"mtime":1616338460462,"results":"159","hashOfConfig":"86"},{"size":1334,"mtime":1616338460460,"results":"160","hashOfConfig":"86"},{"size":3048,"mtime":1616338460284,"results":"161","hashOfConfig":"86"},{"size":3694,"mtime":1616338460271,"results":"162","hashOfConfig":"86"},{"size":4047,"mtime":1619171678552,"results":"163","hashOfConfig":"86"},{"size":5666,"mtime":1618824897760,"results":"164","hashOfConfig":"86"},{"size":757,"mtime":1616338460463,"results":"165","hashOfConfig":"86"},{"size":205,"mtime":1616338460468,"results":"166","hashOfConfig":"86"},{"size":218,"mtime":1616338460467,"results":"167","hashOfConfig":"86"},{"size":1506,"mtime":1616338460104,"results":"168","hashOfConfig":"86"},{"size":2111,"mtime":1619363857097,"results":"169","hashOfConfig":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"174"},"18mgpql",{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"174"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"174"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"174"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":2,"source":"196","usedDeprecatedRules":"174"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"174"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"174"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"174"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"174"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"174"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"174"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"174"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"174"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"174"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"174"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"174"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"174"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"174"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"174"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"174"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"174"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"174"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"174"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"174"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"174"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"174"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"174"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"174"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"174"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"174"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"174"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"174"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"174"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"174"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"174"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"174"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"174"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"174"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"174"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"174"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"174"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"174"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"174"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"174"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"174"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"174"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"174"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"174"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"174"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"174"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"174"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"174"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"174"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"174"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"174"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"174"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"174"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"174"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"174"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"174"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"174"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"407"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"411"},"gmhr7s","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/index.tsx",["412"],"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// getToken()\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["413","414"],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/reportWebVitals.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/App.tsx",["415","416","417","418","419"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { Global, css } from \"@emotion/react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport \"swiper/swiper-bundle.min.css\";\nimport \"./App.css\";\nimport { PrivateRoute } from \"./components/PrivateRoute\";\nimport { Login } from \"./features/Login\";\nimport { SnackbarProvider } from \"notistack\";\nimport { AfterLogin } from \"./features/AfterLogin\";\nimport { webStore } from \"./stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\n//\nimport { Dashboard, DashboardMobile } from \"./features/Dashboard/Dashboard\";\nimport { UserList, UserListMobile } from \"./features/UserList/UserList\";\nimport { UserCreate, UserCreateMobile } from \"./features/UserManage/UserCreate\";\nimport { UserImport } from \"./features/UserManage/UserImport\";\nimport {\n  UserPreview,\n  UserPreviewMobile,\n} from \"./features/UserManage/UserPreview\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\nimport { LoggingDashboard } from \"./features/LoggingDashboard/LoggingDashboard\";\nimport { Notification } from \"./features/Notification/Notification\";\nimport { PushData } from \"./features/Setting/PushData\";\nimport { CreatePushData } from \"./features/Setting/CreatePushData\";\nimport { Geofence } from \"./features/Setting/Geofence/Geofence\";\nimport { GeofenceEdit } from \"./features/Setting/Geofence/GeofenceEdit\";\nimport { GeofenceCreate } from \"./features/Setting/Geofence/GeofenceCreate\";\n// import { Alert } from \"./features/Alert/Alert\";\nimport { Alert, AlertMobile } from \"./features/Alert/Alert\";\nimport { Setting } from \"./features/Setting/Setting\";\nimport { ChangePassword } from \"./features/Setting/ChangePassword\";\nimport { SetNotification } from \"./features/Setting/Notification\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport { getToken, onMessageListener } from './firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDzef8AiE3Fw8jPGnvJZHEreKYgl4kGWp0\",\n  authDomain: \"aqua-dashboard.firebaseapp.com\",\n  databaseURL: \"https://aqua-dashboard.firebaseio.com\",\n  projectId: \"aqua-dashboard\",\n  storageBucket: \"aqua-dashboard.appspot.com\",\n  messagingSenderId: \"515081409051\",\n  appId: \"1:515081409051:web:e5ecb915c3c9818f405ebe\",\n  measurementId: \"G-RRXEWY2CJD\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\n\nconst formLabelsTheme = createMuiTheme({\n  overrides: {\n    MuiFormLabel: {\n      asterisk: {\n        color: \"#db3131\",\n        \"&$error\": {\n          color: \"#db3131\",\n        },\n      },\n    },\n  },\n});\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nconst App = observer(() => {\n  useEffect(() => {\n    const userAgent =\n      typeof window.navigator === \"undefined\" ? \"\" : navigator.userAgent;\n    const mobile = Boolean(\n      userAgent.match(\n        /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i\n      )\n    );\n    webStore.setDevice(mobile ? \"mobile\" : \"desktop\");\n    console.log(webStore.device);\n  }, []);\n  messaging.onMessage((payload) => {\n    toast.warn(payload.notification.title + \" \"+ payload.notification.body, {\n      position: \"top-right\",\n      autoClose: false,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n    toast.success(payload.notification.title);\n    console.log(payload);\n  });\n  console.log(webStore.device);\n  if (webStore.device === \"unknown\") {\n    return <></>;\n  } else if (webStore.device === \"desktop\") {\n\n  }\n  \n  return (\n    <MuiThemeProvider theme={formLabelsTheme}>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={false}\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n      />\n      <SnackbarProvider>\n        <Global\n          styles={css`\n            .MuiPickersBasePicker-container\n              .MuiPickersToolbarButton-toolbarBtn\n              .MuiTypography-subtitle1 {\n              color: rgba(255, 255, 255, 1) !important;\n              text-decoration: underline;\n              font-weight: bold;\n            }\n          `}\n        />\n        <Router>\n          <ScrollToTop />\n          <div key={webStore?.profile?.id}>\n            <Switch>\n              <Route path=\"/login\" component={Login} />\n              <PrivateRoute\n                path=\"/\"\n                title=\"Dashboard\"\n                exact\n                component={(props: any) => {\n                  if (\n                    webStore.selectedProject?.is_quarantine === 0 ||\n                    window.location.href.indexOf(\"?log\") >= 0\n                  ) {\n                    return <LoggingDashboard {...props} />;\n                  }\n                  return webStore.device === \"desktop\" ? (\n                    <Dashboard {...props} />\n                  ) : (\n                    <DashboardMobile {...props} />\n                  );\n                }}\n              />\n              <PrivateRoute\n                path=\"/user/list\"\n                exact\n                component={\n                  webStore.device === \"desktop\" ? UserList : UserListMobile\n                }\n              />\n              <PrivateRoute\n                path=\"/user/create\"\n                exact\n                component={\n                  webStore.device === \"desktop\" ? UserCreate : UserCreateMobile\n                }\n              />\n              <PrivateRoute\n                path=\"/user/import\"\n                exact\n                component={webStore.device === \"desktop\" ? UserImport : null}\n              />\n              <PrivateRoute\n                path=\"/user/:userId/preview\"\n                exact\n                component={\n                  webStore.device === \"desktop\"\n                    ? UserPreview\n                    : UserPreviewMobile\n                }\n              />\n              <PrivateRoute\n                path=\"/notification\"\n                exact\n                component={Notification}\n              />\n              <PrivateRoute path=\"/setting\" exact component={Setting} />\n              <PrivateRoute\n                path=\"/setting/pushdata\"\n                exact\n                component={PushData}\n              />\n              <PrivateRoute\n                path=\"/setting/pushdata/create\"\n                exact\n                component={CreatePushData}\n              />\n              <PrivateRoute\n                path=\"/setting/geofence\"\n                exact\n                component={Geofence}\n              />\n              <PrivateRoute\n                path=\"/setting/geofence/add\"\n                exact\n                component={GeofenceCreate}\n              />\n              <PrivateRoute\n                path=\"/setting/geofence/edit/:id\"\n                exact\n                component={GeofenceEdit}\n              />\n              <PrivateRoute\n                path=\"/setting/changepassword\"\n                exact\n                component={ChangePassword}\n              />\n              <PrivateRoute\n                path=\"/setting/notification\"\n                exact\n                component={SetNotification}\n              />\n              <PrivateRoute path=\"/alert\" exact component={Alert} />\n            </Switch>\n          </div>\n        </Router>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  );\n});\n\nexport default App;\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/stores/webStore.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/PrivateRoute.tsx",["420","421","422","423","424","425","426","427","428","429","430","431","432","433"],"import classes from \"*.module.css\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Menu,\n  MenuItem,\n  Box,\n} from \"@material-ui/core\";\nimport React, { Children, Fragment, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useLocation,\n  useHistory,\n} from \"react-router-dom\";\nimport { useMe } from \"../services/api/auth/useMe\";\nimport { webStore } from \"../stores/webStore\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { PrivateContainer } from \"./PrivateContainer\";\nimport { AfterLogin } from \"../features/AfterLogin\";\nimport { ProjectWrapper } from \"./ProjectWrapper\";\nimport { observer } from \"mobx-react-lite\";\nconst ReactWaterMark = require(\"react-watermark-component\");\n\nexport const PrivateRoute = observer(\n  ({ component: Component, redirect, ...rest }: any) => {\n    const { result_me, loading_me, error_me } = useMe();\n    const history = useHistory();\n    useEffect(() => {\n      if (error_me && localStorage.getItem(\"token\")) {\n        localStorage.removeItem(\"token\");\n        webStore.setProfile(null);\n        history.push(\"/login\");\n      }\n    }, [error_me]);\n    // console.log(result_me, loading_me);\n    return (\n      <Route\n        {...rest}\n        render={(props) => {\n          if (result_me) {\n            if (rest.container === false) {\n              return (\n                <ProjectWrapper>\n                  <Component {...props} />\n                </ProjectWrapper>\n              );\n            } else if (webStore && webStore.profile) {\n              return (\n                <PrivateContainer title={rest.title}>\n                  <div>\n                    <ReactWaterMark\n                      waterMarkText={webStore.profile.name || \"COPYRIGHT\"}\n                      options={{\n                        chunkWidth: 300,\n                        chunkHeight: 160,\n                        textAlign: \"left\",\n                        textBaseline: \"bottom\",\n                        globalAlpha: 0.04,\n                        font: \"64px Poppins\",\n                        rotateAngle: -0.26,\n                        fillStyle: \"#666\",\n                      }}\n                    >\n                      <div style={{ minHeight: \"100vh\" }}>\n                        <ProjectWrapper>\n                          <Component {...props} />\n                        </ProjectWrapper>\n                        <AfterLogin />\n                      </div>\n                      <Box\n                        textAlign=\"center\"\n                        py={2}\n                        fontSize={10}\n                        css={{ backgroundColor: \"#fff\" }}\n                      >\n                        © Copyright 2021 pmhsolution. All rights reserved.\n                      </Box>\n                    </ReactWaterMark>\n                  </div>\n                </PrivateContainer>\n              );\n            } else {\n              return (\n                <>\n                  <AfterLogin />\n                </>\n              );\n            }\n          } else if (!loading_me && !result_me && redirect !== false) {\n            // console.log(\n            //   \"REMOVE TOKEN\",\n            //   localStorage.getItem(\"token\"),\n            //   result_me\n            // );\n            localStorage.removeItem(\"token\");\n            webStore.setProfile(null);\n            return <Redirect to=\"/login\" />;\n          } else {\n            return <></>;\n          }\n        }}\n      />\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Login.tsx",["434","435","436","437","438","439","440","441","442"],"import {\n  Box,\n  Button,\n  CircularProgress,\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { VariantType, useSnackbar } from \"notistack\";\nimport { useRequestOTP } from \"../services/api/auth/useRequestOTP\";\nimport { useVerifyOTP } from \"../services/api/auth/useVerifyOTP\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport logo from \"../components/assets/logo-PMH.svg\";\nimport { RequestOTP } from \"./RequestOTP\";\n\nconst State_1 = ({ setPageState }: any) => {\n  const [form, setForm] = useState<any>({});\n  const { enqueueSnackbar } = useSnackbar();\n  const { fire_request_otp, loading_request_otp } = useRequestOTP();\n  let history = useHistory();\n\n  const onChange = (e: any) => {\n    if (e.target.name) {\n      let newV = { ...form };\n      newV[e.target.name] = e.target.value;\n      setForm(newV);\n    }\n  };\n  return (\n    <Grid container direction=\"column\" spacing={3}>\n      <Grid item>\n        <Box\n          fontSize=\"h5.fontSize\"\n          fontWeight=\"fontWeightBold\"\n          textAlign=\"center\"\n        >\n          Login\n        </Box>\n      </Grid>\n      <Box px={2} py={0.5}>\n        <TextField\n          required\n          onChange={onChange}\n          value={form.username || \"\"}\n          className=\"w-full\"\n          name=\"username\"\n          label=\"Username\"\n          variant=\"outlined\"\n          margin=\"dense\"\n        />\n      </Box>\n      <Box px={2} py={0.5}>\n        <TextField\n          required\n          onChange={onChange}\n          type=\"password\"\n          value={form.password || \"\"}\n          className=\"w-full\"\n          name=\"password\"\n          label=\"Password\"\n          variant=\"outlined\"\n          margin=\"dense\"\n        />\n      </Box>\n      <Grid item>\n        <Box textAlign=\"center\">\n          <Button\n            disabled={!form.username || !form.password}\n            onClick={() => {\n              fire_request_otp(form.username, form.password).then(\n                ({ data }) => {\n                  if (data.data) {\n                    enqueueSnackbar(\n                      \"กรุณากรอก OTP ที่ส่งไปยังเบอร์ \" +\n                        data.data.phone_number,\n                      {\n                        key: \"otpShow\",\n                        variant: \"info\",\n                        autoHideDuration: 3000,\n                        anchorOrigin: {\n                          vertical: \"top\",\n                          horizontal: \"center\",\n                        },\n                      }\n                    );\n                    setPageState({\n                      name: \"OTP\",\n                      data: {\n                        phone_number: data.data.phone_number,\n                        ref_code: data.data.ref_code,\n                        ...form,\n                      },\n                    });\n                  } else {\n                    enqueueSnackbar(\"Username/Password ผิดพลาด\", {\n                      key: \"loginError\",\n                      variant: \"error\",\n                      autoHideDuration: 3000,\n                      anchorOrigin: {\n                        vertical: \"top\",\n                        horizontal: \"center\",\n                      },\n                    });\n                  }\n                }\n              );\n            }}\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            css={{ width: \"40%\" }}\n          >\n            {loading_request_otp && (\n              <CircularProgress size=\"1rem\" color=\"inherit\" />\n            )}\n            Submit\n          </Button>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport const Login = observer(() => {\n  const [pageState, setPageState] = useState({ name: \"Login\" });\n  const { fire_request_otp, loading_request_otp } = useRequestOTP();\n  const { fire_verify_otp, loading_verify_otp } = useVerifyOTP();\n  let history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const isSuccess = ({ data }: { data: any }) => {\n    localStorage.setItem(\"token\", data.access_token);\n    enqueueSnackbar(\"เข้าสู่ระบบสำเร็จ\", {\n      key: \"loginSuccess\",\n      variant: \"success\",\n      autoHideDuration: 3000,\n      anchorOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\",\n      },\n    });\n    setTimeout(() => {\n      if (localStorage.getItem(\"token\")) {\n        history.push(\"/\");\n      }\n    }, 300);\n  };\n  return (\n    <Box\n      css={{ backgroundColor: \"var(--primary-bg)\" }}\n      height=\"100vh\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <img src={logo} css={{ position: \"absolute\", top: 20 }} />\n      <Container maxWidth=\"sm\">\n        <Paper>\n          <Box p={4}>\n            {pageState.name === \"Login\" ? (\n              <State_1 {...{ setPageState, pageState }} />\n            ) : (\n              false\n            )}\n            {pageState.name === \"OTP\" ? (\n              <RequestOTP\n                {...{\n                  setPageState,\n                  pageState,\n                  backState: \"Login\",\n                  fire_request_otp,\n                  loading_request_otp,\n                  fire_verify_otp,\n                  loading_verify_otp,\n                  isSuccess,\n                }}\n              />\n            ) : (\n              false\n            )}\n          </Box>\n        </Paper>\n      </Container>\n    </Box>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/Dashboard.tsx",["443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461"],"import React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\n\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  Hidden,\n  IconButton,\n  LinearProgress,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\n\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { dateStr } from \"../../utils\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport {\n  CardTopTotalUserByGender,\n  CardTotalUserByGender,\n} from \"./CardTotalUserByGender\";\nimport { CardNationality, CardTopNationality } from \"./CardNationality\";\nimport { CardAge, CardTopAge } from \"./CardAge\";\nimport { CardLengthOfStay, CardTopLengthOfStay } from \"./CardLengthOfStay\";\nimport { CardMap, CardMapMemo } from \"./CardMap\";\nimport { CardUserList } from \"./CardUserList\";\nimport { CardSOS } from \"./CardSOS\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport { useHistory } from \"react-router-dom\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport { Filter } from \"../../types/user\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nexport const SubBar = observer(\n  ({\n    title,\n    back,\n    reload,\n    viewAll,\n    importExcel,\n    addNewFence,\n    children,\n  }: {\n    title: string | React.ReactElement;\n    children?: React.ReactElement;\n    back?: boolean;\n    reload?: boolean;\n    viewAll?: string;\n    importExcel?: string;\n    addNewFence?: string;\n  }) => {\n    //\n    useEffect(() => {\n      webStore.setLatestTimeStamp(new Date());\n      webStore.resetFilter();\n    }, []);\n    const history = useHistory();\n    return (\n      <Box className=\"flex justify-between items-center\" pt={4} pb={0}>\n        <Grid container alignItems=\"center\">\n          {back && (\n            <IconButton\n              onClick={() => {\n                const res = history.goBack();\n                console.log(res);\n              }}\n            >\n              <ArrowBackIcon css={{ color: \"black\" }} />\n            </IconButton>\n          )}\n\n          <Box fontSize=\"h5.fontSize\" fontWeight={500}>\n            {title}\n          </Box>\n        </Grid>\n        {reload !== false && (\n          <>\n            <Box\n              display={{ sm: \"none\", xs: \"none\", md: \"block\" }}\n              css={{ minWidth: \"fit-content\" }}\n            >\n              <Button\n                style={{ width: \"fit-content\" }}\n                onClick={() => {\n                  webStore.setLatestTimeStamp(new Date());\n                }}\n                color=\"inherit\"\n                startIcon={<CachedIcon />}\n              >\n                {dateStr(webStore.latestTimeStamp)}\n              </Button>\n            </Box>\n            <Box display={{ xs: \"block\", md: \"none\" }}>\n              <Button\n                style={{ width: \"30px\", minWidth: \"auto\" }}\n                onClick={() => {\n                  webStore.setLatestTimeStamp(new Date());\n                }}\n              >\n                <CachedIcon />\n              </Button>\n            </Box>\n          </>\n        )}\n        {viewAll && (\n          <Button\n            color=\"primary\"\n            css={{ fontWeight: \"bold\", width: 150 }}\n            href={viewAll}\n          >\n            View All\n          </Button>\n        )}\n        {importExcel && (\n          <Box display={{ sm: \"none\", xs: \"none\", md: \"block\" }} width={200}>\n            <Button\n              color=\"primary\"\n              css={{\n                fontWeight: \"bold\",\n                width: 200,\n                justifyContent: \"flex-end\",\n              }}\n              // onClick={importExcel}\n              href={importExcel}\n              startIcon={<SaveAltIcon />}\n              size=\"small\"\n              variant=\"text\"\n            >\n              IMPORT EXCEL\n            </Button>\n          </Box>\n        )}\n        {children}\n      </Box>\n    );\n  }\n);\n\nexport const CardTopValue = observer(\n  ({\n    title,\n    value,\n    total,\n    primary,\n  }: {\n    title: string;\n    value: any;\n    total: any;\n    primary?: boolean;\n  }) => {\n    return (\n      <Box\n        css={{\n          display: \"flex\",\n          flex: 1,\n          minHeight: \"100%\",\n          borderRadius: 5,\n          alignItems: \"center\",\n          backgroundColor: primary ? \"var(--primary)\" : \"#fff\",\n        }}\n      >\n        <Box\n          px={2}\n          py={2.5}\n          style={{\n            color: primary ? \"#fff\" : \"#000\",\n            textAlign: primary ? \"center\" : \"left\",\n          }}\n        >\n          <Box fontSize={14} fontWeight={600}>\n            {title}\n          </Box>\n          <Box fontSize={27} fontWeight={primary ? 600 : 400}>\n            {value}\n          </Box>\n          <Box\n            fontSize={14}\n            fontWeight={600}\n            css={{ color: primary ? \"#fff\" : \"var(--primary)\" }}\n          >\n            {total}\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n);\n\nexport const Dashboard = () => {\n  useEffect(() => {\n    return () => {\n      webStore.resetFilter();\n    };\n  }, []);\n  const mapRef = useRef<any>();\n  const [page, setPage] = useState<number>(1);\n  const filter: Filter = {\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: webStore.filter_Keyword,\n    page: page,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList, total } = useListUser(filter);\n  // console.log(\"Dashboard\", result_userList);\n  return (\n    <Container maxWidth=\"xl\" style={{ maxWidth: 1500 }} className=\"py-4 pb-16\">\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <SubBar title={\"Summary\"} />\n        </Grid>\n        <Grid item>\n          <Grid container spacing={1}>\n            <Grid item xs={3}>\n              <CardTotalUserByGender />\n            </Grid>\n            <Grid\n              style={{\n                minHeight: \"100%\",\n                flex: 1,\n                display: \"flex\",\n              }}\n              item\n              xs={9}\n            >\n              <Grid\n                container\n                style={{\n                  minHeight: \"100%\",\n                  flex: 1,\n                  display: \"flex\",\n                }}\n                spacing={1}\n              >\n                <Grid item xs={6}>\n                  <CardNationality />\n                </Grid>\n                <Grid item xs={6}>\n                  <CardAge />\n                </Grid>\n                <Grid\n                  item\n                  style={{\n                    display: \"flex\",\n                  }}\n                  xs={12}\n                >\n                  <Grid\n                    container\n                    style={{\n                      minHeight: \"100%\",\n                      flex: 1,\n                    }}\n                    spacing={1}\n                  >\n                    <Grid item xs={4}>\n                      <CardTopNationality />\n                    </Grid>\n                    <Grid item xs={4}>\n                      <CardTopAge />\n                    </Grid>\n                    <Grid item xs={4}>\n                      <CardTopLengthOfStay />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} style={{ paddingTop: 0, flex: 1 }}>\n          <Grid\n            container\n            style={{\n              minHeight: \"100%\",\n              flex: 1,\n            }}\n            spacing={1}\n          >\n            <Grid item xs={7}>\n              <CardLengthOfStay />\n            </Grid>\n            <Grid item xs={5}>\n              <CardSOS />\n            </Grid>\n          </Grid>\n        </Grid>\n        {/* spacing={1} */}\n        <Grid item xs={12}>\n          <Grid item md={6} xs={12}>\n            <SubBar title={\"Users\"} reload={false} viewAll={\"user/list\"} />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={6}>\n            <CardUserList\n              result_userList={result_userList}\n              loading_userList={loading_userList}\n              total={total}\n              filter={filter}\n              setPage={setPage}\n              mapRef={mapRef}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={6}\n            style={{\n              width: \"100%\",\n              flex: 1,\n              minHeight: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <StickyContainer\n              style={{\n                width: \"100%\",\n                flex: 1,\n                minHeight: \"100%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Sticky topOffset={-80}>\n                {({ style, isSticky }: any) => (\n                  <div style={style}>\n                    <div\n                      style={{\n                        height: \"auto\",\n                        position: \"relative\",\n                        minHeight: \"calc(100vh - 4rem)\",\n                        top: !isSticky ? 0 : \"4rem\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        overflow: \"hidden\",\n                      }}\n                    >\n                      <CardMapMemo\n                        mapRef={mapRef}\n                        result_userList={result_userList}\n                        loading_userList={loading_userList}\n                        page={filter.page}\n                        perPage={filter.perPage}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Sticky>\n            </StickyContainer>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport const DashboardMobile = () => {\n  const [page, setPage] = useState<number>(1);\n  const filter: Filter = {\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: webStore.filter_Keyword,\n    page: page,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList, total } = useListUser(filter);\n  return (\n    <Container maxWidth=\"lg\" className=\"pb-8\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <SubBar title={\"Summary\"} />\n        </Grid>\n        <Grid item xs={12}>\n          <Swiper\n            spaceBetween={5}\n            slidesPerView={1.5}\n            // slidesPerView={2}\n            // onSlideChange={(swiper) => console.log(\"slide change\", swiper)}\n            onSwiper={(swiper) => console.log(\"DashboardMobile\", swiper)}\n          >\n            <SwiperSlide>\n              <CardTopTotalUserByGender />\n            </SwiperSlide>\n            <SwiperSlide>\n              <CardTopNationality />\n            </SwiperSlide>\n            <SwiperSlide>\n              <CardTopAge />\n            </SwiperSlide>\n            <SwiperSlide>\n              <CardTopLengthOfStay />\n            </SwiperSlide>\n          </Swiper>\n        </Grid>\n        <Grid item xs={12}>\n          <SubBar title={\"Breakdown\"} reload={false} />\n        </Grid>\n        <Grid item xs={12}>\n          <CardTotalUserByGender />\n        </Grid>\n        <Grid item xs={12}>\n          <CardNationality />\n        </Grid>\n        <Grid item xs={12}>\n          <CardAge />\n        </Grid>\n        <Grid item xs={12}>\n          <CardLengthOfStay />\n        </Grid>\n        <Grid item xs={12}>\n          <CardSOS />\n        </Grid>\n        <Grid item xs={12}>\n          <SubBar title={\"Users\"} reload={false} viewAll={\"user/list\"} />\n        </Grid>\n        <Grid item xs={12}>\n          <CardUserList\n            result_userList={result_userList}\n            loading_userList={loading_userList}\n            total={total}\n            filter={filter}\n            setPage={setPage}\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserList/UserList.tsx",["462","463","464","465","466","467","468","469","470","471","472"],"import React, { Fragment, useEffect, useRef, useState } from \"react\";\n\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  TextField,\n  makeStyles,\n  withStyles,\n  InputBase,\n} from \"@material-ui/core\";\nimport { CardMap, CardMapMemo } from \"../Dashboard/CardMap\";\nimport { CardUserList } from \"../Dashboard/CardUserList\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport LuxonUtils from \"@date-io/luxon\";\nimport { DateFilter } from \"../../components/DateFilter\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { webStore } from \"../../stores/webStore\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { observer } from \"mobx-react-lite\";\nimport { useHistory } from \"react-router-dom\";\nimport MapIcon from \"@material-ui/icons/Map\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport { Filter } from \"../../types/user\";\nimport { useListAllUser } from \"../../services/api/user/useListAllUser\";\nimport { usePlace } from \"../../services/api/Options/usePlace\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { SwiperUserLists } from \"../UserManage/SwiperUserLists\";\n\nconst UserFilter = observer(({ display = true }: { display?: boolean }) => {\n  const [startDate, setStartDate] = useState<Date | null>(webStore.startDate);\n  const [endDate, setEndDate] = useState<Date | null>(webStore.endDate);\n  const [filterHour, setFilterHour] = useState<number | null>(\n    webStore.filter_hour\n  );\n  const [filterTemperature, setFilterTemperature] = useState<string | null>(\n    webStore.filter_temp || \"\"\n  );\n  const [filterWearing, setFilterWearing] = useState<string | null>(\n    webStore.filter_wear || \"\"\n  );\n  const [filterBattery, setFilterBattery] = useState<string | null>(\n    webStore.filter_battery || \"\"\n  );\n  const [filterYachtName, setFilterYachtName] = useState<string | null>(\n    webStore.filter_yacht_name || \"\"\n  );\n  // เพิ่ม\n  const [filterKeyword, setFilterKeyword] = useState<string | null>(\n    webStore.filter_Keyword || \"\"\n  );\n  // เพิ่ม\n  const [filterGeoFence, setFilterGeoFence] = useState<string | null>(\n    webStore.filter_geo_fence || \"\"\n  );\n\n  // const [filterHour, setFilterHour] = useState<number | null>(\n  //   webStore.filter_hour\n  // );\n\n  const TempOptions = [\n    { value: \"high\", label: \"High >37.8\" },\n    { value: \"warning\", label: \"Warning 37.5 - 37.8\" },\n    { value: \"normal\", label: \"Normal <=37.5\" },\n  ];\n\n  const WearingOptions = [\n    { value: \"24\", label: \">= 20 hour\" },\n    { value: \"19\", label: \"15 - 19 hour\" },\n    { value: \"15\", label: \"10 - 14 hour\" },\n    { value: \"9\", label: \"5 - 9 hour\" },\n    { value: \"5\", label: \"< 5 hour\" },\n  ];\n\n  const BatteryOptions = [\n    // { value: \"10\", label: \">= 80%\" },\n    // { value: \"8\", label: \"60 - 79%\" },\n    // { value: \"6\", label: \"40 - 59%\" },\n    // { value: \"4\", label: \"20 - 39%\" },\n    // { value: \"2\", label: \"< 20%\" },\n    { value: \"4\", label: \"76 - 100%\" },\n    { value: \"3\", label: \"51 - 75%\" },\n    { value: \"2\", label: \"26 - 50%\" },\n    { value: \"1\", label: \"16 - 25%\" },\n    { value: \"0\", label: \"1 - 15%\" },\n    { value: \"-1\", label: \"Turn off (including out of battery and charging)\" },\n  ];\n\n  const { result_places, loading_places, error_places } = usePlace();\n\n  useEffect(() => {\n    // console.log(\"changee\");\n    webStore.setStartDate(startDate);\n    webStore.setEndDate(endDate);\n    webStore.set_filter_temp(filterTemperature);\n    webStore.set_filter_wear(filterWearing);\n    webStore.set_filter_battery(filterBattery);\n    webStore.set_filter_yacht_name(filterYachtName);\n    webStore.set_filter_Keyword(filterKeyword);\n    webStore.set_filter_geo_fence(filterGeoFence);\n    // webStore.set_filter_hour(filterHour);\n  }, [\n    startDate,\n    endDate,\n    filterTemperature,\n    filterWearing,\n    filterBattery,\n    filterYachtName,\n    filterKeyword,\n    filterGeoFence,\n  ]);\n\n  return (\n    <Box mb={3}>\n      {display && (\n        <>\n          <Box\n            display=\"flex\"\n            py={2}\n            css={{\n              fontSize: 13,\n              borderRadius: 5,\n              backgroundColor: \"#fff\",\n              \"@media (max-width: 992px)\": {\n                flexFlow: \"wrap\",\n                backgroundColor: \"transparent\",\n              },\n            }}\n          >\n            <Box\n              borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              display=\"flex\"\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                },\n              }}\n            >\n              <MuiPickersUtilsProvider utils={LuxonUtils}>\n                <KeyboardDatePicker\n                  style={{\n                    margin: 0,\n                    width: \"100%\",\n                    borderWidth: 0,\n                    fontSize: 13,\n                  }}\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"from\"\n                  label=\"Date Start\"\n                  autoOk={true}\n                  value={startDate || new Date()}\n                  onChange={(date: MaterialUiPickersDate) => {\n                    setStartDate(date ? new Date(date.toString()) : null);\n                  }}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Box>\n            <Box\n              borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              display=\"flex\"\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                  borderWidth: 0,\n                },\n              }}\n            >\n              <MuiPickersUtilsProvider utils={LuxonUtils}>\n                <KeyboardDatePicker\n                  style={{ margin: 0, width: \"100%\", fontSize: 13 }}\n                  disableToolbar\n                  variant=\"inline\"\n                  format=\"MM/dd/yyyy\"\n                  margin=\"normal\"\n                  id=\"to\"\n                  label=\"Date End\"\n                  autoOk={true}\n                  value={endDate || new Date()}\n                  onChange={(date: MaterialUiPickersDate) => {\n                    setEndDate(date ? new Date(date.toString()) : null);\n                  }}\n                  KeyboardButtonProps={{\n                    \"aria-label\": \"change date\",\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Box>\n            <Box\n              display=\"flex\"\n              borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                },\n              }}\n            >\n              <FormControl css={{ width: \"100%\" }}>\n                <InputLabel id=\"filterTem-label\">Temperature</InputLabel>\n                <Select\n                  value={filterTemperature}\n                  disableUnderline\n                  css={{ fontFamily: \"inherit\", fontSize: \"inherit\" }}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                    setFilterTemperature(event.target.value as string);\n                  }}\n                  labelId=\"filterTem-label\"\n                >\n                  {TempOptions.map((v) => {\n                    return <MenuItem value={v.value}>{v.label}</MenuItem>;\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            <Box\n              display=\"flex\"\n              borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                  borderWidth: 0,\n                },\n              }}\n            >\n              <FormControl css={{ width: \"100%\" }}>\n                <InputLabel id=\"filterWearing-label\">Device wearing</InputLabel>\n                <Select\n                  value={filterWearing}\n                  disableUnderline\n                  css={{ fontFamily: \"inherit\", fontSize: \"inherit\" }}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                    setFilterWearing(event.target.value as string);\n                  }}\n                  labelId=\"filterWearing-label\"\n                >\n                  {WearingOptions.map((v) => {\n                    return <MenuItem value={v.value}>{v.label}</MenuItem>;\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            <Box\n              display=\"flex\"\n              borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                },\n              }}\n            >\n              <FormControl css={{ width: \"100%\" }}>\n                <InputLabel id=\"filterBattery-label\">Battery</InputLabel>\n                <Select\n                  value={filterBattery}\n                  disableUnderline\n                  css={{ fontFamily: \"inherit\", fontSize: \"inherit\" }}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                    setFilterBattery(event.target.value as string);\n                    // console.log(\"filterBattery\", filterBattery);\n                  }}\n                  labelId=\"filterBattery-label\"\n                >\n                  {BatteryOptions.map((v) => {\n                    return <MenuItem value={v.value}>{v.label}</MenuItem>;\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            <Box\n              display=\"flex\"\n              // borderRight=\"1px solid #ddd\"\n              px={2}\n              mb={{ xs: 3, md: 0 }}\n              justifyContent=\"center\"\n              width=\"100%\"\n              css={{\n                height: \"48px\",\n                \"@media (max-width: 992px)\": {\n                  width: \"50%\",\n                  borderWidth: 0,\n                },\n              }}\n            >\n              <FormControl css={{ width: \"100%\" }}>\n                <InputLabel id=\"filterYachtName-label\">Place Name</InputLabel>\n                <Select\n                  value={filterYachtName}\n                  disableUnderline\n                  css={{ fontFamily: \"inherit\", fontSize: \"inherit\" }}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n                    setFilterYachtName(event.target.value as string);\n                  }}\n                  labelId=\"filterYachtName-label\"\n                >\n                  {result_places.map((v) => {\n                    return <MenuItem value={`${v.id}`}>{v.name_en}</MenuItem>;\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            {/* <Box display=\"flex\" px={2} justifyContent=\"center\" width=\"100%\">\n                <FormControl css={{ width: \"100%\" }}>\n                  <InputLabel id=\"filterGeoFence-label\">GEO Fence</InputLabel>\n                  <Select\n                    value={filterGeoFence}\n                    disableUnderline\n                    css={{ fontFamily: \"inherit\", fontSize: \"inherit\" }}\n                    onChange={(\n                      event: React.ChangeEvent<{ value: unknown }>\n                    ) => {\n                      setFilterGeoFence(event.target.value as string);\n                    }}\n                    labelId=\"filterGeoFence-label\"\n                  >\n                    <MenuItem value=\"GEO_fence\">GEO Fence</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box> */}\n          </Box>\n          <Box textAlign=\"right\">\n            <Button\n              color=\"primary\"\n              css={{ fontSize: 13 }}\n              onClick={() => {\n                webStore.setStartDate(null);\n                webStore.setEndDate(null);\n                webStore.set_filter_hour(null);\n                webStore.set_filter_temp(null);\n                webStore.set_filter_wear(null);\n                webStore.set_filter_battery(null);\n                webStore.set_filter_yacht_name(null);\n                webStore.set_filter_Keyword(null);\n                webStore.set_filter_geo_fence(null);\n\n                setStartDate(webStore.startDate);\n                setEndDate(webStore.endDate);\n                setFilterHour(webStore.filter_hour);\n                setFilterTemperature(webStore.filter_temp);\n                setFilterWearing(webStore.filter_wear);\n                setFilterBattery(webStore.filter_battery);\n                setFilterYachtName(webStore.filter_yacht_name);\n                setFilterKeyword(webStore.filter_Keyword);\n                setFilterGeoFence(webStore.filter_geo_fence);\n              }}\n            >\n              Clear all filter\n            </Button>\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n});\n\nconst UserSearch = observer(\n  ({\n    keywordsearch,\n    setKeywordsearch,\n    displayFilter,\n    setDisplayFilter,\n    inputWidthMobile,\n  }: {\n    inputWidthMobile?: number;\n    keywordsearch: String;\n    setKeywordsearch: (event: any) => void;\n    displayFilter: boolean;\n    setDisplayFilter: (e: boolean) => void;\n  }) => {\n    return (\n      <Box css={{ backgroundColor: \"#fff\" }} p={1} borderRadius={2}>\n        <InputBase\n          placeholder=\"Customer name or IMEI or Passport\"\n          value={keywordsearch}\n          onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\n            setKeywordsearch(event.target.value as string);\n          }}\n          css={{\n            width: 300,\n            padding: \"8px 15px\",\n            \"@media (max-width: 992px)\": {\n              fontSize: 12,\n              width: inputWidthMobile ? inputWidthMobile : 235,\n            },\n          }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            console.log(\"search\");\n          }}\n          css={{\n            padding: 8,\n            minWidth: \"unset\",\n            boxShadow: \"unset\",\n          }}\n        >\n          <SearchIcon />\n        </Button>\n        <Button\n          variant=\"text\"\n          onClick={() => {\n            setDisplayFilter(displayFilter ? false : true);\n          }}\n          css={{\n            padding: 8,\n            minWidth: \"unset\",\n            boxShadow: \"unset\",\n            borderLeft: \"1px solid #ddd\",\n            borderRadius: 0,\n            marginLeft: 10,\n            \"@media (min-width: 991px)\": {\n              display: \"none\",\n            },\n          }}\n        >\n          <FilterListIcon />\n        </Button>\n      </Box>\n    );\n  }\n);\n\nexport const UserList = observer(() => {\n  const history = useHistory();\n  const [displayFilter, setDisplayFilter] = useState<boolean>(false);\n  const [displayUserLocation, setDisplayUserLocation] = useState<boolean>(\n    false\n  );\n  const [keywordsearch, setKeywordsearch] = useState(String);\n  const mapRef = useRef<any>();\n  const [page, setPage] = useState<number>(1);\n  const filter: Filter = {\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: keywordsearch,\n    page: page,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList, total } = useListAllUser(filter);\n  return (\n    <Container maxWidth=\"xl\" className=\"py-4\">\n      <Grid container>\n        <Grid item xs={12}>\n          <Box\n            className=\"flex justify-between items-center flex-wrap\"\n            pt={4}\n            mb={3}\n          >\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              css={{\n                \"@media (max-width: 992px)\": {\n                  width: \"100%\",\n                  justifyContent: \"space-between\",\n                },\n              }}\n              mb={{ xs: 3, md: 0 }}\n            >\n              <Box fontSize=\"h5.fontSize\" fontWeight={500} mr={3}>\n                User List\n              </Box>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<AddIcon />}\n                  onClick={() => {\n                    history.push(\"/user/create\");\n                  }}\n                  css={{\n                    \"@media (max-width: 992px)\": {\n                      backgroundColor: \"transparent\",\n                      boxShadow: \"unset\",\n                      color: \"#4684E2\",\n                    },\n                  }}\n                >\n                  Add user\n                </Button>\n                <Box\n                  display={{ xs: \"block\", md: \"none\" }}\n                  borderLeft=\"1px solid rgba(0, 0, 0, 0.1)\"\n                >\n                  <Button\n                    variant=\"text\"\n                    css={{\n                      padding: 8,\n                      minWidth: \"unset\",\n                    }}\n                    onClick={() => {\n                      setDisplayUserLocation(true);\n                    }}\n                  >\n                    <MapIcon css={{ color: \"#4684E2\" }} />\n                  </Button>\n                </Box>\n              </Box>\n            </Box>\n            <UserSearch\n              keywordsearch={keywordsearch}\n              setKeywordsearch={setKeywordsearch}\n              displayFilter={displayFilter}\n              setDisplayFilter={setDisplayFilter}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Box display={{ xs: \"none\", md: \"block\" }}>\n            <UserFilter />\n          </Box>\n          <Box display={{ xs: \"block\", md: \"none\" }}>\n            <UserFilter display={displayFilter} />\n          </Box>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={6}>\n            <CardUserList\n              result_userList={result_userList}\n              loading_userList={loading_userList}\n              total={total}\n              filter={filter}\n              setPage={setPage}\n              mapRef={mapRef}\n            />\n          </Grid>\n          <Grid\n            item\n            md={6}\n            css={{\n              width: \"100%\",\n              flex: 1,\n              minHeight: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              \"@media (max-width: 992px)\": {\n                display: \"none\",\n              },\n            }}\n          >\n            <StickyContainer\n              style={{\n                width: \"100%\",\n                flex: 1,\n                minHeight: \"100%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Sticky topOffset={-80}>\n                {({ style, isSticky }: any) => (\n                  <div style={style}>\n                    <div\n                      style={{\n                        height: \"auto\",\n                        position: \"relative\",\n                        minHeight: \"calc(100vh - 4rem)\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        top: !isSticky ? 0 : \"4rem\",\n                      }}\n                    >\n                      <CardMapMemo\n                        mapRef={mapRef}\n                        result_userList={result_userList}\n                        loading_userList={loading_userList}\n                        page={filter.page}\n                        perPage={filter.perPage}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Sticky>\n            </StickyContainer>\n          </Grid>\n        </Grid>\n      </Grid>\n      {displayUserLocation && (\n        <Grid\n          container\n          className=\"fixed w-screen h-screen left-0 top-0\"\n          style={{ zIndex: 9991 }}\n        >\n          <Box className=\"absolute w-full z-10 \">\n            <Box className=\"flex justify-center items-center bg-white\">\n              <Button\n                variant=\"text\"\n                onClick={() => {\n                  setDisplayUserLocation(false);\n                }}\n                css={{\n                  padding: \"8px 8px 8px 15px\",\n                  minWidth: \"unset\",\n                  boxShadow: \"unset\",\n                  borderRight: \"1px solid #ddd\",\n                  borderRadius: 0,\n                }}\n              >\n                <ArrowBackIosIcon style={{ width: 20 }} />\n              </Button>\n              <UserSearch\n                inputWidthMobile={220}\n                keywordsearch={keywordsearch}\n                setKeywordsearch={setKeywordsearch}\n                displayFilter={displayFilter}\n                setDisplayFilter={setDisplayFilter}\n              />\n            </Box>\n            <Box className=\"bg-white\">\n              <UserFilter display={displayFilter} />\n            </Box>\n          </Box>\n          <CardMapMemo\n            mapRef={mapRef}\n            result_userList={result_userList}\n            loading_userList={loading_userList}\n            page={filter.page}\n            perPage={filter.perPage}\n            loadmore={true}\n          />\n          <Box className=\"absolute w-full z-10 bottom-0\">\n            <SwiperUserLists\n              result_userList={result_userList}\n              loading_userList={loading_userList}\n              total={total}\n              filter={filter}\n              setPage={setPage}\n              mapRef={mapRef}\n            />\n          </Box>\n        </Grid>\n      )}\n    </Container>\n  );\n});\nexport const UserListMobile = UserList;\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserCreate.tsx",["473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498"],"import { css, jsx } from \"@emotion/react\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport {\n  Box,\n  Container,\n  Grid,\n  FormControl,\n  Button,\n  CircularProgress,\n  Paper,\n  TextField,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  MuiThemeProvider,\n  createMuiTheme,\n  Avatar,\n  LinearProgress,\n  Badge,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport LuxonUtils from \"@date-io/luxon\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { UserInfoCard } from \"./UserInfoCard\";\nimport { DeviceHistoryDatagrid } from \"./DeviceHistoryDatagrid\";\nimport { DateFilter } from \"../../components/DateFilter\";\n\nimport { BodyTempGraph } from \"./BodyTempGraph\";\nimport { HeartRateGraph } from \"./HeartRateGraph\";\nimport { BloodPressureGraph } from \"./BloodPressureGrph\";\nimport { UserCreateInput } from \"../../types/user\";\nimport { useCreateUser } from \"../../services/api/user/useCreateUser\";\nimport { useSnackbar } from \"notistack\";\nimport { useListHospital } from \"../../services/api/user/useListHospital\";\nimport { useListAgencies } from \"../../services/api/user/useListAgencies\";\nimport { useListBranches } from \"../../services/api/user/useListBranches\";\nimport { ToolbarComponentProps } from \"@material-ui/pickers/Picker/Picker\";\nimport { useUploadImage } from \"../../services/api/user/useUploadImage\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport { arrayIncludes } from \"@material-ui/pickers/_helpers/utils\";\n\nexport const NON_REQUIRE_USER_FIELD = [\n  \"agency_contracted_id\",\n  \"avatar\",\n  \"avatar_url\",\n  \"departure_port\",\n  \"destination_port\",\n  // \"device_id_1\",\n  \"device_id_2\",\n  \"device_provider_id\",\n  \"hospital_contracted_id\",\n  \"title_name_id\",\n];\n\nconst LabelForm = (props: any) => {\n  return (\n    <Box fontSize={13} css={{ color: \"rgba(75, 76, 86, 0.4)\" }} mt={4} mb={1}>\n      {props.children}\n    </Box>\n  );\n};\n\nconst InputText = ({ input, form, onChange, ...rest }: any) => {\n  return (\n    <TextField\n      label={input.label}\n      value={form[input.name]}\n      onChange={onChange}\n      name={input.name}\n      placeholder={\"Please enter \" + input.label}\n      // helperText={`Please enter ${input.label}`}\n      fullWidth\n      margin=\"dense\"\n      // InputLabelProps={{\n      //   shrink: true,\n      // }}\n      variant=\"outlined\"\n      size=\"small\"\n      {...rest}\n    />\n  );\n};\n\nconst InputDropdown = observer(\n  ({\n    option,\n    input,\n    value,\n    onChange,\n    error,\n  }: {\n    option: any;\n    input: any;\n    value: any;\n    onChange: any;\n    error: boolean;\n  }) => {\n    return (\n      <FormControl\n        variant=\"outlined\"\n        style={{ width: \"100%\" }}\n        disabled={(option || []).length === 0}\n        required={NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0}\n        size=\"small\"\n        margin=\"dense\"\n      >\n        <InputLabel id=\"demo-simple-select-outlined-label\">\n          {input.label}\n        </InputLabel>\n        <Select\n          disabled={(option || []).length === 0}\n          labelId=\"demo-simple-select-outlined-label\"\n          name={input.name}\n          label={input.label}\n          value={value}\n          onChange={onChange}\n          fullWidth\n          required={NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0}\n          error={error}\n        >\n          {option?.map((v: any) => {\n            return <MenuItem value={v.value}>{v.name}</MenuItem>;\n          })}\n        </Select>\n      </FormControl>\n    );\n  }\n);\n\nexport const InputDate = observer(\n  ({\n    input,\n    form,\n    onChange,\n    error,\n    value,\n  }: {\n    input: any;\n    form?: any;\n    onChange: any;\n    error: boolean;\n    value?: any;\n  }) => {\n    const f: any = form;\n    const v: any = form ? f[input.name] : value;\n    return (\n      <FormControl\n        required={NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0}\n        style={{ width: \"100%\" }}\n        size=\"small\"\n        margin=\"dense\"\n      >\n        <MuiPickersUtilsProvider utils={LuxonUtils}>\n          <KeyboardDatePicker\n            required={NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0}\n            style={{ margin: 0, width: \"100%\" }}\n            autoOk\n            format=\"dd/MM/yyyy\"\n            margin=\"normal\"\n            id=\"from\"\n            size=\"small\"\n            ToolbarComponent={(props: ToolbarComponentProps) => {\n              return (\n                <div\n                  style={{\n                    background: \"#494592\",\n                  }}\n                >\n                  <Box p={2}>\n                    <Button\n                      size=\"small\"\n                      css={css`\n                        font-size: 0.8rem;\n                        color: white;\n                        line-height: 1rem;\n                        font-weight: bold;\n                        text-transform: none;\n                      `}\n                      onClick={() => {\n                        props.setOpenView(\"date\");\n                      }}\n                    >\n                      {props.date?.weekdayLong + \" \" + props.date?.day}\n                    </Button>\n                    <Grid>\n                      <Button\n                        size=\"small\"\n                        css={css`\n                          font-size: 1.5rem;\n                          line-height: 1.65rem;\n                          font-weight: bold;\n                          color: white;\n                          text-transform: none;\n                        `}\n                        onClick={() => {\n                          props.setOpenView(\"month\");\n                        }}\n                      >\n                        {props.date?.monthLong}\n                      </Button>\n                      <Button\n                        size=\"small\"\n                        css={css`\n                          font-size: 1.5rem;\n                          line-height: 1.5rem;\n                          font-weight: bold;\n                          color: white;\n                          text-transform: none;\n                        `}\n                        onClick={() => {\n                          props.setOpenView(\"year\");\n                        }}\n                      >\n                        {props.date?.year}\n                      </Button>\n                    </Grid>\n                  </Box>\n                </div>\n              );\n            }}\n            inputVariant=\"outlined\"\n            label={input.label}\n            value={v}\n            onChange={onChange}\n            KeyboardButtonProps={{\n              \"aria-label\": \"change date\",\n            }}\n            error={error}\n          />\n        </MuiPickersUtilsProvider>\n      </FormControl>\n    );\n  }\n);\n\n//\nexport const UserCreate = observer(() => {\n  const [form, setForm] = useState<UserCreateInput>({\n    avatar: null,\n    avatar_url: null,\n    title_name_id: null,\n    name: \"\",\n    surname: \"\",\n    gender: \"\",\n    date_of_birth: null,\n    nationality: \"\",\n    card_number: \"\",\n    branch_id: \"\",\n    place_of_use: \"\",\n    device_id_1: null,\n    device_id_2: null,\n    device_provider_id: \"\",\n    start_date: null,\n    end_date: null,\n    departure_port: \"\",\n    destination_port: \"\",\n    agency_contracted_id: \"\",\n    hospital_contracted_id: \"\",\n  }); //\n\n  const [ERROR_REQUIRE, setErrorRequired] = useState(Array());\n  const { enqueueSnackbar } = useSnackbar();\n  const { fire_user_create, loading_user_create } = useCreateUser();\n  const { fire_upload_image, loading_upload_image } = useUploadImage();\n  const {\n    result_branches,\n    loading_branches,\n    error_branches,\n  } = useListBranches();\n\n  const { result_hospital, loading_hospital, error_hospital } = useListHospital(\n    form.branch_id || \"\"\n  );\n  const { result_agencies, loading_agencies, error_agencies } = useListAgencies(\n    form.branch_id || \"\"\n  );\n\n  const history = useHistory();\n  const setVal = (k: any, v: any) => {\n    let newV: any = { ...form };\n    newV[k] = v;\n    setForm(newV);\n  };\n  const onChange = (e: any) => {\n    if (e.target.name) {\n      setVal(e.target.name, e.target.value);\n    }\n    if (e.target.value !== null || e.target.value !== \"\") {\n      setErrorRequired(ERROR_REQUIRE.filter((x) => x != e.target.name));\n    }\n  };\n\n  let option: any = [];\n  option[\"gender\"] = [\n    { value: \"m\", name: \"Male\" },\n    { value: \"f\", name: \"Female\" },\n  ];\n\n  option[\"hospital_contracted_id\"] = loading_agencies\n    ? []\n    : result_hospital.map((h: any) => {\n        return { value: h.id, name: h.name_th };\n      });\n\n\n  option[\"agency_contracted_id\"] = loading_agencies\n    ? []\n    : result_agencies.map((h: any) => {\n        return { value: h.id, name: h.name_th };\n      });\n  option[\"branch_id\"] = loading_branches\n    ? []\n    : result_branches.map((h: any) => {\n        return { value: h.id, name: h.name_th };\n      });\n  useEffect(() => {\n    setVal(\"agency_contracted_id\", null);\n    setVal(\"hospital_contracted_id\", null);\n  }, [form && form.branch_id]);\n\n  return (\n    <>\n      <Container maxWidth=\"md\" className=\"py-4\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <SubBar\n              reload={false}\n              back={true}\n              title={\"Create User\"}\n              importExcel={\"import\"}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"md\" className=\"py-2\">\n        <Paper variant=\"outlined\" css={{ borderWidth: 0 }}>\n          <Box py={4} px={{ xs: 2, md: 6 }}>\n            <Box fontSize=\"h5.fontSize\" fontWeight={600} mb={1}>\n              User information\n            </Box>\n            <Grid container>\n              <Box order={{ xs: 2, md: 0 }} width={{ xs: \"100%\", md: \"80%\" }}>\n                <Grid container>\n                  <Grid item xs={12}>\n                    <LabelForm>Information</LabelForm>\n                  </Grid>\n                  <Grid container spacing={1}>\n                    {[\n                      { name: \"name\", label: \"Name\", width: 6 },\n                      { name: \"surname\", label: \"Surname\", width: 6 },\n                    ].map((input) => {\n                      return (\n                        <Grid item md={(input.width as 6 | 2 | 5) || 6} xs={12}>\n                          <InputText\n                            {...{\n                              onChange,\n                              form,\n                              input,\n                              required:\n                                NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0,\n                              error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                            }}\n                          />\n                        </Grid>\n                      );\n                    })}\n                    <Grid item md={2} xs={12}>\n                      <InputDropdown\n                        option={option[\"gender\"]}\n                        input={{ name: \"gender\", label: \"Gender\" }}\n                        value={form[\"gender\"]}\n                        onChange={onChange}\n                        error={ERROR_REQUIRE.indexOf(\"gender\") >= 0}\n                      />\n                    </Grid>\n                    {[{ name: \"nationality\", label: \"Nationality\" }].map(\n                      (input) => {\n                        return (\n                          <Grid item md={5} xs={12}>\n                            <InputText\n                              {...{\n                                onChange,\n                                form,\n                                input,\n                                required:\n                                  NON_REQUIRE_USER_FIELD.indexOf(input.name) <\n                                  0,\n                                error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                              }}\n                            />\n                          </Grid>\n                        );\n                      }\n                    )}\n                    <Grid item md={5} xs={12}>\n                      <InputDate\n                        form={form}\n                        input={{\n                          name: \"date_of_birth\",\n                          label: \"Date of Birth\",\n                        }}\n                        onChange={(date: MaterialUiPickersDate) => {\n                          setVal(\n                            \"date_of_birth\",\n                            date ? new Date(date.toString()) : null\n                          );\n                          if (date) {\n                            setErrorRequired(\n                              ERROR_REQUIRE.filter((x) => x != \"date_of_birth\")\n                            );\n                          }\n                        }}\n                        error={ERROR_REQUIRE.indexOf(\"date_of_birth\") >= 0}\n                      />\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <LabelForm>Passport</LabelForm>\n                  </Grid>\n                  {[{ name: \"card_number\", label: \"Card Number\" }].map(\n                    (input) => {\n                      return (\n                        <Grid item xs={12}>\n                          <InputText\n                            {...{\n                              onChange,\n                              form,\n                              input,\n                              required:\n                                NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0,\n                              error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                            }}\n                          />\n                        </Grid>\n                      );\n                    }\n                  )}\n                  <Grid item xs={12}>\n                    <LabelForm>Place</LabelForm>\n                  </Grid>\n                  {[{ name: \"place_of_use\", label: \"Place Name\" }].map(\n                    (input) => {\n                      return (\n                        <Grid item xs={12}>\n                          <InputText\n                            {...{\n                              onChange,\n                              form,\n                              input,\n                              required:\n                                NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0,\n                              error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                            }}\n                          />\n                        </Grid>\n                      );\n                    }\n                  )}\n                  <Box mb={3} width=\"100%\">\n                    &nbsp;\n                  </Box>\n                  <Grid item xs={12}>\n                    <LabelForm>Wristband</LabelForm>\n                  </Grid>\n                  {/* spacing={1} */}\n                  <Grid item xs={12}>\n                    {[\n                      { name: \"device_id_1\", label: \"IMEI 01\" },\n                      { name: \"device_id_2\", label: \"IMEI 02\" },\n                    ].map((input) => {\n                      return (\n                        <Grid item md={6} xs={12}>\n                          <InputText\n                            {...{\n                              onChange,\n                              form,\n                              input,\n                              required:\n                                NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0,\n                              error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                            }}\n                          />\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <LabelForm>Quarantine</LabelForm>\n                  </Grid>\n                  {/* spacing={1} */}\n                  <Grid item xs={12}>\n                    {[\n                      { name: \"start_date\", label: \"Start quarantine\" },\n                      { name: \"end_date\", label: \"End quarantine\" },\n                    ].map((input) => {\n                      return (\n                        <Grid item md={6} xs={12}>\n                          <InputDate\n                            form={form}\n                            input={input}\n                            onChange={(date: MaterialUiPickersDate) => {\n                              setVal(\n                                input.name,\n                                date ? new Date(date.toString()) : null\n                              );\n                              if (date) {\n                                setErrorRequired(\n                                  ERROR_REQUIRE.filter((x) => x != input.name)\n                                );\n                              }\n                            }}\n                            error={ERROR_REQUIRE.indexOf(input.name) >= 0}\n                          />\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                  <Box mb={3} width=\"100%\">\n                    &nbsp;\n                  </Box>\n                  <Grid item xs={12}>\n                    <LabelForm>Branch</LabelForm>\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                    <InputDropdown\n                      option={option[\"branch_id\"]}\n                      input={{ name: \"branch_id\", label: \"Branch\" }}\n                      value={form[\"branch_id\"]}\n                      onChange={onChange}\n                      error={ERROR_REQUIRE.indexOf(\"branch_id\") >= 0}\n                    />\n                  </Grid>\n                  {(form.branch_id || loading_hospital || loading_agencies) && (\n                    <>\n                      <Grid item xs={12}>\n                        <LabelForm>Contract</LabelForm>\n                      </Grid>\n                      {/* spacing={1} */}\n                      <Grid item xs={12}>\n                        {(form.branch_id || loading_hospital) && (\n                          <Grid item md={6} xs={12}>\n                            <InputDropdown\n                              option={option[\"hospital_contracted_id\"]}\n                              input={{\n                                name: \"hospital_contracted_id\",\n                                label: \"Hospital\",\n                              }}\n                              value={form[\"hospital_contracted_id\"]}\n                              onChange={onChange}\n                              error={\n                                ERROR_REQUIRE.indexOf(\n                                  \"hospital_contracted_id\"\n                                ) >= 0\n                              }\n                            />\n                          </Grid>\n                        )}\n                        {(form.branch_id || loading_agencies) && (\n                          <Grid item md={6} xs={12}>\n                            <InputDropdown\n                              option={option[\"agency_contracted_id\"]}\n                              input={{\n                                name: \"agency_contracted_id\",\n                                label: \"Agencies\",\n                              }}\n                              value={form[\"agency_contracted_id\"]}\n                              onChange={onChange}\n                              error={\n                                ERROR_REQUIRE.indexOf(\"agency_contracted_id\") >=\n                                0\n                              }\n                            />\n                          </Grid>\n                        )}\n                      </Grid>\n                    </>\n                  )}\n\n                  <Grid item xs={12}>\n                    <LabelForm>Departure/Destination</LabelForm>\n                  </Grid>\n                  {/* spacing={1} */}\n                  <Grid item xs={12}>\n                    {[\n                      { name: \"departure_port\", label: \"Departure Port\" },\n                      { name: \"destination_port\", label: \"Destination Port\" },\n                    ].map((input) => {\n                      return (\n                        <Grid item md={6} xs={12}>\n                          <InputText\n                            {...{\n                              onChange,\n                              form,\n                              input,\n                              required:\n                                NON_REQUIRE_USER_FIELD.indexOf(input.name) < 0,\n                              error: ERROR_REQUIRE.indexOf(input.name) >= 0,\n                            }}\n                          />\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                  {/* spacing={1} */}\n                  <Grid item xs={12}>\n                    <Grid item md={6} xs={12}>\n                      <Box mt={6}>\n                        <Button\n                          fullWidth\n                          css={{ backgroundColor: \"#279825\", color: \"#fff\" }}\n                          onClick={async () => {\n                            setErrorRequired(Array());\n                            var valid = _.every(_.keys(form), (v, i) => {\n                              if (NON_REQUIRE_USER_FIELD.indexOf(v) >= 0) {\n                                return true;\n                              }\n                              const f: any = form;\n                              return f[v] !== null && f[v] !== \"\";\n                            });\n\n                            if (valid) {\n                              try {\n                                fire_user_create(form)\n                                  .then(() => {\n                                    history.goBack();\n                                    enqueueSnackbar(\"สมัครสมาชิกสำเร็จ\", {\n                                      variant: \"success\",\n                                      autoHideDuration: 3000,\n                                      anchorOrigin: {\n                                        vertical: \"top\",\n                                        horizontal: \"center\",\n                                      },\n                                    });\n                                  })\n                                  .catch((ex) => {\n                                    enqueueSnackbar(\n                                      \"สมัครสมาชิกไม่สำเร็จ\" +\n                                        (ex ? \" : \" + ex.toString() : \"\"),\n                                      {\n                                        variant: \"error\",\n                                        autoHideDuration: 3000,\n                                        anchorOrigin: {\n                                          vertical: \"top\",\n                                          horizontal: \"center\",\n                                        },\n                                      }\n                                    );\n                                  });\n                              } catch (ex) {}\n                            } else {\n                              setErrorRequired(() => {\n                                return _.keys(form).map((v) => {\n                                  const f: any = form;\n                                  if (\n                                    NON_REQUIRE_USER_FIELD.indexOf(v) < 0 &&\n                                    (f[v] == null || f[v] == \"\")\n                                  ) {\n                                    return v;\n                                  }\n                                });\n                              });\n                            }\n                          }}\n                          size=\"large\"\n                          variant=\"contained\"\n                          // color=\"primary\"\n                        >\n                          {loading_user_create && (\n                            <CircularProgress size=\"1rem\" color=\"inherit\" />\n                          )}\n                          Submit\n                        </Button>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Box>\n              <Box\n                order={{ xs: 0, md: 2 }}\n                width={{ xs: \"100%\", md: \"20%\" }}\n                textAlign=\"center\"\n              >\n                <LabelForm>Profile Avatar</LabelForm>\n                <input\n                  accept=\"image/*\"\n                  style={{ display: \"none\" }}\n                  id=\"avatar_url\"\n                  type=\"file\"\n                  onChange={({ target }) => {\n                    console.log(\"set\");\n\n                    if (target && target?.files?.[0]) {\n                      const formData = new FormData();\n                      formData.append(\"image\", target?.files?.[0]);\n                      console.log(\"fire\");\n                      fire_upload_image(formData)\n                        .then(({ data }) => {\n                          if (data.data) {\n                            setVal(\"avatar_url\", data.data?.image_url);\n                            let newV: any = { ...form };\n                            newV[\"avatar_url\"] = data.data?.image_url;\n                            newV[\"avatar\"] = data.data?.id;\n                            setForm(newV);\n                            enqueueSnackbar(\"Upload สำเร็จ\", {\n                              variant: \"success\",\n                              autoHideDuration: 3000,\n                              anchorOrigin: {\n                                vertical: \"top\",\n                                horizontal: \"center\",\n                              },\n                            });\n                          } else {\n                            enqueueSnackbar(\"Upload ไม่สำเร็จ\", {\n                              variant: \"error\",\n                              autoHideDuration: 3000,\n                              anchorOrigin: {\n                                vertical: \"top\",\n                                horizontal: \"center\",\n                              },\n                            });\n                          }\n                        })\n                        .catch(() => {\n                          enqueueSnackbar(\"Upload ไม่สำเร็จ\", {\n                            variant: \"error\",\n                            autoHideDuration: 3000,\n                            anchorOrigin: {\n                              vertical: \"top\",\n                              horizontal: \"center\",\n                            },\n                          });\n                        });\n                    }\n                  }}\n                />\n                <label htmlFor=\"avatar_url\">\n                  <Button\n                    component=\"span\"\n                    disabled={loading_upload_image}\n                    variant=\"text\"\n                    color=\"inherit\"\n                    css={{ position: \"relative\" }}\n                  >\n                    <Badge\n                      overlap=\"circle\"\n                      anchorOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                      badgeContent={\n                        <Box\n                          p={1}\n                          css={{\n                            backgroundColor: \"#4650AC\",\n                            borderRadius: \"50%\",\n                          }}\n                        >\n                          <BorderColorIcon\n                            style={{ color: \"white\", fontSize: 15 }}\n                          />\n                        </Box>\n                      }\n                    >\n                      <Avatar\n                        css={{\n                          width: \"80px\",\n                          height: \"80px\",\n                        }}\n                        alt={\"avatar\"}\n                        src={form[\"avatar_url\"] || \"\"}\n                      />\n                    </Badge>\n\n                    {loading_upload_image && (\n                      <LinearProgress\n                        css={{\n                          position: \"absolute\",\n                          top: 0,\n                          left: 0,\n                          width: \"100%\",\n                        }}\n                      />\n                    )}\n                  </Button>\n                </label>\n              </Box>\n            </Grid>\n          </Box>\n        </Paper>\n      </Container>\n    </>\n  );\n});\nexport const UserCreateMobile = UserCreate;\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserImport.tsx",["499","500","501","502","503","504","505","506","507"],"import { Theme } from \"@emotion/react\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Container,\n  createStyles,\n  Divider,\n  FormControl,\n  Grid,\n  InputLabel,\n  LinearProgress,\n  MenuItem,\n  Paper,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  withStyles,\n} from \"@material-ui/core\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport _ from \"lodash\";\nimport { observer } from \"mobx-react-lite\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { useHistory } from \"react-router-dom\";\nimport xlsx from \"xlsx\";\nimport fa_cloud_upload from \"../../components/assets/fa-cloud-upload.svg\";\nimport fa_upload_white from \"../../components/assets/fa-upload-white.svg\";\nimport fa_upload from \"../../components/assets/fa-upload.svg\";\nimport { useImportUser } from \"../../services/api/user/useImportUser\";\nimport { useListBranches } from \"../../services/api/user/useListBranches\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { NON_REQUIRE_USER_FIELD } from \"./UserCreate\";\n\n//\ntype ImportRow = {\n  name: string;\n  surname: string;\n  date_of_birth: string;\n  gender: string;\n  nationality: string;\n  card_number: string;\n  quarantine_start: string;\n  quarantine_end: string;\n  place: string;\n  contract_hospital: string;\n  contract_agency: string;\n  phone_number: string;\n  email: string;\n\n  departure_port: string;\n  destination_port: string;\n  imei_1: string;\n  imei_2: string;\n};\nexport const UserImport = observer(() => {\n  const [dragOverState, setDragOverState] = useState(false);\n  const [fails, setFails] = useState<any[]>([]);\n  const [branchId, setBranchId] = useState(\"\");\n  const [rows, setRows] = useState<ImportRow[]>([]);\n  const history = useHistory();\n  const [uploadState, setUploadState] = useState(false);\n  const [file, setFile] = useState<any>();\n  const [failed, setFailed] = useState(false);\n  const [informationIsValid, set_informationIsValid] = useState(false);\n  const { loading_user_import, fire_user_import } = useImportUser();\n  const [progress, setProgress] = useState(0);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const {\n    result_branches,\n    loading_branches,\n    error_branches,\n  } = useListBranches();\n\n  console.log(\"result_branches\", result_branches);\n\n  const handleDragOver = (e: any) => {\n    setDragOverState(true);\n  };\n\n  const handleDragLeave = (e: any) => {\n    setDragOverState(false);\n  };\n\n  const handleDrop = (e: any) => {\n    setDragOverState(false);\n  };\n\n  const handleDropZone = (acceptedFiles: any) => {\n    if (acceptedFiles.length > 1) {\n      alert(\"Please select only one file\");\n    } else if (\n      acceptedFiles[0].type != \"text/csv\" &&\n      acceptedFiles[0].type != \"application/vnd.ms-excel\" &&\n      acceptedFiles[0].type !=\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ) {\n      alert(\"Please select .csv / .xls / .xlsx file type only\");\n    } else {\n      //file is okay\n      setUploadState(true);\n      let progressInterval = setInterval(() => {\n        setProgress((oldProgress) => {\n          if (oldProgress + 1 >= 100) {\n            clearInterval(progressInterval);\n            return 100;\n          }\n          return oldProgress + 1;\n        });\n      }, 30);\n      const onError = (msgs: any[]) => {\n        setFails(msgs);\n        setFailed(true);\n        setProgress(100);\n      };\n      try {\n        const f = acceptedFiles[0];\n        var name = f.name;\n        const reader = new FileReader();\n        reader.onload = (evt: any) => {\n          try {\n            // evt = on_file_select event\n            /* Parse data */\n            const bstr = evt.target.result;\n            var workbook = xlsx.read(bstr, {\n              type: \"binary\",\n            });\n            let json_object: ImportRow[] = [];\n            workbook.SheetNames.forEach(function (sheetName, i) {\n              if (i !== 0) {\n                return;\n              }\n              // Here is your object//\n              var XL_row_object = xlsx.utils.sheet_to_json(\n                workbook.Sheets[sheetName]\n              );\n              json_object = XL_row_object as any[];\n            });\n            const errors = [];\n\n            for (const r of json_object) {\n              const prefix = \"ROW \" + (json_object.indexOf(r) + 1) + \" : \";\n              /*  VALIDATE MISSING FIELD */\n              _.each(r, (k) => {\n                const s: any = (r as any)[k];\n                if (!s && NON_REQUIRE_USER_FIELD.indexOf(k) < 0)\n                  errors.push(`${prefix}Missing ${k}`);\n              });\n              /*  VALIDATE ENUM */\n              if ([\"m\", \"f\"].indexOf(r.gender) < 0) {\n                errors.push(`${prefix}Gender need to be \"m\" or \"f\"`);\n              }\n              /* VALIDATE IMEI */\n              _.each([\"imei_1\", \"imei_2\"], (k) => {\n                const s: any = (r as any)[k];\n                if (s && s.length !== 12) {\n                  errors.push(`${prefix} ${k} - Must be 12 digits`);\n                }\n              });\n            }\n            if (errors.length > 0) {\n              onError(errors);\n            } else {\n              setFails([]);\n              setFailed(false);\n              setRows(json_object);\n              setProgress(100);\n              set_informationIsValid(false);\n              setFile(bstr);\n            }\n            console.log(\"json_object\", json_object);\n          } catch (ex: any) {\n            onError([ex.toString()]);\n          }\n        };\n        reader.readAsBinaryString(f);\n      } catch (ex: any) {\n        onError([ex.toString()]);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (!informationIsValid) {\n      alert(`Please review data and click 'All of information is correct'`);\n    } else {\n      fire_user_import({\n        branch_id: branchId,\n        file: file,\n      })\n        .then(() => {\n          enqueueSnackbar(\n            \"Users in the excel file have been created successfully!\",\n            { variant: \"success\" }\n          );\n          history.push(\"/user/list\");\n        })\n        .catch((ex) => {\n          enqueueSnackbar(\"Upload Fail!:\" + (ex ? \" : \" + ex.toString() : \"\"), {\n            variant: \"error\",\n          });\n        });\n    }\n  };\n\n  const BorderLinearProgress = withStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        height: 10,\n        borderRadius: 5,\n      },\n      colorPrimary: {\n        backgroundColor: \"#FFF\",\n      },\n      bar: {\n        borderRadius: 5,\n        backgroundColor: \"var(--primary)\",\n      },\n    })\n  )(LinearProgress);\n\n  const uploadNewExcel = () => {\n    setUploadState(false);\n    set_informationIsValid(false);\n    setFails([]);\n    setRows([]);\n    setProgress(0);\n  };\n\n  function createData(\n    name: string,\n    gender: string,\n    age: number,\n    nationality: string,\n    IMEI: string,\n    branch: string,\n    avatar: string,\n    yatch: string,\n    departure: string\n  ) {\n    return {\n      name,\n      gender,\n      age,\n      nationality,\n      IMEI,\n      branch,\n      avatar,\n      yatch,\n      departure,\n    };\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"lg\" className=\"py-4\">\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            <SubBar reload={false} back={true} title={\"Import many users\"} />\n            <Paper className=\"mt-4\">\n              <Container className=\"py-12\">\n                <Grid className=\"mx-6 relative\">\n                  <Box className=\"text-xl\" fontWeight={600}>\n                    Create many user from excels\n                  </Box>\n                  <Box className=\"text-xs mt-2 mb-8\">\n                    Please use templates example from this{\" \"}\n                    <a\n                      href=\"#\"\n                      className=\"font-bold cursor-pointer\"\n                      style={{ color: \"var(--primary)\" }}\n                    >\n                      link\n                    </a>\n                  </Box>\n                  {progress === 100 ? (\n                    <Box mb={2}>\n                      <Grid container justify=\"space-between\">\n                        {failed ? (\n                          <Box\n                            className=\"text-xs\"\n                            css={{ color: \"var(--fresh-error)\" }}\n                            fontWeight={600}\n                          >\n                            Validation fail\n                          </Box>\n                        ) : (\n                          <Box\n                            className=\"text-base\"\n                            css={{ color: \"var(--primary)\" }}\n                            fontWeight={700}\n                          >\n                            Review &amp; Submit ( {rows.length} Records )\n                          </Box>\n                        )}\n                        <Box\n                          className=\"cursor-pointer text-xs\"\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          fontWeight={600}\n                          onClick={uploadNewExcel}\n                        >\n                          <Box mr={1}>Upload new excel</Box>{\" \"}\n                          <img\n                            src={fa_cloud_upload}\n                            alt=\"cloud-upload\"\n                            width={15}\n                          />{\" \"}\n                        </Box>\n                      </Grid>\n                    </Box>\n                  ) : (\n                    \"\"\n                  )}\n                  {progress === 100 && !failed ? (\n                    <>\n                      <Box mb={5}>\n                        <TableContainer component={Paper}>\n                          <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                              <TableRow>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"name\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"surname\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"date_of_birth\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"gender\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"nationality\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"card_number\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"quarantine_start\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"quarantine_end\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"place\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"contract_hospital\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"contract_agency\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"phone_number\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"email\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"departure_port\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"destination_port\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"imei_1\"}\n                                </TableCell>\n                                <TableCell css={{ color: \"var(--hard-gray)\" }}>\n                                  {\"imei_2\"}\n                                </TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {rows.map((row, i) => (\n                                <TableRow key={i}>\n                                  <TableCell>{row.name}</TableCell>\n                                  <TableCell>{row.surname}</TableCell>\n                                  <TableCell>{row.date_of_birth}</TableCell>\n                                  <TableCell>{row.gender}</TableCell>\n                                  <TableCell>{row.nationality}</TableCell>\n                                  <TableCell>{row.card_number}</TableCell>\n                                  <TableCell>{row.quarantine_start}</TableCell>\n                                  <TableCell>{row.quarantine_end}</TableCell>\n                                  <TableCell>{row.place}</TableCell>\n                                  <TableCell>{row.contract_hospital}</TableCell>\n                                  <TableCell>{row.contract_agency}</TableCell>\n                                  <TableCell>{row.phone_number}</TableCell>\n                                  <TableCell>{row.email}</TableCell>\n                                  <TableCell>{row.departure_port}</TableCell>\n                                  <TableCell>{row.destination_port}</TableCell>\n                                  <TableCell>{row.imei_1}</TableCell>\n                                  <TableCell>{row.imei_2}</TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                      </Box>\n                      <Box>\n                        <Divider />\n                        <Box mt={4}>\n                          <Grid container alignItems=\"center\" justify=\"center\">\n                            <Grid item xs={2} css={{ color: \"#919299\" }}>\n                              Import to branch\n                            </Grid>\n                            <Grid item xs={2}>\n                              <FormControl\n                                variant=\"outlined\"\n                                style={{ width: \"100%\" }}\n                                disabled={(result_branches || []).length === 0}\n                                required={true}\n                                size=\"small\"\n                                margin=\"dense\"\n                              >\n                                <InputLabel id=\"demo-simple-select-outlined-label\">\n                                  Select branch\n                                </InputLabel>\n                                <Select\n                                  disabled={\n                                    (result_branches || []).length === 0\n                                  }\n                                  labelId=\"demo-simple-select-outlined-label\"\n                                  label=\"Select branch\"\n                                  name=\"branch\"\n                                  value={branchId}\n                                  onChange={(e: any) => {\n                                    setBranchId(e.target.value);\n                                  }}\n                                  fullWidth\n                                  required={true}\n                                >\n                                  {result_branches?.map((v: any) => {\n                                    return (\n                                      <MenuItem value={v.id}>\n                                        {v.name_en}\n                                      </MenuItem>\n                                    );\n                                  })}\n                                </Select>\n                              </FormControl>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                        <Box mt={4}>\n                          <Grid container alignItems=\"center\" justify=\"center\">\n                            <Box\n                              className=\"text-sm cursor-pointer select-none\"\n                              fontWeight={600}\n                              mr={3}\n                              display=\"flex\"\n                              alignItems=\"center\"\n                              onClick={() => {\n                                set_informationIsValid(!informationIsValid);\n                              }}\n                            >\n                              <Checkbox checked={informationIsValid} />\n                              <Box ml={1}>All of information is correct</Box>\n                            </Box>\n                            <Button\n                              css={{\n                                backgroundColor: \"#279825\",\n                                color: \"#fff\",\n                                textTransform: \"none\",\n                              }}\n                              disabled={\n                                !informationIsValid || loading_user_import\n                              }\n                              size=\"large\"\n                              variant=\"contained\"\n                              onClick={handleSubmit}\n                            >\n                              <Box\n                                className=\"w-56\"\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                              >\n                                {loading_user_import && (\n                                  <Box mr={2}>\n                                    <CircularProgress\n                                      size=\"1rem\"\n                                      color=\"inherit\"\n                                    />\n                                  </Box>\n                                )}{\" \"}\n                                Create {rows.length} Users\n                              </Box>\n                            </Button>\n                          </Grid>\n                        </Box>\n                      </Box>\n                    </>\n                  ) : (\n                    <Dropzone disabled={uploadState} onDrop={handleDropZone}>\n                      {({ getRootProps, getInputProps }) => {\n                        return (\n                          <section>\n                            <div {...getRootProps()}>\n                              <input\n                                {...getInputProps()}\n                                accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                                multiple={false}\n                              />\n                              <div\n                                onDragOver={handleDragOver}\n                                onDragLeave={handleDragLeave}\n                                onDrop={handleDrop}\n                                className=\"select-none cursor-pointer\"\n                              >\n                                <Grid\n                                  container\n                                  direction=\"column\"\n                                  className={`${\n                                    progress === 100 && failed\n                                      ? \"px-8 py-6\"\n                                      : \"h-56\"\n                                  } rounded-md`}\n                                  justify={\n                                    progress === 100 && failed\n                                      ? \"flex-start\"\n                                      : \"center\"\n                                  }\n                                  alignItems={\n                                    progress === 100 && failed\n                                      ? \"flex-start\"\n                                      : \"center\"\n                                  }\n                                  style={{\n                                    color: `${\n                                      progress === 100 && failed\n                                        ? \"black\"\n                                        : dragOverState\n                                        ? \"var(--sub-primary)\"\n                                        : \"var(--primary)\"\n                                    }`,\n                                    backgroundColor: `${\n                                      progress === 100 && failed\n                                        ? \"#FAEEED\"\n                                        : dragOverState\n                                        ? \"var(--primary)\"\n                                        : \"var(--sub-primary)\"\n                                    }`,\n                                  }}\n                                >\n                                  {uploadState ? (\n                                    failed ? (\n                                      <Box className=\"text-xs\">\n                                        {fails.map((ex) => {\n                                          return <Box mb={1}>{ex}</Box>;\n                                        })}\n                                      </Box>\n                                    ) : (\n                                      <Box\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                        alignItems=\"center\"\n                                        className=\"w-full\"\n                                        px={20}\n                                      >\n                                        <Box\n                                          className=\"text-xs font-bold\"\n                                          mb={2}\n                                        >\n                                          {progress >= 75\n                                            ? \"Validating\"\n                                            : `Uploading ${progress}%`}\n                                        </Box>\n                                        <BorderLinearProgress\n                                          variant=\"determinate\"\n                                          value={progress}\n                                          className=\"w-full\"\n                                        />\n                                      </Box>\n                                    )\n                                  ) : (\n                                    <>\n                                      <Box mb={2}>\n                                        <img\n                                          draggable={false}\n                                          src={\n                                            dragOverState\n                                              ? fa_upload_white\n                                              : fa_upload\n                                          }\n                                          alt=\"upload\"\n                                        />\n                                      </Box>\n                                      <Box className=\"text-xs font-bold\">\n                                        {dragOverState\n                                          ? \"Release to upload\"\n                                          : \"Upload your excel\"}\n                                      </Box>\n                                    </>\n                                  )}\n                                </Grid>\n                              </div>\n                            </div>\n                          </section>\n                        );\n                      }}\n                    </Dropzone>\n                  )}\n                </Grid>\n              </Container>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n});\nexport const UserImportMobile = UserImport;\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserPreview.tsx",["508","509","510","511","512","513","514","515","516"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Badge,\n  Box,\n  Button,\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  ReadUserFilter,\n  useReadUser,\n} from \"../../services/api/user/useReadUser\";\nimport LuxonUtils from \"@date-io/luxon\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { EditField, UserInfoCard, UserProfile } from \"./UserInfoCard\";\nimport { DeviceHistoryDatagrid } from \"./DeviceHistoryDatagrid\";\nimport { DateFilter } from \"../../components/DateFilter\";\n\nimport { BodyTempGraph } from \"./BodyTempGraph\";\nimport { HeartRateGraph } from \"./HeartRateGraph\";\nimport { BloodPressureGraph } from \"./BloodPressureGrph\";\nimport { Map } from \"../../components/Map\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MuiAccordion from \"@material-ui/core/Accordion\";\nimport WatchIcon from \"@material-ui/icons/Watch\";\nimport { dateStr, dateStrAPI } from \"../../utils\";\n\nimport {\n  BatteryHistoryReport,\n  HeartRateHistoryReport,\n  BloodPressureHistoryReport,\n  WearingHistoryReport,\n  TempHistoryReport,\n} from \"../../types/personalReport\";\n\nexport type UserPreviewData = {\n  loading: boolean;\n  result_temp_history: TempHistoryReport | null;\n  result_heart_rate_history: HeartRateHistoryReport | null;\n  result_blood_pressure_history: BloodPressureHistoryReport | null;\n  result_battery_history: BatteryHistoryReport | null;\n  result_wearing_history: WearingHistoryReport | null;\n};\n\nconst DeviceField = observer((props: any) => {\n  return (\n    <Box\n      borderRight={props.border ? props.border : 0}\n      css={{ borderColor: \"rgba(0, 0, 0, 0.2)\" }}\n    >\n      <Box css={{ color: \"#8F919C\" }} fontSize={12} mb={0.5}>\n        {props.label}\n      </Box>\n      <Box fontSize={18}>{props.children}</Box>\n    </Box>\n  );\n});\n\nfunction badgeStyles() {\n  return {\n    badgeActive: {\n      backgroundColor: \"#10940E\",\n    },\n  };\n}\n\nexport const UserPreview = observer(() => {\n  const { userId }: any = useParams();\n\n  const {\n    result_userRead,\n    result_userRead_raw,\n    fire_userRead,\n    loading_userRead,\n    ...rest\n  } = useReadUser(userId, webStore.readUserFilter);\n\n  useEffect(() => {\n    return () => {\n      webStore.resetFilter();\n    };\n  }, []);\n  const parseData: UserPreviewData = {\n    loading: loading_userRead,\n    ...rest,\n  };\n  const [expanded, setExpanded] = React.useState<string | false>(\"panel0\");\n\n  const handleChange = (panel: string) => (\n    event: React.ChangeEvent<{}>,\n    newExpanded: boolean\n  ) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n  const Accordion = withStyles({\n    root: {\n      borderBottom: \"1px solid rgba(0, 0, 0, .1)\",\n      boxShadow: \"none\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"&$expanded\": {\n        margin: \"auto\",\n      },\n    },\n    expanded: {},\n  })(MuiAccordion);\n\n  console.log(\"parseData\", result_userRead, result_userRead_raw);\n  const classes = makeStyles(badgeStyles)();\n  const [startDate, setStartDate] = useState<Date | null>(\n    webStore.startDate || new Date()\n  );\n  const [endDate, setEndDate] = useState<Date | null>(\n    webStore.endDate || new Date()\n  );\n  const [filterHour, setFilterHour] = useState<number | null>(\n    webStore.filter_hour\n  );\n\n  const onSearch = () => {\n    webStore.setStartDate(startDate);\n    webStore.setEndDate(endDate);\n    webStore.set_filter_hour(filterHour);\n  };\n\n  const [isAddDevice, setIsAddDevice] = useState(false);\n  const [newIMEI, setNewIMEI] = useState(\"\");\n\n  return (\n    <Container maxWidth=\"xl\" style={{ maxWidth: 1500 }} className=\"py-4 pb-16\">\n      <SubBar title={\"User Detail\"} reload={false} back={true} />\n      {result_userRead_raw?.user.isSos && (\n        <Box mt={2} mb={1}>\n          <Box\n            css={{ borderRadius: 5, backgroundColor: \"#BC4538\", color: \"#fff\" }}\n          >\n            <Box\n              p={2}\n              display={{ xs: \"block\", md: \"flex\" }}\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              textAlign=\"center\"\n            >\n              <Box\n                display={{ xs: \"block\", md: \"flex\" }}\n                alignItems=\"center\"\n                mb={{ xs: 2, md: 0 }}\n              >\n                <ReportProblemIcon />\n                <Box mx={2} fontWeight={600}>\n                  This person trigger sos\n                </Box>\n                <Box>15:30 22/Nov/2020 </Box>\n              </Box>\n              <Button\n                style={{ width: \"fit-content\" }}\n                onClick={() => {}}\n                color=\"inherit\"\n                startIcon={<CheckIcon />}\n              >\n                Mark resolve\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      )}\n      <Box>\n        <Box\n          css={{ borderRadius: 5, backgroundColor: \"#2B5698\", color: \"#fff\" }}\n        >\n          <Box display={{ xs: \"block\", md: \"flex\" }}>\n            <Box\n              p={4}\n              width={{ xs: \"100%\", md: \"40%\" }}\n              css={{ borderRight: \"1px solid rgba(255,255,255,0.5)\" }}\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n            >\n              {result_userRead && (\n                <UserProfile reload={fire_userRead} user={result_userRead} />\n              )}\n            </Box>\n            <Box py={4} px={6} width={{ xs: \"100%\", md: \"60%\" }}>\n              {result_userRead && (\n                <UserInfoCard\n                  reload={fire_userRead}\n                  user={result_userRead}\n                  userRaw={result_userRead_raw}\n                />\n              )}\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n\n      <Box className=\"flex justify-between items-center\" mt={8} pb={2}>\n        <Box fontSize=\"h5.fontSize\" fontWeight={500}>\n          Devices\n        </Box>\n        <Button\n          startIcon={<AddIcon />}\n          color=\"primary\"\n          size=\"small\"\n          variant=\"text\"\n          onClick={() => {\n            setIsAddDevice(true);\n          }}\n        >\n          CONNECT NEW DEVICES\n        </Button>\n      </Box>\n      <EditField\n        label=\"Connect new IMEI\"\n        field=\"imei\"\n        buttonName=\"CONNECT\"\n        isEdit={isAddDevice}\n        setIsEdit={setIsAddDevice}\n        value={newIMEI}\n        setValue={setNewIMEI}\n        onClick={async () => {\n          // todo\n          console.log(\"CONNECT NEW DEVICES\");\n        }}\n      />\n      <Box>\n        {(result_userRead_raw?.devices || []).map((deivce, key) => {\n          return (\n            <Accordion\n              square\n              expanded={expanded === `panel${key}`}\n              onChange={handleChange(`panel${key}`)}\n            >\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Box\n                  display={{ xs: \"block\", md: \"flex\" }}\n                  alignItems=\"center\"\n                  px={{ xs: 0, md: 3 }}\n                  py={2}\n                  css={{\n                    color: deivce.device_status === 1 ? \"#10940E\" : \"#B12143\",\n                  }}\n                >\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <WatchIcon />\n                    <Box ml={2} mr={4} fontSize=\"h5.fontsize\" fontWeight={600}>\n                      {`Device ${key + 1 < 10 ? `0${key + 1}` : key + 1} - ${\n                        deivce.model\n                      }`}\n                    </Box>\n                  </Box>\n                  <Box\n                    fontSize={12}\n                    css={{ color: \"#4B4C56\" }}\n                    mt={{ xs: 2, md: 0 }}\n                  >\n                    Latest update : {dateStrAPI(deivce.updated_at)}\n                  </Box>\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Box px={{ xs: 0, md: 3 }} width=\"100%\">\n                  <Grid item xs={12}>\n                    <Grid item xs={12} md={4}>\n                      <Box\n                        display=\"flex\"\n                        width=\"100%\"\n                        paddingRight={{ md: 5 }}\n                        mb={{ xs: 4, md: 0 }}\n                      >\n                        <Grid item xs={7}>\n                          <DeviceField label=\"IMEI\">{deivce.imei}</DeviceField>\n                        </Grid>\n                        <Grid item xs={5}>\n                          <DeviceField\n                            label=\"Device status\"\n                            border={{ xs: 0, md: 1 }}\n                          >\n                            {deivce.device_status === 1 ? (\n                              <Box display=\"flex\" alignItems=\"center\">\n                                <Box\n                                  mr={1}\n                                  css={{ color: \"#10940E\" }}\n                                  fontWeight={600}\n                                >\n                                  Active\n                                </Box>\n                                <Badge\n                                  variant=\"dot\"\n                                  classes={{ badge: classes.badgeActive }}\n                                  css={{ backgroundColor: \"#10940E\" }}\n                                ></Badge>\n                              </Box>\n                            ) : (\n                              <Box css={{ color: \"#B12143\" }} fontWeight={600}>\n                                Inactive\n                              </Box>\n                            )}\n                          </DeviceField>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Box\n                        display=\"flex\"\n                        width=\"100%\"\n                        paddingRight={{ md: 5 }}\n                        mb={{ xs: 4, md: 0 }}\n                      >\n                        <Grid item xs={4}>\n                          <DeviceField label=\"Body temp\">\n                            <Box fontWeight={600}>{deivce.body_temp}</Box>\n                          </DeviceField>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <DeviceField label=\"Heart rate\">\n                            <Box fontWeight={600}>{deivce.heart_rate}</Box>\n                          </DeviceField>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <DeviceField\n                            label=\"Blood pressure\"\n                            border={{ xs: 0, md: 1 }}\n                          >\n                            <Box\n                              fontWeight={600}\n                            >{`${deivce.blood_systolic}/${deivce.blood_diastolic}`}</Box>\n                          </DeviceField>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={2}>\n                      <Box display=\"flex\" width=\"100%\" mb={{ xs: 4, md: 0 }}>\n                        <Grid item xs={6}>\n                          <DeviceField label=\"Latitude\">\n                            {deivce.latitude.toFixed(3)}\n                          </DeviceField>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <DeviceField\n                            label=\"Longtitude\"\n                            border={{ xs: 0, md: 1 }}\n                          >\n                            {deivce.longitude.toFixed(3)}\n                          </DeviceField>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={2}>\n                      <Box display=\"flex\" width=\"100%\" paddingLeft={{ md: 5 }}>\n                        <Grid item xs={6}>\n                          <DeviceField label=\"Battery\">\n                            {deivce.battery}\n                          </DeviceField>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <DeviceField label=\"Steps\">{deivce.step}</DeviceField>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </AccordionDetails>\n            </Accordion>\n          );\n        })}\n      </Box>\n      <Box\n        className=\"justify-between items-center\"\n        mt={8}\n        pb={2}\n        display={{ xs: \"block\", md: \"flex\" }}\n      >\n        <Box fontSize=\"h5.fontSize\" fontWeight={500} mb={{ xs: 2, md: 0 }}>\n          Health Log\n        </Box>\n        <Grid item md={4} xs={12}>\n          <Grid item xs={6} css={{ padding: \"0 5px\" }}>\n            <MuiPickersUtilsProvider utils={LuxonUtils}>\n              <KeyboardDatePicker\n                style={{\n                  margin: 0,\n                  width: \"100%\",\n                  backgroundColor: \"#fff\",\n                }}\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"from\"\n                inputVariant=\"outlined\"\n                label=\"Date Start\"\n                autoOk={true}\n                value={startDate}\n                onChange={(date: MaterialUiPickersDate) => {\n                  setStartDate(date ? new Date(date.toString()) : null);\n                  onSearch();\n                }}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n          <Grid item xs={6} css={{ padding: \"0 5px\" }} style={{marginTop:\"15px\"}}>\n            <MuiPickersUtilsProvider utils={LuxonUtils}>\n              <KeyboardDatePicker\n                style={{ margin: 0, width: \"100%\", backgroundColor: \"#fff\" }}\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"to\"\n                label=\"Date End\"\n                inputVariant=\"outlined\"\n                value={endDate}\n                autoOk={true}\n                onChange={(date: MaterialUiPickersDate) => {\n                  setEndDate(date ? new Date(date.toString()) : null);\n                  onSearch();\n                }}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </Box>\n      <Grid container>\n        <Grid item md={8} xs={12}>\n          <Box\n            paddingRight={{ xs: 0, md: 3 }}\n            css={{ backgroundColor: \"transparent\" }}\n          >\n            <Grid\n              item\n              xs={12}\n              style={{ height: 380, overflow: \"hidden\", marginBottom: 15 }}\n            >\n              <BodyTempGraph data={parseData} />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              style={{ height: 380, overflow: \"hidden\", marginBottom: 15 }}\n            >\n              <HeartRateGraph data={parseData} />\n            </Grid>\n            <Grid item xs={12} style={{ height: 380, overflow: \"hidden\" }}>\n              <BloodPressureGraph data={parseData} />\n            </Grid>\n          </Box>\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <StickyContainer\n            style={{\n              width: \"100%\",\n              flex: 1,\n              minHeight: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Sticky topOffset={-80}>\n              {({ style, isSticky }: any) => (\n                <div style={style}>\n                  <div\n                    style={{\n                      position: \"relative\",\n                      height: \"calc(100vh - 4rem)\",\n                      top: !isSticky ? 0 : \"4rem\",\n                    }}\n                  >\n                    <DeviceHistoryDatagrid data={parseData} />\n                  </div>\n                </div>\n              )}\n            </Sticky>\n          </StickyContainer>\n        </Grid>\n      </Grid>\n      <Box mt={2}>\n        <Box\n          style={{ height: 400, position: \"relative\" }}\n          css={{ borderRadius: 5, backgroundColor: \"#fff\" }}\n        >\n          {result_userRead_raw && (\n            <Map\n              locations={(result_userRead_raw.locations || [])\n                .filter(({ latitude, longitude }) => {\n                  return (\n                    latitude > 0 &&\n                    longitude > 0 &&\n                    Math.abs(latitude) <= 90 &&\n                    Math.abs(longitude) <= 180\n                  );\n                })\n                .map(({ latitude, longitude }, i) => {\n                  return {\n                    lat: latitude,\n                    lng: longitude,\n                    active: true,\n                    name: (i + 1).toString(),\n                    dot: true,\n                  };\n                })}\n            ></Map>\n          )}\n        </Box>\n      </Box>\n    </Container>\n  );\n});\nexport const UserPreviewMobile = UserPreview;\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/LoggingDashboard/LoggingDashboard.tsx",["517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542"],"import {\n  Box,\n  IconButton,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  Divider,\n  ListItemText,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport {\n  Accessibility,\n  ArrowBack,\n  Battery80,\n  Bluetooth,\n  Code,\n  BlurOn,\n  DirectionsWalk,\n  Favorite,\n  Fingerprint,\n  ShowChart,\n  Watch,\n} from \"@material-ui/icons\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect, useHistory, useParams } from \"react-router-dom\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { webStore } from \"../../stores/webStore\";\nimport { UserFromAPI } from \"../../types/user\";\nimport { UserInfoCard } from \"../UserManage/UserInfoCard\";\n\nconst DeviceLog = observer(({ userId }: { userId: string }) => {\n  const {\n    result_userRead,\n    result_userRead_raw,\n    fire_userRead,\n    loading_userRead,\n    ...rest\n  } = useReadUser(userId, webStore.readUserFilter, true);\n  const [logs, setLogs] = useState<{ timeStamp: Date; data: UserFromAPI }[]>(\n    []\n  );\n  useEffect(() => {\n    const loopLoad = async () => {\n      await new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(null);\n        }, 2 * 1000);\n      });\n\n      try {\n        const data = await fire_userRead();\n\n        setLogs([{ timeStamp: new Date(), data: data?.data.data }, ...logs]);\n      } catch {}\n    };\n    loopLoad();\n    return () => {};\n  }, [userId, logs.length]);\n\n  return (\n    <Box\n      p={2}\n      className=\"flex-1 w-full\"\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        left: 0,\n        top: 0,\n        overflowX: \"hidden\",\n        overflowY: \"auto\",\n        position: \"absolute\",\n        background: \"#222229\",\n      }}\n    >\n      <Box mb={4}>\n        <Typography style={{ color: \"white\" }} variant=\"h6\">\n          Log\n        </Typography>\n      </Box>\n      <div>\n        {logs.map(({ timeStamp, data: { devices } }) => {\n          return (\n            <div\n              style={{ color: \"white\" }}\n              key={timeStamp.getDate()}\n              className=\"md:flex items-start mb-6\"\n            >\n              <div\n                className=\"mr-4\"\n                style={{\n                  whiteSpace: \"nowrap\",\n                  color: devices?.[0].device_status ? \"#5fe45f\" : \"#ff665e\",\n                }}\n              >\n                {DateTime.fromJSDate(timeStamp).toLocaleString(\n                  DateTime.DATETIME_MED_WITH_SECONDS\n                )}\n              </div>\n              <div className=\"flex-1\" style={{ wordBreak: \"break-all\" }}>\n                heart_rate:{devices?.[0].heart_rate?.toString()}\n                {\" , \"}\n                heart_rate:{devices?.[0].heart_rate?.toString()}\n                {\" , \"}\n                battery:{devices?.[0].battery?.toString()}\n                {\" , \"}\n                step:{devices?.[0].step?.toString()}\n                {\" , \"}\n                body_temp:{devices?.[0].body_temp?.toString()}\n                {\" , \"}\n                wristband_temp:{devices?.[0].wristband_temp?.toString()}\n                {\" , \"}\n                lng:{devices?.[0].latitude?.toString()}\n                {\" , \"}\n                lat:{devices?.[0].longitude?.toString()}\n                {\" , \"}\n                device_status:{devices?.[0].device_status?.toString()}\n                {\" , \"}\n                blood_pressure:{devices?.[0].blood_systolic?.toString()}/\n                {devices?.[0].blood_diastolic?.toString()}\n                {\" , \"}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Box>\n  );\n});\n\nexport const UserInfoCardWrapper = observer(\n  ({ userId }: { userId: string }) => {\n    const {\n      result_userRead,\n      result_userRead_raw,\n      fire_userRead,\n      loading_userRead,\n      ...rest\n    } = useReadUser(userId, webStore.readUserFilter);\n\n    return (\n      <>\n        {result_userRead && (\n          <UserInfoCard reload={fire_userRead} user={result_userRead} />\n        )}\n      </>\n    );\n  }\n);\n\nexport const LoggingDashboard = observer(() => {\n  const filter = {\n    startDate: webStore.startDate,\n    endDate: webStore.endDate,\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: webStore.filter_Keyword,\n    page: 1,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList } = useListUser(filter);\n  const [activeUserId, setActiveUserId] = useState<string | null>(null);\n  useEffect(() => {\n    if (!loading_userList && result_userList[0] && result_userList[0].user) {\n      setActiveUserId(result_userList[0].user.id);\n    }\n  }, [loading_userList]);\n  if (loading_userList) {\n    return <></>;\n  }\n\n  return (\n    <div\n      className=\"flex relative\"\n      style={{\n        position: \"absolute\",\n        top: \"4rem\",\n        width: \"100%\",\n        bottom: \"0%\",\n      }}\n    >\n      <Box\n        p={2}\n        className=\"overflow-x-hidden overflow-y-auto\"\n        style={{\n          background: \"white\",\n          width: 350,\n          height: \"100%\",\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n        }}\n      >\n        <Select\n          labelId=\"user-selection\"\n          id=\"user-selection\"\n          fullWidth={true}\n          value={activeUserId}\n          onChange={(e) => {\n            setActiveUserId(e.target.value as string);\n          }}\n        >\n          {result_userList.map(\n            ({ user: { id, name, surname, nationality } }) => {\n              return (\n                <MenuItem value={id}>\n                  {name} {surname} {nationality}\n                </MenuItem>\n              );\n            }\n          )}\n        </Select>\n\n        {activeUserId && (\n          <div key={activeUserId}>\n            <UserInfoCardWrapper userId={activeUserId} />\n          </div>\n        )}\n      </Box>\n      {activeUserId && (\n        <div\n          style={{\n            background: \"white\",\n            left: 350,\n            height: \"100%\",\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n          }}\n          key={activeUserId}\n        >\n          <DeviceLog userId={activeUserId} />\n        </div>\n      )}\n    </div>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Notification/Notification.tsx",["543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563"],"import React, { useEffect } from \"react\";\n\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Tabs,\n  Tab,\n  makeStyles,\n  Divider,\n  AppBar,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { Theme } from \"@emotion/react\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\nimport { useListNotifications } from \"../../services/api/notification/useListNotifications\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const Notification = observer((props: any) => {\n  useEffect(() => {\n    return () => {\n      webStore.resetFilter();\n    };\n  }, []);\n\n  const mobile = webStore.device === \"mobile\";\n  const { result: data, loading, error } = useListNotifications();\n  const [value, setValue]: any = React.useState(\"0\");\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const datasource =\n    value === \"0\"\n      ? data &&\n        data.filter((d: any, i: any) => {\n          // let currentDate = new Date().setHours(0, 0, 0, 0)\n          // let sevenPrevDate = new Date(currentDate).setDate(new Date(currentDate).getDate() - 7)\n          // return new Date(d.datetime).setHours(0, 0, 0, 0) >= sevenPrevDate\n          return !d.read;\n        })\n      : data;\n\n  if (props.popup && props.setNotiCount) {\n    props.setNotiCount(datasource && datasource.length ? datasource.length : 0);\n  }\n\n  return props.popup ? (\n    <NotificationPopup datasource={datasource} loading={loading} />\n  ) : mobile ? (\n    <NotificationMobile\n      value={value}\n      handleChange={handleChange}\n      datasource={datasource}\n      loading={loading}\n    />\n  ) : (\n    <NotificationDesktop\n      value={value}\n      handleChange={handleChange}\n      datasource={datasource}\n      loading={loading}\n    />\n  );\n});\n\nexport const NotificationPopup = observer((props: any) => {\n  const history = useHistory();\n  return (\n    <div css={{ width: \"30vw\", maxHeight: \"50vh\", overflow: \"scroll\" }}>\n      <Paper>\n        {props.loading ? (\n          <Box p={8} display=\"flex\" justifyContent=\"center\">\n            <CircularProgress css={{ color: \"var(--primary)\" }} />\n          </Box>\n        ) : (\n          <>\n            {props.datasource && props.datasource.length > 0 ? (\n              <Box p={2.5}>\n                {props.datasource.map((d: any, i: any) => {\n                  let showDate = false;\n                  let thisNoti = new Date(d.datetime).setHours(0, 0, 0, 0);\n                  let currentDate = new Date().setHours(0, 0, 0, 0);\n                  if (i != 0) {\n                    let prevNoti = new Date(\n                      props.datasource[i - 1].datetime\n                    ).setHours(0, 0, 0, 0);\n                    if (thisNoti != currentDate) {\n                      if (thisNoti === prevNoti) {\n                        showDate = false;\n                      } else {\n                        showDate = true;\n                      }\n                    }\n                  } else {\n                    if (thisNoti != currentDate) {\n                      showDate = true;\n                    }\n                  }\n                  return (\n                    <NotificationCard\n                      {...d}\n                      key={i}\n                      index={i}\n                      showDate={showDate}\n                      popup={true}\n                    />\n                  );\n                })}\n              </Box>\n            ) : (\n              <Box fontSize={14} fontWeight={600} p={4}>\n                There are no new Notifications\n              </Box>\n            )}\n          </>\n        )}\n      </Paper>\n    </div>\n  );\n});\n\nexport const NotificationDesktop = observer((props: any) => {\n  const useStyles = makeStyles((theme: Theme) => ({\n    tab: {\n      textTransform: \"none\",\n      minWidth: \"0\",\n      marginRight: \"10px\",\n      marginLeft: \"20px\",\n      \"&:focus\": {\n        outline: \"none\",\n      },\n    },\n    activeTab: {\n      color: \"var(--primary)\",\n      fontWeight: \"bold\",\n    },\n    indicator: {\n      backgroundColor: \"var(--primary)\",\n      paddingTop: \"4px\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"xl\" className=\"py-4\">\n      <Grid container spacing={3}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={6}>\n          <Box mb={2}>\n            <SubBar back={false} reload={false} title={\"Notification\"} />\n          </Box>\n          <Tabs\n            value={props.value}\n            onChange={props.handleChange}\n            classes={{\n              indicator: classes.indicator,\n            }}\n          >\n            <Tab\n              className={`${classes.tab} ${\n                props.value === \"0\" ? classes.activeTab : \"\"\n              }`}\n              value=\"0\"\n              label={<span>New</span>}\n            />\n            <Tab\n              className={`${classes.tab} ${\n                props.value === \"1\" ? classes.activeTab : \"\"\n              }`}\n              value=\"1\"\n              label={<span>All</span>}\n            />\n          </Tabs>\n          <Paper>\n            {props.loading ? (\n              <Box p={8} display=\"flex\" justifyContent=\"center\">\n                <CircularProgress css={{ color: \"var(--primary)\" }} />\n              </Box>\n            ) : props.datasource && props.datasource.length > 0 ? (\n              <Box p={4}>\n                {props.datasource.map((d: any, i: any) => {\n                  let showDate = false;\n                  let thisNoti = new Date(d.datetime).setHours(0, 0, 0, 0);\n                  let currentDate = new Date().setHours(0, 0, 0, 0);\n                  if (i != 0) {\n                    let prevNoti = new Date(\n                      props.datasource[i - 1].datetime\n                    ).setHours(0, 0, 0, 0);\n                    if (thisNoti != currentDate) {\n                      if (thisNoti === prevNoti) {\n                        showDate = false;\n                      } else {\n                        showDate = true;\n                      }\n                    }\n                  } else {\n                    if (thisNoti != currentDate) {\n                      showDate = true;\n                    }\n                  }\n                  return (\n                    <NotificationCard\n                      {...d}\n                      key={i}\n                      index={i}\n                      showDate={showDate}\n                      mobile={false}\n                    />\n                  );\n                })}\n              </Box>\n            ) : (\n              <Box fontSize={14} fontWeight={600} p={4}>\n                There are no {props.value === \"0\" ? \" new \" : \"\"} Notifications\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n});\n\nexport const NotificationMobile = observer((props: any) => {\n  const useStyles = makeStyles((theme: Theme) => ({\n    tab: {\n      textTransform: \"none\",\n      minWidth: \"0\",\n      marginRight: \"10px\",\n      marginLeft: \"20px\",\n      \"&:focus\": {\n        outline: \"none\",\n      },\n    },\n    activeTab: {\n      color: \"var(--primary)\",\n      fontWeight: \"bold\",\n    },\n    indicator: {\n      backgroundColor: \"var(--primary)\",\n      paddingTop: \"4px\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Box mb={2} ml={2}>\n          <SubBar back={false} reload={false} title={\"Notification\"} />\n        </Box>\n        <Tabs\n          value={props.value}\n          onChange={props.handleChange}\n          classes={{\n            indicator: classes.indicator,\n          }}\n        >\n          <Tab\n            className={`${classes.tab} ${\n              props.value === \"0\" ? classes.activeTab : \"\"\n            }`}\n            value=\"0\"\n            label={<span>New</span>}\n          />\n          <Tab\n            className={`${classes.tab} ${\n              props.value === \"1\" ? classes.activeTab : \"\"\n            }`}\n            value=\"1\"\n            label={<span>All</span>}\n          />\n        </Tabs>\n        <Paper>\n          {props.loading ? (\n            <Box p={8} display=\"flex\" justifyContent=\"center\">\n              <CircularProgress css={{ color: \"var(--primary)\" }} />\n            </Box>\n          ) : props.datasource && props.datasource.length > 0 ? (\n            <Box p={3}>\n              {props.datasource.map((d: any, i: any) => {\n                let showDate = false;\n                let thisNoti = new Date(d.datetime).setHours(0, 0, 0, 0);\n                let currentDate = new Date().setHours(0, 0, 0, 0);\n                if (i != 0) {\n                  let prevNoti = new Date(\n                    props.datasource[i - 1].datetime\n                  ).setHours(0, 0, 0, 0);\n                  if (thisNoti != currentDate) {\n                    if (thisNoti === prevNoti) {\n                      showDate = false;\n                    } else {\n                      showDate = true;\n                    }\n                  }\n                } else {\n                  if (thisNoti != currentDate) {\n                    showDate = true;\n                  }\n                }\n                return (\n                  <NotificationCard\n                    {...d}\n                    key={i}\n                    index={i}\n                    showDate={showDate}\n                    mobile={true}\n                  />\n                );\n              })}\n            </Box>\n          ) : (\n            <Box fontSize={14} fontWeight={600} p={4}>\n              There are no {props.value === \"0\" ? \" new \" : \"\"} Notifications\n            </Box>\n          )}\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n});\n\nexport const NotificationCard = observer((props: any) => {\n  const formatDate = (d: Date) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    let formattedDate =\n      \"\" +\n      (d.getDate() + \" \" + monthNames[d.getMonth()] + \" \" + d.getFullYear());\n    return formattedDate;\n  };\n\n  const formatTime = (d: Date) => {\n    let formattedTime =\n      \"\" +\n      (d.getHours() > 9 ? d.getHours() : \"0\" + d.getHours()) +\n      \":\" +\n      (d.getMinutes() > 9 ? d.getMinutes() : \"0\" + d.getMinutes());\n    return formattedTime;\n  };\n\n  return props.popup ? (\n    <NotificationCardPopup\n      formatDate={formatDate}\n      formatTime={formatTime}\n      {...props}\n    />\n  ) : props.mobile ? (\n    <NotificationCardMobile\n      formatDate={formatDate}\n      formatTime={formatTime}\n      {...props}\n    />\n  ) : (\n    <NotificationCardDesktop\n      formatDate={formatDate}\n      formatTime={formatTime}\n      {...props}\n    />\n  );\n});\n\nexport const NotificationCardPopup = observer((props: any) => {\n  return (\n    <Grid item xs={12}>\n      {props.index != 0 ? (\n        <Box my={2}>\n          <Divider />\n        </Box>\n      ) : (\n        \"\"\n      )}\n      {props.showDate ? (\n        <Box mt={props.index != 0 ? 4 : 0} mb={3} fontWeight=\"600\">\n          {props.formatDate(props.datetime)}\n        </Box>\n      ) : (\n        \"\"\n      )}\n      <Grid item xs={12}>\n        <Grid justify=\"space-between\" wrap=\"nowrap\" container>\n          <Grid container wrap=\"nowrap\">\n            {props.type === \"ERROR\" ? (\n              <WarningIcon fontSize={\"small\"} css={{ color: \"var(--error)\" }} />\n            ) : (\n              <ErrorIcon fontSize={\"small\"} css={{ color: \"var(--primary)\" }} />\n            )}\n            <Box ml={2}>\n              <Box fontWeight=\"600\" fontSize={14}>\n                {props.title}\n              </Box>\n              <Box fontSize={14}>{props.content}</Box>\n            </Box>\n          </Grid>\n          <Box fontWeight=\"600\" fontSize={14}>\n            {props.formatTime(props.datetime)}\n          </Box>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n});\n\nexport const NotificationCardDesktop = observer((props: any) => {\n  return (\n    <Grid item xs={12}>\n      {props.showDate ? (\n        <Box\n          mt={props.index != 0 ? 6 : 0}\n          mb={5}\n          fontWeight=\"600\"\n          css={{ color: \"var(--gray)\" }}\n        >\n          {props.formatDate(props.datetime)}\n        </Box>\n      ) : (\n        \"\"\n      )}\n      {props.index != 0 && !props.showDate ? (\n        <Box my={2}>\n          <Divider />\n        </Box>\n      ) : (\n        \"\"\n      )}\n      <Grid item xs={12}>\n        <Grid justify=\"space-between\" wrap=\"nowrap\" container>\n          <Grid container wrap=\"nowrap\">\n            {props.type === \"ERROR\" ? (\n              <WarningIcon fontSize={\"small\"} css={{ color: \"var(--error)\" }} />\n            ) : (\n              <ErrorIcon fontSize={\"small\"} css={{ color: \"var(--primary)\" }} />\n            )}\n            <Box ml={2}>\n              <Box fontWeight=\"600\" fontSize={14}>\n                {props.title}\n              </Box>\n              <Box fontSize={14}>{props.content}</Box>\n            </Box>\n          </Grid>\n          <Box fontWeight=\"600\" fontSize={14}>\n            {props.formatTime(props.datetime)}\n          </Box>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n});\n\nexport const NotificationCardMobile = observer((props: any) => {\n  return (\n    <Grid item xs={12}>\n      {props.showDate ? (\n        <Box mt={props.index != 0 ? 6 : 0} mb={5} fontWeight=\"600\">\n          {props.formatDate(props.datetime)}\n        </Box>\n      ) : (\n        \"\"\n      )}\n      {props.index != 0 && !props.showDate ? (\n        <Box my={2}>\n          <Divider />\n        </Box>\n      ) : (\n        \"\"\n      )}\n      <Grid item xs={12}>\n        <Grid justify=\"space-between\" wrap=\"nowrap\" container>\n          <Grid container wrap=\"nowrap\">\n            {props.type === \"ERROR\" ? (\n              <WarningIcon fontSize={\"small\"} css={{ color: \"var(--error)\" }} />\n            ) : (\n              <ErrorIcon fontSize={\"small\"} css={{ color: \"var(--primary)\" }} />\n            )}\n            <Box ml={2}>\n              <Box fontWeight=\"600\" fontSize={14}>\n                {props.title}\n              </Box>\n              <Box fontSize={14}>{props.content}</Box>\n              <Box fontWeight=\"600\" fontSize={14} mt={1}>\n                {props.formatTime(props.datetime)}\n              </Box>\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/PushData.tsx",["564","565"],"import React, { useEffect } from \"react\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useListPushData } from \"../../services/api/setting/useListPushData\";\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Container,\n  Divider,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport edit from \"../../components/assets/edit.svg\";\nimport remove from \"../../components/assets/remove.svg\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const PushData = observer((props: any) => {\n  const mobile = webStore.device === \"mobile\";\n  const history = useHistory();\n\n  const { result: datasource, loading, error } = useListPushData();\n\n  return mobile ? (\n    <PushDataMobile\n      datasource={datasource}\n      loading={loading}\n      history={history}\n    />\n  ) : (\n    <PushDataDesktop\n      datasource={datasource}\n      loading={loading}\n      history={history}\n    />\n  );\n});\n\nexport const PushDataDesktop = observer((props: any) => {\n  return (\n    <Container maxWidth=\"xl\" className=\"py-4\">\n      <Grid container spacing={3}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={6}>\n          <Box mb={2}>\n            <SubBar back={true} reload={false} title={\"Push Data\"} />\n          </Box>\n          <Box mb={2}>\n            <Button\n              startIcon={<AddIcon css={{ color: \"var(--primary)\" }} />}\n              onClick={() => {\n                props.history.push(\"/setting/pushdata/create\");\n              }}\n            >\n              <Box fontWeight=\"600\" css={{ color: \"var(--primary)\" }}>\n                ADD PUSH DATA\n              </Box>\n            </Button>\n          </Box>\n          <Grid item xs={12} justify=\"center\">\n            {props.loading ? (\n              <CircularProgress css={{ color: \"var(--primary)\" }} />\n            ) : props.datasource && props.datasource.length > 0 ? (\n              props.datasource &&\n              props.datasource.map((d: any, i: any) => {\n                return (\n                  <Grid item xs={12} key={i}>\n                    <PushDataCard {...d} />\n                  </Grid>\n                );\n              })\n            ) : (\n              <Box fontSize={14} fontWeight={600} p={4}>\n                There are no push data\n              </Box>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n});\n\nexport const PushDataMobile = observer((props: any) => {\n  return (\n    <Container maxWidth=\"xl\" className=\"py-4\">\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Box mb={2}>\n            <SubBar back={true} reload={false} title={\"Push Data\"} />\n          </Box>\n          <Box mb={2}>\n            <Button\n              startIcon={<AddIcon css={{ color: \"var(--primary)\" }} />}\n              onClick={() => {\n                props.history.push(\"/setting/pushdata/create\");\n              }}\n            >\n              <Box fontWeight=\"600\" css={{ color: \"var(--primary)\" }}>\n                ADD PUSH DATA\n              </Box>\n            </Button>\n          </Box>\n          <Grid item xs={12} justify=\"center\">\n            {props.loading ? (\n              <CircularProgress css={{ color: \"var(--primary)\" }} />\n            ) : props.datasource && props.datasource.length > 0 ? (\n              props.datasource &&\n              props.datasource.map((d: any, i: any) => {\n                return (\n                  <Grid item xs={12} key={i}>\n                    <PushDataCard {...d} mobile={true} />\n                  </Grid>\n                );\n              })\n            ) : (\n              <Box fontSize={14} fontWeight={600} p={4}>\n                There are no push data\n              </Box>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n});\n\nexport const PushDataCard = observer((props: any) => {\n  const pushDataStatus = [\n    { key: \"SENDED\", color: \"var(--success)\", wording: \"Sended\" },\n    { key: \"SCHEDULE\", color: \"var(--warning)\", wording: \"Schedule\" },\n  ];\n\n  const status = pushDataStatus.find((d, i) => {\n    return d.key === props.status;\n  });\n  return props.mobile ? (\n    <PushDataCardMobile {...props} status={status} />\n  ) : (\n    <PushDataCardDesktop {...props} status={status} />\n  );\n});\n\nexport const PushDataCardDesktop = observer((props: any) => {\n  const status = props.status;\n  return (\n    <Box mb={2}>\n      <Paper>\n        <Box pt={2}>\n          <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            px={3}\n          >\n            <Box display=\"flex\" alignItems=\"center\">\n              <div\n                css={{\n                  width: \"6px\",\n                  height: \"6px\",\n                  borderRadius: \"99px\",\n                  backgroundColor: status?.color,\n                }}\n              ></div>\n              <Box\n                fontSize={12}\n                ml={1}\n                fontWeight=\"500\"\n                css={{ color: status?.color }}\n              >\n                {status?.wording}\n              </Box>\n            </Box>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Box mr={2} css={{ cursor: \"pointer\" }}>\n                <img src={remove} alt=\"remove\" />\n              </Box>\n              <Box css={{ cursor: \"pointer\" }}>\n                <img src={edit} alt=\"edit\" />\n              </Box>\n            </Box>\n          </Box>\n          <Box fontSize={14} mt={4} display=\"flex\" px={3} pb={2}>\n            <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n              Device\n            </Grid>\n            <Grid item xs={10}>\n              {props.devices &&\n                props.devices.map((d: any, i: any) => {\n                  return (\n                    <Box key={i} css={{ color: \"var(--primary)\" }} mr={1}>\n                      {d}\n                    </Box>\n                  );\n                })}\n            </Grid>\n          </Box>\n          <Divider />\n          <Box fontSize={14} mt={2} display=\"flex\" px={3} pb={2}>\n            <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n              Message\n            </Grid>\n            <Grid item xs={10}>\n              {props.message}\n            </Grid>\n          </Box>\n          <Divider />\n          <Box\n            fontSize={14}\n            mt={2}\n            display=\"flex\"\n            px={3}\n            pb={2}\n            alignItems=\"center\"\n          >\n            <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n              Time\n            </Grid>\n            <Grid item xs={7} wrap=\"wrap\">\n              {props.time}\n            </Grid>\n            {status && status.key === \"SENDED\" ? (\n              <Grid\n                item\n                xs={3}\n                css={{ color: \"var(--hard-gray)\" }}\n                justify=\"flex-end\"\n              >\n                <Box\n                  css={{\n                    color: \"var(--primary)\",\n                    textTransform: \"none\",\n                    userSelect: \"none\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  View Report{\" \"}\n                  <ChevronRightIcon css={{ color: \"var(--primary)\" }} />\n                </Box>\n              </Grid>\n            ) : (\n              \"\"\n            )}\n          </Box>\n        </Box>\n      </Paper>\n    </Box>\n  );\n});\n\nexport const PushDataCardMobile = observer((props: any) => {\n  const status = props.status;\n  return (\n    <Box mb={2}>\n      <Paper>\n        <Box pt={2}>\n          <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            px={3}\n          >\n            <Box display=\"flex\" alignItems=\"center\">\n              <div\n                css={{\n                  width: \"6px\",\n                  height: \"6px\",\n                  borderRadius: \"99px\",\n                  backgroundColor: status?.color,\n                }}\n              ></div>\n              <Box\n                fontSize={12}\n                ml={1}\n                fontWeight=\"500\"\n                css={{ color: status?.color }}\n              >\n                {status?.wording}\n              </Box>\n            </Box>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Box mr={2} css={{ cursor: \"pointer\" }}>\n                <img src={remove} alt=\"remove\" />\n              </Box>\n              <Box css={{ cursor: \"pointer\" }}>\n                <img src={edit} alt=\"edit\" />\n              </Box>\n            </Box>\n          </Box>\n          <Box fontSize={14} mt={4} display=\"flex\" px={3} pb={2}>\n            <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n              Device\n            </Grid>\n            <Grid item xs={8}>\n              {props.devices &&\n                props.devices.map((d: any, i: any) => {\n                  return (\n                    <Box key={i} css={{ color: \"var(--primary)\" }} mr={1}>\n                      {d}\n                    </Box>\n                  );\n                })}\n            </Grid>\n          </Box>\n          <Divider />\n          <Box fontSize={14} mt={2} display=\"flex\" px={3} pb={2}>\n            <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n              Message\n            </Grid>\n            <Grid item xs={8}>\n              {props.message}\n            </Grid>\n          </Box>\n          <Divider />\n          <Box\n            fontSize={14}\n            mt={2}\n            display=\"flex\"\n            px={3}\n            pb={2}\n            alignItems=\"center\"\n          >\n            <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n              Time\n            </Grid>\n            <Grid item xs={8}>\n              {props.time}\n            </Grid>\n          </Box>\n          <Box>\n            {status && status.key === \"SENDED\" ? (\n              <>\n                <Divider />\n                <Box px={3} py={2} fontSize={14}>\n                  <Grid\n                    item\n                    xs={12}\n                    css={{ color: \"var(--hard-gray)\" }}\n                    justify=\"center\"\n                  >\n                    <Box\n                      css={{\n                        color: \"var(--primary)\",\n                        textTransform: \"none\",\n                        userSelect: \"none\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      View Report{\" \"}\n                      <ChevronRightIcon css={{ color: \"var(--primary)\" }} />\n                    </Box>\n                  </Grid>\n                </Box>\n              </>\n            ) : (\n              \"\"\n            )}\n          </Box>\n        </Box>\n      </Paper>\n    </Box>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Setting.tsx",["566","567","568","569","570"],"import React, { useEffect, useState } from \"react\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { Box, Container, MenuItem, Paper, Select } from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport { useLogout } from \"../../services/api/auth/useLogout\";\n\nconst ListGroup = observer(\n  ({\n    label,\n    lists,\n  }: {\n    label: string;\n    lists: {\n      label: string;\n      type: string;\n      link?: string;\n      options?: { val: string; label: string }[];\n      value?: string;\n      onChange?: any;\n      onlyPC?: boolean;\n    }[];\n  }) => {\n    const history = useHistory();\n    const { enqueueSnackbar } = useSnackbar();\n    const { fire_logout } = useLogout();\n    return (\n      <>\n        <Box\n          fontSize=\"1.2rem\"\n          css={{ color: \"rgba(26, 27, 34, 0.3)\" }}\n          fontWeight={600}\n          mt={3}\n          mb={1}\n        >\n          {label}\n        </Box>\n        <Box\n          css={{\n            borderRadius: 5,\n            backgroundColor: \"#fff\",\n          }}\n        >\n          {lists.map(\n            (\n              { label, type, link, options, value, onChange, onlyPC },\n              i: number\n            ) => {\n              if (webStore.device === \"mobile\" && onlyPC) {\n                return;\n              }\n              return (\n                <Box\n                  p={2}\n                  borderBottom={i < lists.length - 1 ? \"1px solid #ddd\" : \"\"}\n                  position=\"relative\"\n                  fontWeight={600}\n                  className=\"cursor-pointer\"\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"space-between\"\n                  onClick={() => {\n                    switch (type) {\n                      case \"logout\":\n                        fire_logout().then(() => {\n                          enqueueSnackbar(\"ออกจากระบบ\", {\n                            key: \"logoutSuccess\",\n                            variant: \"success\",\n                            autoHideDuration: 3000,\n                            anchorOrigin: {\n                              vertical: \"top\",\n                              horizontal: \"center\",\n                            },\n                          });\n                        });\n                        break;\n                      case \"selected\":\n                        return;\n                        break;\n                      default:\n                        history.push(link || \"\");\n                    }\n                  }}\n                >\n                  {label}\n                  {type === \"selected\" ? (\n                    <Select\n                      value={value || \"\"}\n                      disableUnderline\n                      onChange={onChange}\n                    >\n                      {options?.map((op) => {\n                        return <MenuItem value={op.val}>{op.label}</MenuItem>;\n                      })}\n                    </Select>\n                  ) : (\n                    <ChevronRightIcon />\n                  )}\n                </Box>\n              );\n            }\n          )}\n        </Box>\n      </>\n    );\n  }\n);\n\nexport const Setting = observer((props: any) => {\n  // const [lang, setLang] = useState(webStore.lang);\n  // useEffect(() => {\n  //   webStore.setLang(lang);\n  // }, [lang]);\n  const setting = [\n    {\n      label: \"system\",\n      lists: [\n        { label: \"Push data\", type: \"link\", link: \"/setting/pushdata\" },\n        { label: \"Notification\", type: \"link\", link: \"/setting/notification\" },\n        {\n          label: \"Geo fence\",\n          type: \"link\",\n          link: \"/setting/geofence\",\n          onlyPC: true,\n        },\n        // { label: \"User management\", type: \"link\", link: \"/setting/user\" },\n      ],\n    },\n    // {\n    //   label: \"Permissions\",\n    //   lists: [\n    //     {\n    //       label: \"Permission management\",\n    //       type: \"link\",\n    //       link: \"/setting/permission\",\n    //     },\n    //   ],\n    // },\n    {\n      label: \"Website\",\n      lists: [\n        {\n          label: \"Language\",\n          type: \"selected\",\n          options: [\n            { val: \"en\", label: \"English\" },\n            { val: \"th\", label: \"Thai\" },\n          ],\n          value: webStore.lang,\n          onChange: (event: React.ChangeEvent<{ value: string }>) => {\n            webStore.setLang(event.target.value as string);\n          },\n        },\n      ],\n    },\n    {\n      label: \"Account\",\n      lists: [\n        {\n          label: \"Change password\",\n          type: \"link\",\n          link: \"/setting/changepassword\",\n        },\n        { label: \"Logout\", type: \"logout\", link: \"\" },\n      ],\n    },\n  ];\n  return (\n    <Container maxWidth=\"sm\" className=\"py-4\">\n      <Box mb={2}>\n        <SubBar title={\"Setting\"} reload={false} />\n      </Box>\n      {setting.map((s) => {\n        return <ListGroup {...s} />;\n      })}\n    </Container>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/ChangePassword.tsx",["571","572","573","574"],"import React, { useEffect, useState } from \"react\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { Box, Button, Container, TextField } from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { UserChangePassword } from \"../../types/user\";\nimport _ from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport { RequestOTP } from \"../RequestOTP\";\nimport { usePasswordRequestOTP } from \"../../services/api/setting/usePasswordRequestOTP\";\nimport { usePasswordVerifyOTP } from \"../../services/api/setting/usePasswordVerifyOTP\";\nimport { useChangePassword } from \"../../services/api/setting/useChangePassword\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const ChangePassword = observer((props: any) => {\n  const { enqueueSnackbar } = useSnackbar();\n  let history = useHistory();\n  const [pageState, setPageState] = useState<{ name: string; data?: any }>({\n    name: \"ChangePassword\",\n  });\n  const { fire_request_otp, loading_request_otp } = usePasswordRequestOTP();\n  const {\n    result_token,\n    fire_verify_otp,\n    loading_verify_otp,\n  } = usePasswordVerifyOTP();\n  const {\n    result_changepassword,\n    result_changepassword_message,\n    fire_changepassword,\n  } = useChangePassword();\n  const [form, setForm] = useState<UserChangePassword>({\n    // old_password: \"\",\n    new_password: \"\",\n    new_password_again: \"\",\n  });\n  const setVal = (k: any, v: any) => {\n    let newV: any = { ...form };\n    newV[k] = v;\n    setForm(newV);\n  };\n  const onChange = (e: any) => {\n    if (e.target.name) {\n      setVal(e.target.name, e.target.value);\n    }\n  };\n\n  const isSuccess = ({ data }: { data: any }) => {\n    fire_changepassword(data.secret_code, form.new_password).then(\n      ({ data }: { data: any }) => {\n        if (data.code === 1) {\n          enqueueSnackbar(\"Change password success\", {\n            key: \"changePasswordSuccess\",\n            variant: \"success\",\n            autoHideDuration: 3000,\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"center\",\n            },\n          });\n          setTimeout(() => {\n            history.push(\"/setting\");\n          }, 300);\n        } else {\n          enqueueSnackbar(\"Can't change password please try again.\", {\n            key: \"changePasswordError\",\n            variant: \"error\",\n            autoHideDuration: 3000,\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"center\",\n            },\n          });\n          setTimeout(() => {\n            history.push(\"/setting\");\n          }, 300);\n        }\n      }\n    );\n  };\n\n  return (\n    <Container maxWidth=\"sm\" className=\"py-4\">\n      <Box mb={2}>\n        <SubBar title={\"\"} reload={false} back={true} />\n      </Box>\n      <Box\n        css={{\n          borderRadius: 5,\n          backgroundColor: \"#fff\",\n        }}\n        py={3}\n        px={5}\n      >\n        {pageState.name === \"ChangePassword\" ? (\n          <>\n            <Box fontWeight={600} fontSize={23} mb={2}>\n              Change password\n            </Box>\n            <Box>\n              {[\n                // { name: \"old_password\", label: \"Your old password\" },\n                { name: \"new_password\", label: \"Your new password\" },\n                { name: \"new_password_again\", label: \"New password again\" },\n              ].map(({ name, label }) => {\n                let f: any = form;\n                return (\n                  <Box mb={1}>\n                    <TextField\n                      label={label}\n                      name={name}\n                      value={f[name]}\n                      onChange={onChange}\n                      required\n                      type=\"password\"\n                      placeholder={label}\n                      fullWidth\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </Box>\n                );\n              })}\n            </Box>\n            <Box maxWidth={{ xs: \"100%\", md: \"50%\" }} mt={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={async () => {\n                  var valid = _.every(_.keys(form), (v, i) => {\n                    const f: any = form;\n                    return f[v] !== null && f[v] !== \"\";\n                  });\n                  if (valid) {\n                    if (form.new_password === form.new_password_again) {\n                      fire_request_otp(\n                        webStore.profile?.phone_number || \"\"\n                      ).then(({ data }) => {\n                        if (data.data) {\n                          enqueueSnackbar(\n                            `กรุณากรอก OTP ที่ส่งไปยังเบอร์ ${data.data.phone_number}`,\n                            {\n                              key: \"otpShow\",\n                              variant: \"info\",\n                              autoHideDuration: 3000,\n                              anchorOrigin: {\n                                vertical: \"top\",\n                                horizontal: \"center\",\n                              },\n                            }\n                          );\n                          setPageState({\n                            name: \"OTP\",\n                            data: {\n                              phone_number: data.data.phone_number,\n                              ref_code: data.data.ref_code,\n                              username: \"\",\n                              password: \"\",\n                            },\n                          });\n                        } else {\n                          enqueueSnackbar(\"Password ผิดพลาด\", {\n                            key: \"passwordError\",\n                            variant: \"error\",\n                            autoHideDuration: 3000,\n                            anchorOrigin: {\n                              vertical: \"top\",\n                              horizontal: \"center\",\n                            },\n                          });\n                        }\n                      });\n                    } else {\n                      enqueueSnackbar(\n                        \"Password does not match please try again.\",\n                        {\n                          key: \"passwordError\",\n                          variant: \"error\",\n                          autoHideDuration: 3000,\n                          anchorOrigin: {\n                            vertical: \"top\",\n                            horizontal: \"center\",\n                          },\n                        }\n                      );\n                    }\n                  } else {\n                    enqueueSnackbar(\"Please enter your password.\", {\n                      key: \"passwordNull\",\n                      variant: \"error\",\n                      autoHideDuration: 3000,\n                      anchorOrigin: {\n                        vertical: \"top\",\n                        horizontal: \"center\",\n                      },\n                    });\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Box>\n          </>\n        ) : (\n          false\n        )}\n        {pageState.name === \"OTP\" ? (\n          <RequestOTP\n            {...{\n              setPageState,\n              pageState,\n              backState: \"ChangePassword\",\n              fire_request_otp,\n              loading_request_otp,\n              fire_verify_otp,\n              loading_verify_otp,\n              isSuccess,\n            }}\n          />\n        ) : (\n          false\n        )}\n      </Box>\n    </Container>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Notification.tsx",["575","576","577","578","579","580"],"import React, { useEffect, useState } from \"react\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Box,\n  Button,\n  Container,\n  Grid,\n  Switch,\n  TextField,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport { EditField } from \"../UserManage/UserInfoCard\";\n\nexport const SetNotification = observer((props: any) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [edit, setEdit] = useState(\"\");\n  const [editLabel, setEditLabel] = useState(\"\");\n  const [field, setField] = useState(\"\");\n  const notiData = [\n    {\n      name: \"detection\",\n      label: \"Wear detection\",\n      message: \"This deivice has wear detection alert\",\n      enable: true,\n    },\n    {\n      name: \"location\",\n      label: \"Location alert\",\n      message: \"This deivice has wear location alert\",\n      enable: false,\n    },\n    {\n      name: \"sos\",\n      label: \"SOS alert\",\n      message: \"This deivice has wear SOS alert\",\n      enable: true,\n    },\n    {\n      name: \"tempurature\",\n      label: \"Tempurature alert\",\n      message: \"This deivice has wear tempurature alert\",\n      enable: false,\n    },\n  ];\n  const [noti, setNoti] = useState(notiData);\n\n  // const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   setState({ ...state, [event.target.name]: event.target.checked });\n  // };\n\n  return (\n    <Container maxWidth=\"sm\" className=\"py-4\">\n      <Box mb={3}>\n        <SubBar title={\"Notification\"} reload={false} back={true} />\n      </Box>\n      {noti.map((n, i) => {\n        return (\n          <Box\n            css={{\n              borderRadius: 5,\n              backgroundColor: \"#fff\",\n            }}\n            p={2}\n            mb={1}\n          >\n            <Box display=\"flex\" justifyContent=\"space-between\" mb={2}>\n              <Box fontWeight={600}>{n.label}</Box>\n              <Switch\n                checked={noti[i].enable}\n                color=\"primary\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  noti[i].enable = event.target.checked;\n                  setNoti(noti);\n                  console.log(noti);\n                }}\n                name={n.name}\n                inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n              />\n            </Box>\n            <Grid container>\n              <Grid item xs={3}>\n                <Box color=\"#8F919C\">Messege</Box>\n              </Grid>\n              <Grid item xs={8}>\n                <Box color=\"#4B4C56\">{n.message}</Box>\n              </Grid>\n              <Grid item xs={1} css={{ textAlign: \"center\" }}>\n                <BorderColorIcon\n                  fontSize=\"small\"\n                  css={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    setIsEdit(true);\n                    setEditLabel(noti[i].label);\n                    setEdit(noti[i].message);\n                    setField(noti[i].name);\n                    console.log(\"edit noti message\");\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        );\n      })}\n      <EditField\n        label={editLabel}\n        field={field}\n        buttonName=\"SAVE\"\n        isEdit={isEdit}\n        setIsEdit={setIsEdit}\n        value={edit}\n        setValue={setEdit}\n        onClick={async () => {\n          // todo\n          console.log(\"edit\");\n        }}\n      />\n    </Container>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/CreatePushData.tsx",["581","582","583","584","585","586","587","588","589"],"import React, { useEffect, useState } from \"react\";\nimport { webStore } from \"../../stores/webStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { useListPushData } from \"../../services/api/setting/useListPushData\";\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Container,\n  Divider,\n  FilledInput,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  makeStyles,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport edit from \"../../components/assets/edit.svg\";\nimport remove from \"../../components/assets/remove.svg\";\nimport { Theme } from \"@emotion/react\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nexport const CreatePushData = observer((props: any) => {\n  const mobile = webStore.device === \"mobile\";\n\n  const useStyles = makeStyles((theme: Theme) => ({\n    radio: {\n      \"&$checked\": {\n        color: \"var(--primary)\",\n      },\n    },\n    checked: {},\n    label: {\n      color: \"var(--gray)\",\n    },\n    textfield: {\n      height: 10,\n      fontSize: 14,\n    },\n    toggleBtn: {\n      border: \"none\",\n      color: \"var(--hard-gray)\",\n      \"&:hover\": {\n        color: \"var(--primary)\",\n        backgroundColor: \"white\",\n      },\n    },\n    toggleBtnSelect: {\n      backgroundColor: \"white !important\",\n      color: \"var(--primary) !important\",\n      fontWeight: 700,\n    },\n    toggleGroupBtn: {\n      border: \"1px solid #c4c4c4\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  const [device, setDevice] = useState(\"ANY_DEVICE\");\n  const [time, setTime] = useState(\"IMMEDIATELY\");\n  const [IMEI, setIMEI]: any = useState();\n  const [IMEIGroup, setIMEIGroup]: any = useState();\n  const [message, setMessage]: any = useState();\n  const [date, setDate]: any = useState();\n  const [days, setDays]: any = useState([]);\n  const [time2, setTime2]: any = useState(\"16:00\");\n\n  const handleChangeDevice = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDevice((event.target as HTMLInputElement).value);\n  };\n\n  const handleChangeTime = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTime((event.target as HTMLInputElement).value);\n  };\n\n  const handleDays = (\n    event: React.MouseEvent<HTMLElement>,\n    newDays: string[]\n  ) => {\n    setDays(newDays);\n  };\n\n  return mobile ? (\n    <CreatePushDataMobile\n      device={device}\n      handleChangeDevice={handleChangeDevice}\n      classes={classes}\n      IMEI={IMEI}\n      setIMEI={setIMEI}\n      IMEIGroup={IMEIGroup}\n      setIMEIGroup={setIMEIGroup}\n      message={message}\n      setMessage={setMessage}\n      time={time}\n      handleChangeTime={handleChangeTime}\n      date={date}\n      setDate={setDate}\n      days={days}\n      setDays={setDays}\n      handleDays={handleDays}\n      time2={time2}\n      setTime2={setTime2}\n    />\n  ) : (\n    <CreatePushDataDesktop\n      device={device}\n      handleChangeDevice={handleChangeDevice}\n      classes={classes}\n      IMEI={IMEI}\n      setIMEI={setIMEI}\n      IMEIGroup={IMEIGroup}\n      setIMEIGroup={setIMEIGroup}\n      message={message}\n      setMessage={setMessage}\n      time={time}\n      handleChangeTime={handleChangeTime}\n      date={date}\n      setDate={setDate}\n      days={days}\n      setDays={setDays}\n      handleDays={handleDays}\n      time2={time2}\n      setTime2={setTime2}\n    />\n  );\n});\n\nexport const CreatePushDataDesktop = observer(\n  ({\n    device,\n    handleChangeDevice,\n    classes,\n    IMEI,\n    setIMEI,\n    IMEIGroup,\n    setIMEIGroup,\n    message,\n    setMessage,\n    time,\n    handleChangeTime,\n    date,\n    setDate,\n    days,\n    setDays,\n    handleDays,\n    time2,\n    setTime2,\n  }: any) => {\n    return (\n      <Container maxWidth=\"xl\" className=\"py-4\">\n        <Grid container spacing={3}>\n          <Grid item xs={3}></Grid>\n          <Grid item xs={6}>\n            <Box mb={2}>\n              <SubBar back={true} reload={false} title={\"Create Push Data\"} />\n            </Box>\n            <Grid item xs={12} justify=\"center\">\n              <Paper css={{ width: \"100%\" }}>\n                <Box mb={4}>\n                  <Box fontSize={14} my={2} display=\"flex\" px={3}>\n                    <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box mt={1} fontWeight={500}>\n                        Device\n                      </Box>\n                    </Grid>\n                    <Grid item xs={10} css={{ fontSize: 14 }}>\n                      <RadioGroup\n                        aria-label=\"device\"\n                        name=\"device\"\n                        value={device}\n                        onChange={handleChangeDevice}\n                        css={{ width: \"100%\" }}\n                      >\n                        <FormControlLabel\n                          value=\"ANY_DEVICE\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"ANY_DEVICE\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              Any Device\n                            </Box>\n                          }\n                        />\n                        <FormControlLabel\n                          value=\"SPECIFIC_DEVICE\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"SPECIFIC_DEVICE\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              Specific Device\n                            </Box>\n                          }\n                        />\n                        {device === \"SPECIFIC_DEVICE\" ? (\n                          <Box my={1}>\n                            <TextField\n                              id=\"IMEI\"\n                              autoFocus\n                              placeholder=\"Enter IMEI\"\n                              variant=\"outlined\"\n                              css={{ width: \"100%\" }}\n                              value={IMEI}\n                              onChange={(e) => {\n                                setIMEI(e.target.value);\n                              }}\n                              InputProps={{\n                                classes: { input: classes.textfield },\n                              }}\n                            />\n                          </Box>\n                        ) : (\n                          \"\"\n                        )}\n                        <FormControlLabel\n                          value=\"IMEI_GROUP\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"IMEI_GROUP\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              IMEI Group\n                            </Box>\n                          }\n                        />\n                        {device === \"IMEI_GROUP\" ? (\n                          <Box my={1}>\n                            <TextField\n                              id=\"IMEITAG\"\n                              autoFocus\n                              placeholder=\"Enter IMEI TAG\"\n                              variant=\"outlined\"\n                              css={{ width: \"100%\" }}\n                              value={IMEIGroup}\n                              onChange={(e) => {\n                                setIMEIGroup(e.target.value);\n                              }}\n                              InputProps={{\n                                classes: { input: classes.textfield },\n                              }}\n                            />\n                          </Box>\n                        ) : (\n                          \"\"\n                        )}\n                      </RadioGroup>\n                    </Grid>\n                  </Box>\n                  <Divider />\n                  <Box\n                    fontSize={14}\n                    my={2}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    px={3}\n                  >\n                    <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box fontWeight={500}>Message</Box>\n                    </Grid>\n                    <Grid item xs={10}>\n                      <Box my={1} css={{ width: \"100%\" }}>\n                        <TextField\n                          id=\"messsage\"\n                          placeholder=\"Enter message\"\n                          value={message}\n                          onChange={(e) => {\n                            setMessage(e.target.value);\n                          }}\n                          variant=\"outlined\"\n                          css={{ width: \"100%\" }}\n                          InputProps={{ classes: { input: classes.textfield } }}\n                        />\n                      </Box>\n                    </Grid>\n                  </Box>\n                  <Divider />\n                  <Box fontSize={14} my={2} display=\"flex\" px={3}>\n                    <Grid item xs={2} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box mt={1} fontWeight={500}>\n                        Time\n                      </Box>\n                    </Grid>\n                    <Grid item xs={10}>\n                      <Grid item xs={10} css={{ fontSize: 14 }}>\n                        <RadioGroup\n                          aria-label=\"time\"\n                          name=\"time\"\n                          value={time}\n                          onChange={handleChangeTime}\n                        >\n                          <FormControlLabel\n                            value=\"IMMEDIATELY\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"IMMEDIATELY\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Immidiately\n                              </Box>\n                            }\n                          />\n                          <FormControlLabel\n                            value=\"SCHEDULE\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"SCHEDULE\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Schedule\n                              </Box>\n                            }\n                          />\n                          <FormControlLabel\n                            value=\"INTERVAL\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"INTERVAL\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Interval\n                              </Box>\n                            }\n                          />\n                        </RadioGroup>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                  {time === \"SCHEDULE\" ? (\n                    <Box>\n                      <Divider />\n                      <Box\n                        fontSize={14}\n                        mt={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        px={3}\n                      >\n                        <Grid item xs={12}>\n                          <Box mt={1} fontSize={16} fontWeight={500}>\n                            Schedule setting\n                          </Box>\n                        </Grid>\n                        <Box mt={2}>\n                          <Grid\n                            item\n                            xs={12}\n                            direction=\"row\"\n                            alignItems=\"center\"\n                          >\n                            <Grid\n                              item\n                              xs={2}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Date</Box>\n                            </Grid>\n                            <Grid item xs={10}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"date\"\n                                  id=\"date\"\n                                  placeholder=\"Select date\"\n                                  value={date}\n                                  onChange={(e) => {\n                                    setDate(e.target.value);\n                                  }}\n                                  variant=\"outlined\"\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                            <Grid\n                              item\n                              xs={2}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Time</Box>\n                            </Grid>\n                            <Grid item xs={2}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"time\"\n                                  id=\"time\"\n                                  defaultValue=\"16:00\"\n                                  variant=\"outlined\"\n                                  value={time2}\n                                  onChange={(e) => {\n                                    setTime2(e.target.value);\n                                  }}\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </Box>\n                    </Box>\n                  ) : (\n                    \"\"\n                  )}\n                  {time === \"INTERVAL\" ? (\n                    <Box>\n                      <Divider />\n                      <Box\n                        fontSize={14}\n                        mt={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        px={3}\n                      >\n                        <Grid item xs={12}>\n                          <Box mt={1} fontSize={16} fontWeight={500}>\n                            Interval setting\n                          </Box>\n                        </Grid>\n                        <Box mt={2}>\n                          <Grid\n                            item\n                            xs={12}\n                            direction=\"row\"\n                            alignItems=\"center\"\n                          >\n                            <Grid\n                              item\n                              xs={12}\n                              direction=\"row\"\n                              alignItems=\"center\"\n                            >\n                              <Grid\n                                item\n                                xs={2}\n                                css={{ color: \"var(--hard-gray)\" }}\n                              >\n                                <Box fontWeight={500}>Day</Box>\n                              </Grid>\n                              <Grid item xs={10}>\n                                <Box my={1} css={{ width: \"100%\" }}>\n                                  <Grid item sm={12} md={6}>\n                                    <ToggleButtonGroup\n                                      value={days}\n                                      onChange={handleDays}\n                                      aria-label=\"text days\"\n                                      classes={{ root: classes.toggleGroupBtn }}\n                                    >\n                                      <ToggleButton\n                                        value=\"MON\"\n                                        aria-label=\"MON\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        MON\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"TUE\"\n                                        aria-label=\"TUE\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        TUE\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"WED\"\n                                        aria-label=\"WED\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        WED\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"THU\"\n                                        aria-label=\"THU\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        THU\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"FRI\"\n                                        aria-label=\"FRI\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        FRI\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"SAT\"\n                                        aria-label=\"SAT\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        SAT\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"SUN\"\n                                        aria-label=\"SUN\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        SUN\n                                      </ToggleButton>\n                                    </ToggleButtonGroup>\n                                  </Grid>\n                                </Box>\n                              </Grid>\n                              <Grid container>\n                                <Grid item xs={2}></Grid>\n                                <Box\n                                  className=\"cursor-pointer select-none\"\n                                  css={{ color: \"var(--primary)\" }}\n                                  fontWeight={600}\n                                  mb={2}\n                                  onClick={() => {\n                                    days.length === 7\n                                      ? setDays([])\n                                      : setDays([\n                                          \"MON\",\n                                          \"TUE\",\n                                          \"WED\",\n                                          \"THU\",\n                                          \"FRI\",\n                                          \"SAT\",\n                                          \"SUN\",\n                                        ]);\n                                  }}\n                                >\n                                  Toggle every day\n                                </Box>\n                              </Grid>\n                            </Grid>\n                            <Grid\n                              item\n                              xs={2}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Time</Box>\n                            </Grid>\n                            <Grid item xs={2}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"time\"\n                                  id=\"time\"\n                                  defaultValue=\"16:00\"\n                                  variant=\"outlined\"\n                                  value={time2}\n                                  onChange={(e) => {\n                                    setTime2(e.target.value);\n                                  }}\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </Box>\n                    </Box>\n                  ) : (\n                    \"\"\n                  )}\n                  <Box display=\"flex\" px={3} mt={3}>\n                    <Grid item xs={2}></Grid>\n                    <Grid item xs={10}>\n                      <Button\n                        variant=\"contained\"\n                        css={{\n                          textTransform: \"none\",\n                          backgroundColor: \"var(--success)\",\n                          color: \"white\",\n                          width: \"50%\",\n                          height: 50,\n                          fontWeight: 700,\n                        }}\n                      >\n                        Submit\n                      </Button>\n                    </Grid>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n);\n\nexport const CreatePushDataMobile = observer(\n  ({\n    device,\n    handleChangeDevice,\n    classes,\n    IMEI,\n    setIMEI,\n    IMEIGroup,\n    setIMEIGroup,\n    message,\n    setMessage,\n    time,\n    handleChangeTime,\n    date,\n    setDate,\n    days,\n    setDays,\n    handleDays,\n    time2,\n    setTime2,\n  }: any) => {\n    return (\n      <Container maxWidth=\"xl\" className=\"py-4\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Box mb={2}>\n              <SubBar back={true} reload={false} title={\"Create Push Data\"} />\n            </Box>\n            <Grid item xs={12} justify=\"center\">\n              <Paper css={{ width: \"100%\" }}>\n                <Box mb={4}>\n                  <Box fontSize={14} my={2} display=\"flex\" px={3}>\n                    <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box mt={1} fontWeight={500}>\n                        Device\n                      </Box>\n                    </Grid>\n                    <Grid item xs={8} css={{ fontSize: 14 }}>\n                      <RadioGroup\n                        aria-label=\"device\"\n                        name=\"device\"\n                        value={device}\n                        onChange={handleChangeDevice}\n                        css={{ width: \"100%\" }}\n                      >\n                        <FormControlLabel\n                          value=\"ANY_DEVICE\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"ANY_DEVICE\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              Any Device\n                            </Box>\n                          }\n                        />\n                        <FormControlLabel\n                          value=\"SPECIFIC_DEVICE\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"SPECIFIC_DEVICE\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              Specific Device\n                            </Box>\n                          }\n                        />\n                        {device === \"SPECIFIC_DEVICE\" ? (\n                          <Box my={1}>\n                            <TextField\n                              id=\"IMEI\"\n                              autoFocus\n                              placeholder=\"Enter IMEI\"\n                              variant=\"outlined\"\n                              css={{ width: \"100%\" }}\n                              value={IMEI}\n                              onChange={(e) => {\n                                setIMEI(e.target.value);\n                              }}\n                              InputProps={{\n                                classes: { input: classes.textfield },\n                              }}\n                            />\n                          </Box>\n                        ) : (\n                          \"\"\n                        )}\n                        <FormControlLabel\n                          value=\"IMEI_GROUP\"\n                          control={\n                            <Radio\n                              classes={{\n                                root: classes.radio,\n                                checked: classes.checked,\n                              }}\n                              size=\"small\"\n                            />\n                          }\n                          label={\n                            <Box\n                              fontSize={14}\n                              css={{\n                                color:\n                                  device === \"IMEI_GROUP\"\n                                    ? \"var(--primary)\"\n                                    : \"var(--hard-gray)\",\n                              }}\n                            >\n                              IMEI Group\n                            </Box>\n                          }\n                        />\n                        {device === \"IMEI_GROUP\" ? (\n                          <Box my={1}>\n                            <TextField\n                              id=\"IMEITAG\"\n                              autoFocus\n                              placeholder=\"Enter IMEI TAG\"\n                              variant=\"outlined\"\n                              css={{ width: \"100%\" }}\n                              value={IMEIGroup}\n                              onChange={(e) => {\n                                setIMEIGroup(e.target.value);\n                              }}\n                              InputProps={{\n                                classes: { input: classes.textfield },\n                              }}\n                            />\n                          </Box>\n                        ) : (\n                          \"\"\n                        )}\n                      </RadioGroup>\n                    </Grid>\n                  </Box>\n                  <Divider />\n                  <Box\n                    fontSize={14}\n                    my={2}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    px={3}\n                  >\n                    <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box fontWeight={500}>Message</Box>\n                    </Grid>\n                    <Grid item xs={8}>\n                      <Box my={1} css={{ width: \"100%\" }}>\n                        <TextField\n                          id=\"messsage\"\n                          placeholder=\"Enter message\"\n                          value={message}\n                          onChange={(e) => {\n                            setMessage(e.target.value);\n                          }}\n                          variant=\"outlined\"\n                          css={{ width: \"100%\" }}\n                          InputProps={{ classes: { input: classes.textfield } }}\n                        />\n                      </Box>\n                    </Grid>\n                  </Box>\n                  <Divider />\n                  <Box fontSize={14} my={2} display=\"flex\" px={3}>\n                    <Grid item xs={4} css={{ color: \"var(--hard-gray)\" }}>\n                      <Box mt={1} fontWeight={500}>\n                        Time\n                      </Box>\n                    </Grid>\n                    <Grid item xs={8}>\n                      <Grid item xs={10} css={{ fontSize: 14 }}>\n                        <RadioGroup\n                          aria-label=\"time\"\n                          name=\"time\"\n                          value={time}\n                          onChange={handleChangeTime}\n                        >\n                          <FormControlLabel\n                            value=\"IMMEDIATELY\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"IMMEDIATELY\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Immidiately\n                              </Box>\n                            }\n                          />\n                          <FormControlLabel\n                            value=\"SCHEDULE\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"SCHEDULE\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Schedule\n                              </Box>\n                            }\n                          />\n                          <FormControlLabel\n                            value=\"INTERVAL\"\n                            control={\n                              <Radio\n                                classes={{\n                                  root: classes.radio,\n                                  checked: classes.checked,\n                                }}\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Box\n                                fontSize={14}\n                                css={{\n                                  color:\n                                    time === \"INTERVAL\"\n                                      ? \"var(--primary)\"\n                                      : \"var(--hard-gray)\",\n                                }}\n                              >\n                                Interval\n                              </Box>\n                            }\n                          />\n                        </RadioGroup>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                  {time === \"SCHEDULE\" ? (\n                    <Box>\n                      <Divider />\n                      <Box\n                        fontSize={14}\n                        mt={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        px={3}\n                      >\n                        <Grid item xs={12}>\n                          <Box mt={1} fontSize={16} fontWeight={500}>\n                            Schedule setting\n                          </Box>\n                        </Grid>\n                        <Box mt={2}>\n                          <Grid\n                            item\n                            xs={12}\n                            direction=\"row\"\n                            alignItems=\"center\"\n                          >\n                            <Grid\n                              item\n                              xs={4}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Date</Box>\n                            </Grid>\n                            <Grid item xs={8}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"date\"\n                                  id=\"date\"\n                                  placeholder=\"Select date\"\n                                  value={date}\n                                  onChange={(e) => {\n                                    setDate(e.target.value);\n                                  }}\n                                  variant=\"outlined\"\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                            <Grid\n                              item\n                              xs={4}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Time</Box>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"time\"\n                                  id=\"time\"\n                                  defaultValue=\"16:00\"\n                                  variant=\"outlined\"\n                                  value={time2}\n                                  onChange={(e) => {\n                                    setTime2(e.target.value);\n                                  }}\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </Box>\n                    </Box>\n                  ) : (\n                    \"\"\n                  )}\n                  {time === \"INTERVAL\" ? (\n                    <Box>\n                      <Divider />\n                      <Box\n                        fontSize={14}\n                        mt={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        px={3}\n                      >\n                        <Grid item xs={12}>\n                          <Box mt={1} fontSize={16} fontWeight={500}>\n                            Interval setting\n                          </Box>\n                        </Grid>\n                        <Box mt={2}>\n                          <Grid\n                            item\n                            xs={12}\n                            direction=\"row\"\n                            alignItems=\"center\"\n                          >\n                            <Grid\n                              item\n                              xs={12}\n                              direction=\"row\"\n                              alignItems=\"center\"\n                            >\n                              <Grid\n                                item\n                                xs={4}\n                                css={{ color: \"var(--hard-gray)\" }}\n                              >\n                                <Box fontWeight={500}>Day</Box>\n                              </Grid>\n                              <Grid item xs={4}>\n                                <Box my={1} css={{ width: \"100%\" }}>\n                                  <Grid item sm={12} md={6}>\n                                    <ToggleButtonGroup\n                                      orientation=\"vertical\"\n                                      value={days}\n                                      onChange={handleDays}\n                                      aria-label=\"text days\"\n                                      classes={{ root: classes.toggleGroupBtn }}\n                                    >\n                                      <ToggleButton\n                                        value=\"MON\"\n                                        aria-label=\"MON\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        MON\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"TUE\"\n                                        aria-label=\"TUE\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        TUE\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"WED\"\n                                        aria-label=\"WED\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        WED\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"THU\"\n                                        aria-label=\"THU\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        THU\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"FRI\"\n                                        aria-label=\"FRI\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        FRI\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"SAT\"\n                                        aria-label=\"SAT\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        SAT\n                                      </ToggleButton>\n                                      <ToggleButton\n                                        value=\"SUN\"\n                                        aria-label=\"SUN\"\n                                        classes={{\n                                          root: classes.toggleBtn,\n                                          selected: classes.toggleBtnSelect,\n                                        }}\n                                      >\n                                        SUN\n                                      </ToggleButton>\n                                    </ToggleButtonGroup>\n                                  </Grid>\n                                </Box>\n                              </Grid>\n                              <Grid item xs={4}>\n                                <Box\n                                  className=\"cursor-pointer select-none\"\n                                  css={{ color: \"var(--primary)\" }}\n                                  fontWeight={600}\n                                  mb={2}\n                                  onClick={() => {\n                                    days.length === 7\n                                      ? setDays([])\n                                      : setDays([\n                                          \"MON\",\n                                          \"TUE\",\n                                          \"WED\",\n                                          \"THU\",\n                                          \"FRI\",\n                                          \"SAT\",\n                                          \"SUN\",\n                                        ]);\n                                  }}\n                                >\n                                  Toggle\n                                  <br />\n                                  everyday\n                                </Box>\n                              </Grid>\n                            </Grid>\n                            <Grid\n                              item\n                              xs={4}\n                              css={{ color: \"var(--hard-gray)\" }}\n                            >\n                              <Box fontWeight={500}>Time</Box>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Box my={1} css={{ width: \"100%\" }}>\n                                <TextField\n                                  type=\"time\"\n                                  id=\"time\"\n                                  defaultValue=\"16:00\"\n                                  variant=\"outlined\"\n                                  value={time2}\n                                  onChange={(e) => {\n                                    setTime2(e.target.value);\n                                  }}\n                                  css={{ width: \"100%\" }}\n                                  InputProps={{\n                                    classes: { input: classes.textfield },\n                                  }}\n                                />\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </Box>\n                    </Box>\n                  ) : (\n                    \"\"\n                  )}\n                  <Box display=\"flex\" px={3} mt={3}>\n                    <Grid item xs={12} justify=\"center\">\n                      <Button\n                        variant=\"contained\"\n                        css={{\n                          textTransform: \"none\",\n                          backgroundColor: \"var(--success)\",\n                          color: \"white\",\n                          width: \"50%\",\n                          height: 50,\n                          fontWeight: 700,\n                        }}\n                      >\n                        Submit\n                      </Button>\n                    </Grid>\n                  </Box>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/Geofence.tsx",["590","591"],"import { Grid, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { GeofenceMapView } from \"./GefenceMapView\";\nimport { GeofenceWrapper, GEOFENCE_PAGE_MODE } from \"./GeofenceFormWrapper\";\nimport { GeoFenceHeader } from \"./GeofenceHeader\";\nimport { GeofenceList } from \"./GeofenceList\";\nimport { GeofenceToolbar } from \"./GeofenceToolbar\";\nimport { useEffect, useState } from \"react\";\nexport const Geofence = observer(() => {\n  const [mapCenterLat, setMapCenterLat] = useState(Number);\n  const [mapCenterLong, setMapCenterLong] = useState(Number);\n\n  useEffect(() => {\n    console.log(\"set default center\");\n    setMapCenterLat(13.736717); // default center lat : thailand\n    setMapCenterLong(100.523186); // default center long : thailand\n  }, []);\n  console.log(\"mapCenterLat\", \"mapCenterLong\", mapCenterLat, mapCenterLong);\n\n  return (\n    <GeofenceWrapper mode={GEOFENCE_PAGE_MODE.LIST}>\n      <Grid container spacing={4}>\n        <Grid xs={12} style={{ marginBottom: \"1rem\" }}>\n          <GeoFenceHeader />\n        </Grid>\n        {/* <GeofenceToolbar /> */}\n        <Grid\n          container\n          className=\"gap-4\"\n          wrap={webStore.device === \"mobile\" ? \"wrap\" : \"nowrap\"}\n        >\n          <Grid className=\"lg:w-8/12 w-full\">\n            <GeofenceMapView\n              data={{ lat: mapCenterLat, long: mapCenterLong }}\n            />\n          </Grid>\n          <GeofenceList\n            setmapcenterlat={setMapCenterLat}\n            setmapcenterlong={setMapCenterLong}\n          />\n        </Grid>\n      </Grid>\n    </GeofenceWrapper>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceEdit.tsx",["592","593","594"],"import { Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useUpdateGeofence } from \"../../../services/api/geofence/useUpdateGeofence\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { GeofenceMapView } from \"./GefenceMapView\";\nimport { GeofenceForm } from \"./GeofenceForm\";\nimport {\n  GeofenceWrapper,\n  GEOFENCE_PAGE_MODE,\n  useGeofenceContext,\n} from \"./GeofenceFormWrapper\";\nimport { GeoFenceHeader } from \"./GeofenceHeader\";\nimport { GeofenceToolbar } from \"./GeofenceToolbar\";\n\nexport const GeofenceEditInner = observer((props: any) => {\n  const g = useGeofenceContext();\n  const { id }: any = useParams();\n  const history = useHistory();\n  const {\n    fire_geofence_update,\n    fire_geofence_insert_all_user,\n    fire_geofence_insert_custom_user,\n    loading_geofence_update,\n  } = useUpdateGeofence();\n  const [mapCenterLat, setMapCenterLat] = useState(Number);\n  const [mapCenterLong, setMapCenterLong] = useState(Number);\n\n  useEffect(() => {\n    if (\n      !g.geofenceForm &&\n      id &&\n      g.result_geofenceList &&\n      g.result_geofenceList.length > 0\n    ) {\n      /*\n        FORM INITIAL VALUE\n      */\n      let found = g.result_geofenceList.find((g) => g.id === id);\n\n      if (found) {\n        setMapCenterLat(found.coordinates[0].lat); // default center lat : thailand\n        setMapCenterLong(found.coordinates[0].lng);\n        g.setGeofenceFormData({\n          geofence: found,\n          places: [],\n          users: [],\n          distype: \"m\",\n        });\n      }\n    }\n  }, [id, g.result_geofenceList, g.geofenceForm]);\n  console.log(\"mapCenterLat\", \"mapCenterLong\", mapCenterLat, mapCenterLong);\n  return (\n    <Grid container spacing={4}>\n      <Grid xs={12} style={{ marginBottom: \"1rem\" }}>\n        <GeoFenceHeader />\n      </Grid>\n      <GeofenceToolbar />\n      <Grid\n        container\n        className=\"gap-4\"\n        wrap={webStore.device === \"mobile\" ? \"wrap\" : \"nowrap\"}\n      >\n        <Grid className=\"lg:w-8/12 w-full\">\n          <GeofenceMapView data={{ lat: mapCenterLat, long: mapCenterLong }} />\n        </Grid>\n        <GeofenceForm\n          saving={loading_geofence_update}\n          handleSave={async (d, f) => {\n            if (!d || !g.geofenceForm?.geofence.id) {\n              return;\n            }\n            let p = fire_geofence_update({\n              id: g.geofenceForm?.geofence.id || \"\",\n              name: d.geofence.name || \"\",\n              type: d.geofence.radius ? \"radius\" : \"polygon\",\n              address: \"\",\n              radius: d.geofence.radius,\n              max_distance:\n                (d.geofence.max_distance || 0) * (d.distype === \"m\" ? 1 : 1000),\n              coordinates: d.geofence.coordinates || [],\n              branch_id: g.branchId || \"\",\n            });\n            p.then(({ code, message, data }: any) => {\n              // console.log( \"Update\");\n              // console.log( data,code,message);\n              // console.log( \"Update\");\n              if (code === 0 && message) {\n                g.enqueueSnackbar(message, {\n                  key: \"GeofenceError\",\n                  variant: \"error\",\n                  autoHideDuration: 3000,\n                  anchorOrigin: {\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                  },\n                });\n              } else {\n                g.enqueueSnackbar(`Edit success`, {\n                  variant: \"success\",\n                  autoHideDuration: 3000,\n                  anchorOrigin: {\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                  },\n                });\n                history.push(\"/setting/geofence\"); //\n              }\n            }).catch((ex: any) => {\n              g.enqueueSnackbar(ex, {\n                key: \"GeofenceError\",\n                variant: \"error\",\n                autoHideDuration: 3000,\n                anchorOrigin: {\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                },\n              });\n            });\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n});\n\nexport const GeofenceEdit = observer((props: any) => {\n  return (\n    <GeofenceWrapper mode={GEOFENCE_PAGE_MODE.edit}>\n      <GeofenceEditInner />\n    </GeofenceWrapper>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceCreate.tsx",["595","596","597","598","599"],"import { Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useCreateGeofence } from \"../../../services/api/geofence/useCreateGeofence\";\nimport { useUpdateGeofence } from \"../../../services/api/geofence/useUpdateGeofence\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { GeofenceMapView } from \"./GefenceMapView\";\nimport { GeofenceForm } from \"./GeofenceForm\";\nimport {\n  GeofenceWrapper,\n  GEOFENCE_PAGE_MODE,\n  useGeofenceContext,\n} from \"./GeofenceFormWrapper\";\nimport { GeoFenceHeader } from \"./GeofenceHeader\";\nimport { GeofenceToolbar } from \"./GeofenceToolbar\";\n\nexport const GeofenceCreateInner = observer((props: any) => {\n  const history = useHistory();\n  const [saving, setSaving] = useState<boolean>(false);\n  const g = useGeofenceContext();\n  const { fire_geofence_create, loading_geofence_create } = useCreateGeofence();\n  const {\n    fire_geofence_update,\n    fire_geofence_insert_all_user,\n    fire_geofence_insert_custom_user,\n    loading_geofence_update,\n  } = useUpdateGeofence();\n  const [mapCenterLat, setMapCenterLat] = useState(Number);\n  const [mapCenterLong, setMapCenterLong] = useState(Number);\n\n  useEffect(() => {\n    setMapCenterLat(13.736717); // default center lat : thailand\n    setMapCenterLong(100.523186); // default center long : thailand\n  }, []);\n\n  useEffect(() => {\n    /*\n        FORM INITIAL VALUE\n      */\n    g.setFormInitialData();\n  }, []);\n  console.log(\"mapCenterLat\", \"mapCenterLong\", mapCenterLat, mapCenterLong);\n  return (\n    <Grid container spacing={4}>\n      <Grid xs={12} style={{ marginBottom: \"1rem\" }}>\n        <GeoFenceHeader />\n      </Grid>\n      <GeofenceToolbar />\n      <Grid\n        container\n        className=\"gap-4\"\n        wrap={webStore.device === \"mobile\" ? \"wrap\" : \"nowrap\"}\n      >\n        <Grid className=\"lg:w-8/12 w-full\">\n          <GeofenceMapView data={{ lat: mapCenterLat, long: mapCenterLong }} />\n        </Grid>\n        <GeofenceForm\n          saving={saving}\n          handleSave={(d, f) => {\n            if (!d) {\n              return;\n            }\n            setSaving(true);\n            let p;\n            p = fire_geofence_create({\n              name: d.geofence.name || \"\",\n              type: d.geofence.radius ? \"radius\" : \"polygon\",\n              address: \"\",\n              radius: d.geofence.radius,\n              max_distance:\n                (d.geofence.max_distance || 0) * (d.distype === \"m\" ? 1 : 1000),\n              coordinates: d.geofence.coordinates,\n              branch_id: g.branchId || \"\",\n            });\n            p.then(({ data }: any) => {\n              if (data.code === 0 && data.message) {\n                g.enqueueSnackbar(data.message, {\n                  key: \"GeofenceError\",\n                  variant: \"error\",\n                  autoHideDuration: 3000,\n                  anchorOrigin: {\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                  },\n                });\n              } else {\n                let geofence_id: string;\n                geofence_id = data.data.id;\n                console.log(\"geofence_id:\" + geofence_id);\n                if (f.restrict === \"no\") {\n                  // console.log(\"All user in branch\")\n\n                  let inst: any;\n                  inst = fire_geofence_insert_all_user(geofence_id, f.placeIds);\n                  inst.then(({ data }: any) => {\n                    console.log(data);\n                    history.push(\"/setting/geofence\");\n                    g.enqueueSnackbar(`Edit success`, {\n                      variant: \"success\",\n                      autoHideDuration: 3000,\n                      anchorOrigin: {\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      },\n                    });\n                    setSaving(false);\n                  });\n                }\n                if (f.restrict == \"byUser\") {\n                  console.log(\"some user\");\n\n                  let inst: any;\n                  inst = fire_geofence_insert_custom_user(\n                    geofence_id,\n                    f.userIds\n                  );\n                  inst.then(({ data }: any) => {\n                    console.log(data);\n                    history.push(\"/setting/geofence\");\n                    g.enqueueSnackbar(`Create success`, {\n                      variant: \"success\",\n                      autoHideDuration: 3000,\n                      anchorOrigin: {\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      },\n                    });\n                    setSaving(false);\n                  });\n                }\n              }\n            }).catch((ex: any) => {\n              g.enqueueSnackbar(ex, {\n                key: \"GeofenceError\",\n                variant: \"error\",\n                autoHideDuration: 3000,\n                anchorOrigin: {\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                },\n              });\n              setSaving(false);\n            });\n            return;\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n});\n\nexport const GeofenceCreate = observer((props: any) => {\n  return (\n    <GeofenceWrapper mode={GEOFENCE_PAGE_MODE.add}>\n      <GeofenceCreateInner />\n    </GeofenceWrapper>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Alert/Alert.tsx",["600"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  AppBar,\n  Box,\n  Button,\n  Container,\n  Grid,\n  Paper,\n  Tab,\n  Tabs,\n} from \"@material-ui/core\";\nimport { SubBar } from \"../Dashboard/Dashboard\";\nimport { CardSOS } from \"../Dashboard/CardSOS\";\nimport { CardUserList } from \"../Dashboard/CardUserList\";\nimport { Filter } from \"../../types/user\";\nimport { webStore } from \"../../stores/webStore\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { CardMapMemo } from \"../Dashboard/CardMap\";\nimport MapIcon from \"@material-ui/icons/Map\";\n\nexport const Alert = observer((props: any) => {\n  useEffect(() => {\n    return () => {\n      webStore.resetFilter();\n    };\n  }, []);\n  const mapRef = useRef<any>();\n  const [page, setPage] = useState<number>(1);\n  const filter: Filter = {\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: webStore.filter_Keyword,\n    page: page,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList, total } = useListUser(filter);\n\n  return (\n    <Container maxWidth=\"xl\" style={{ maxWidth: 1500 }} className=\"py-4 pb-16\">\n      <Box mb={2}>\n        <Grid item xs={12}>\n          <SubBar title={\"SOS Alert\"} reload={false} />\n        </Grid>\n      </Box>\n      <Grid item xs={12}>\n        <CardSOS fullDetail={true} />\n      </Grid>\n      {/* hidden Out of geofence */}\n      <Box display=\"none\">\n        <Box mb={2}>\n          <Grid item xs={12}>\n            <SubBar title={\"Out of geofence\"} reload={false} />\n          </Grid>\n        </Box>\n        <Grid item xs={12}>\n          {/* spacing={1} */}\n          <Grid item xs={12} md={6}>\n            <CardUserList\n              result_userList={result_userList}\n              loading_userList={loading_userList}\n              total={total}\n              filter={filter}\n              setPage={setPage}\n              mapRef={mapRef}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={6}\n            style={{\n              width: \"100%\",\n              flex: 1,\n              minHeight: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <StickyContainer\n              style={{\n                width: \"100%\",\n                flex: 1,\n                minHeight: \"100%\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Sticky topOffset={-80}>\n                {({ style, isSticky }: any) => (\n                  <div style={style}>\n                    <div\n                      style={{\n                        height: \"auto\",\n                        position: \"relative\",\n                        minHeight: \"calc(100vh - 4rem)\",\n                        top: !isSticky ? 0 : \"4rem\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        overflow: \"hidden\",\n                      }}\n                    >\n                      <CardMapMemo\n                        mapRef={mapRef}\n                        result_userList={result_userList}\n                        loading_userList={loading_userList}\n                        page={filter.page}\n                        perPage={filter.perPage}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Sticky>\n            </StickyContainer>\n          </Grid>\n        </Grid>\n      </Box>\n    </Container>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nexport const AlertMobile = observer((props: any) => {\n  const [vTab, setTab] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTab(newValue);\n  };\n  const mapRef = useRef<any>();\n  const [page, setPage] = useState<number>(1);\n  const filter: Filter = {\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: webStore.filter_temp,\n    filter_wear: webStore.filter_wear,\n    filter_battery: webStore.filter_battery,\n    filter_yacht_name: webStore.filter_yacht_name,\n    filter_Keyword: webStore.filter_Keyword,\n    page: page,\n    perPage: 10,\n  };\n  const { result_userList, loading_userList, total } = useListUser(filter);\n\n  return (\n    <>\n      <Paper square>\n        <Tabs\n          value={vTab}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n        >\n          <Tab label=\"SOS\" id=\"tab-0\" aria-controls=\"tabpanel-0\" />\n          <Tab label=\"Geofence\" id=\"tab-1\" aria-controls=\"tabpanel-1\" />\n        </Tabs>\n      </Paper>\n      <TabPanel value={vTab} index={0}>\n        <CardSOS fullDetail={true} />\n      </TabPanel>\n      <TabPanel value={vTab} index={1}>\n        <Button\n          variant=\"text\"\n          css={{\n            padding: 8,\n            minWidth: \"unset\",\n            position: \"absolute\",\n            top: 5,\n            right: 10,\n          }}\n        >\n          <MapIcon css={{ color: \"#4684E2\" }} />\n        </Button>\n        {/* hidden Out of geofence */}\n        <Box display=\"none\">\n          <CardUserList\n            result_userList={result_userList}\n            loading_userList={loading_userList}\n            total={total}\n            filter={filter}\n            setPage={setPage}\n            mapRef={mapRef}\n          />\n        </Box>\n      </TabPanel>\n    </>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useRequestOTP.ts",["601"],"import { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useRequestOTP_Mock = () => {\n  const [{ data, loading, error }, fire] = useCallAPI<{\n    data: { phone_number: string; ref_code: string };\n  }>(\n    {\n      url: `/auth/request_otp`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_request_otp: data?.data.phone_number,\n    result_request_otp_ref: data?.data.ref_code,\n    loading_request_otp: loading,\n    error_request_otp: error,\n    fire_request_otp: (username: string, password: string) => {\n      return resolveMockup({\n        data: { data: { otpTel: \"********95\", refCode: \"112\" } },\n      });\n      return fire({\n        data: {\n          username,\n          password,\n        },\n      });\n    },\n  };\n};\n\nexport const useRequestOTP = () => {\n  const [{ data, loading, error }, fire] = useCallAPI<{\n    data?: { phone_number: string; ref_code: string };\n  }>(\n    {\n      url: `/api/v1/login-otp`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_request_otp: data?.data?.phone_number,\n    result_request_otp_ref: data?.data?.ref_code,\n    loading_request_otp: loading,\n    error_request_otp: error,\n    fire_request_otp: (username: string, password: string) => {\n      return fire({\n        data: {\n          username,\n          password,\n        },\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useMe.ts",["602","603","604","605","606"],"import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { Profile } from \"../../../types/profile\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\n// const MOCKUP_PROFILE: Profile = {\n//   // id: \"id\",\n//   // username: \"username\",\n//   // display_name: \"display_name\",\n//   // logo: \"https://material-ui.com/static/logo_raw.svg\",\n//   // avatar: \"https://material-ui.com/static/images/avatar/1.jpg\",\n// };\n// export const useMe = () => {\n//   console.log(\"me\", localStorage.getItem(\"token\"));\n//   return {\n//     result_me: localStorage.getItem(\"token\") && MOCKUP_PROFILE,\n//     loading_me: false,\n//     error_me: false,\n//   };\n// };\n\nexport const useMe = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: Profile;\n  }>({\n    url: `/api/v2/users/me`,\n    method: \"GET\",\n  });\n\n  let user = res?.data;\n  if (user) {\n    // user.logo = \"https://material-ui.com/static/logo_raw.svg\";\n    // user.avatar = \"https://material-ui.com/static/images/avatar/1.jpg\";\n  }\n  return {\n    result_me: localStorage.getItem(\"token\") ? user : null,\n    loading_me: loading,\n    error_me: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useVerifyOTP.ts",["607","608","609","610"],"import { useHistory } from \"react-router-dom\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { Profile } from \"../../../types/profile\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useVerifyOTP_Mock = () => {\n  const history = useHistory();\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: {\n      access_token: string;\n    };\n  }>(\n    {\n      url: `/api/v1/login`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_token: res?.data?.access_token,\n    loading_verify_otp: loading,\n    error_verify_otp: error,\n    fire_verify_otp: (\n      ref_code: string,\n      otp: string,\n      username: string,\n      password: string\n    ) => {\n      return fire({\n        data: {\n          username,\n          password,\n        },\n      }).then(({ data }) => {\n        localStorage.setItem(\"token\", data.data.access_token);\n        history.push(\"/\");\n      });\n    },\n  };\n};\n\nexport const useVerifyOTP = () => {\n  const history = useHistory();\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: {\n      access_token: string;\n    };\n  }>(\n    {\n      url: `/api/v1/verify-login-otp`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_token: res?.data?.access_token,\n    loading_verify_otp: loading,\n    error_verify_otp: error,\n    fire_verify_otp: (\n      ref_code: string,\n      otp: string,\n      username: string,\n      password: string\n    ) => {\n      return fire({\n        data: {\n          ref_code,\n          otp,\n        },\n        // }).then(({ data }) => {\n        //   localStorage.setItem(\"token\", data.data.access_token);\n        //   history.push(\"/\");\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListUser.ts",["611","612","613","614","615","616","617"],"import { observer } from \"mobx-react-lite\";\nimport { webStore } from \"../../../stores/webStore\";\nimport {\n  Filter,\n  User,\n  UserFromAPI,\n  UsersQuarantine,\n} from \"../../../types/user\";\nimport { userDevice } from \"../../../types/device\";\nimport { useCallAPI } from \"../../useCallAPI\";\nimport { processServerUser } from \"./useReadUser\";\n// import { MOCKUP_USER } from \"./useReadUser\";\n\nexport const useListUser = (filter?: Filter) => {\n  console.log(\"filter\", filter);\n  // const MOCKUP_USERS: User[] = Array.from(Array(10).keys()).map((v, index) => {\n  //   return {\n  //     ...MOCKUP_USER,\n  //     id: index.toString(),\n  //     latest_lat: 10 + index / 10,\n  //     latest_lng: 10 + index / 10,\n  //   };\n  // });\n\n  // return {\n  //   result_userList: MOCKUP_USERS,\n  //   loading_userList: false,\n  //   error_userList: false,\n  // };\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data?: {\n      total?: number;\n      user_quarantines?: UsersQuarantine[];\n    };\n  }>({\n    url: `/api/v1/dashboard/group-quarantines`,\n    method: \"GET\",\n    // data: {\n    //   filter: filter,\n    // },\n    params: {\n      page: filter?.page || 1,\n      perPage: filter?.perPage || 10,\n    },\n  });\n\n  return {\n    result_userList: res?.data?.user_quarantines || [],\n    total: res?.data?.total || 0,\n    loading_userList: loading,\n    error_userList: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListAllUser.ts",["618","619","620","621","622"],"import { observer } from \"mobx-react-lite\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { Filter, User, UserFromAPI } from \"../../../types/user\";\nimport { userDevice } from \"../../../types/device\";\nimport { useCallAPI } from \"../../useCallAPI\";\nimport { processServerUser } from \"./useReadUser\";\nimport { Places } from \"../../../types/places\";\n// import { MOCKUP_USER } from \"./useReadUser\";\n\nexport const useListAllUser = (filter?: Filter) => {\n  // console.log(\"useListAllUser filter\", filter);\n  // const MOCKUP_USERS: User[] = Array.from(Array(10).keys()).map((v, index) => {\n  //   return {\n  //     ...MOCKUP_USER,\n  //     id: index.toString(),\n  //     latest_lat: 10 + index / 10,\n  //     latest_lng: 10 + index / 10,\n  //   };\n  // });\n\n  // return {\n  //   result_userList: MOCKUP_USERS,\n  //   loading_userList: false,\n  //   error_userList: false,\n  // };\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data?: {\n      total?: number;\n      user_quarantines?: {\n        id: string;\n        device?: userDevice;\n        place?: Places;\n        length_of_stay: number;\n        user: User;\n      }[];\n    };\n  }>({\n    url: `/api/v1/dashboard/users`,\n    method: \"GET\",\n    // data: {\n    //   filter: filter,\n    // },\n    params: {\n      page: filter?.page || 1,\n      perPage: filter?.perPage || 10,\n      body_temp: filter?.filter_temp,\n      battery: filter?.filter_battery,\n      device_wearing: filter?.filter_wear,\n      place: filter?.filter_yacht_name,\n      keyword: filter?.filter_Keyword,\n    },\n  });\n\n  // console.log(\"useListAllUser\", res?.data);\n\n  return {\n    result_userList: res?.data?.user_quarantines || [],\n    total: res?.data?.total || 0,\n    loading_userList: loading,\n    error_userList: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useUpdateGeofence.ts",["623","624"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { Geofence, GeofenceUpdateInput } from \"../../../types/geofence\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useUpdateGeofence = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: Geofence;\n  }>(\n    {\n      url: `api/v1/geofence/`,\n      method: \"PUT\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_geofence_update: res?.data,\n    loading_geofence_update: loading,\n    error_geofence_update: error,\n    fire_geofence_update: (geofenceInput: GeofenceUpdateInput) => {\n      return fire({\n        url: `api/v1/geofence/` + geofenceInput.id,\n        data: {\n          ...geofenceInput,\n          coordinates: JSON.stringify(geofenceInput.coordinates || []),\n        },\n        method: \"PUT\",\n      });\n    },\n    fire_geofence_insert_all_user: (geofence_id: string,places_id:any) => {\n      return fire({\n        method: \"POST\",\n        url: `api/v1/geofence/${geofence_id}/control-area/users/all`,\n        data:{\n            places:JSON.stringify(places_id)\n        }\n,\n\n      });\n\n    },\n    fire_geofence_insert_custom_user: (geofence_id: string,user_id:any) => {\n      return fire({\n        url: `api/v1/geofence/${geofence_id}/control-area/users`,\n        method: \"POST\",\n        data:{\n          users:JSON.stringify(user_id)\n      }\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useCreateGeofence.ts",["625","626"],"import { Geofence, GeofenceCreateInput } from \"../../../types/geofence\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useCreateGeofence = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: Geofence;\n  }>(\n    {\n      url: `/api/v1/geofence`,\n      method: \"POST\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    loading_geofence_create: loading,\n    fire_geofence_create: (geofenceInput: GeofenceCreateInput) => {\n      // return new Promise((resolve, reject) => {\n      //     .then(({ data: { data, code, message } }) => {\n      //       if (code === 0) {\n      //         reject(message);\n      //       } else {\n      //         resolve(data);\n      //       }\n      //     })\n      //     .catch((ex) => {\n      //       reject(ex.toString());\n      //     });\n      // });\n\n\n      return  fire({\n        data: {\n          ...geofenceInput,\n          coordinates: JSON.stringify(geofenceInput.coordinates || []),\n        },\n      })\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/PrivateContainer.tsx",["627","628","629","630","631","632","633","634","635","636","637","638","639"],"import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport { observer } from \"mobx-react-lite\";\nimport { webStore } from \"../stores/webStore\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\n\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Avatar,\n  Button,\n  Badge,\n  Box,\n  MenuList,\n  ListItemIcon,\n  SwipeableDrawer,\n  Popover,\n  Grid,\n  Divider,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useRef, useState } from \"react\";\nimport { useLogout } from \"../services/api/auth/useLogout\";\nimport { useSnackbar } from \"notistack\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport {\n  Notification,\n  NotificationMobile,\n} from \"../features/Notification/Notification\";\nimport { useListSOSUser } from \"../services/api/user/useListSOSUser\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      padding: 6,\n    },\n    menuIcon: {\n      minWidth: \"unset\",\n      marginRight: 10,\n    },\n    menuItem: {\n      borderBottom: \"4px solid transparent\",\n      padding: \"18px 0 18px 0\",\n      margin: \"0 16px\",\n      \"&:hover\": {\n        borderBottom: \"4px solid var(--primary)\",\n        color: \"var(--primary)\",\n\n        backgroundColor: \"transparent\",\n      },\n      \"&:hover svg\": {\n        fill: \"var(--primary)\",\n      },\n    },\n    menuItemActive: {\n      borderBottom: \"4px solid var(--primary)\",\n      color: \"var(--primary)\",\n      fontWeight: \"bold\",\n      padding: \"18px 0 18px 0\",\n      margin: \"0 16px\",\n      \"& svg\": {\n        fill: \"var(--primary)\",\n      },\n      \"&:hover\": {\n        backgroundColor: \"transparent\",\n      },\n    },\n    leftMenu: {\n      width: 250,\n      flexGrow: 1,\n      paddingLeft: \"1rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"@media (max-width: 992px)\": {\n        display: \"block\",\n      },\n    },\n    logo: {\n      height: \"1.2rem\",\n      padding: \"0 0.5rem\",\n    },\n    avatar: {\n      width: 30,\n      height: 30,\n    },\n  })\n);\n\nconst ListMenu = () => {\n  const classes = useStyles();\n  const location = useLocation();\n  const history = useHistory();\n  const { result_userListSOS_raw, loading_userListSOS } = useListSOSUser();\n  return (\n    <>\n      {webStore.device === \"mobile\" && (\n        <div style={{ marginBottom: \"2rem\" }}>\n          <ProfileSelector />\n        </div>\n      )}\n      <MenuItem\n        onClick={() => {\n          history.push(\"/\");\n        }}\n        className={\n          location.pathname === \"/\" ? classes.menuItemActive : classes.menuItem\n        }\n      >\n        <Box px={2} display=\"flex\" alignItems=\"center\">\n          <ListItemIcon className={classes.menuIcon}>\n            <DashboardIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Dashboard\n        </Box>\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          history.push(\"/user/list\");\n        }}\n        className={\n          location.pathname.indexOf(\"/user\") >= 0\n            ? classes.menuItemActive\n            : classes.menuItem\n        }\n      >\n        <Box px={2} display=\"flex\" alignItems=\"center\">\n          <ListItemIcon className={classes.menuIcon}>\n            <PersonIcon fontSize=\"small\" />\n          </ListItemIcon>\n          User list\n        </Box>\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          history.push(\"/alert\");\n        }}\n        className={\n          location.pathname.indexOf(\"/alert\") >= 0\n            ? classes.menuItemActive\n            : classes.menuItem\n        }\n        css={{ paddingRight: 16 }}\n      >\n        <Box px={2} display=\"flex\" alignItems=\"center\">\n          <ListItemIcon className={classes.menuIcon}>\n            <ReportProblemIcon fontSize=\"small\" />\n          </ListItemIcon>\n          Alert\n          <Box mx={1.3} />\n          {result_userListSOS_raw.length > 0 && (\n            <Badge\n              badgeContent={result_userListSOS_raw.length}\n              max={9}\n              color=\"secondary\"\n            />\n          )}\n        </Box>\n      </MenuItem>\n    </>\n  );\n};\n\nexport const ProfileSelector = observer(() => {\n  const history = useHistory();\n  // const width = \"\";\n  // console.log(webStore.device)\n  return (\n    <Select\n      labelId=\"user-selection\"\n      id=\"user-selection\"\n      style={{\n        marginLeft: \"1rem\",\n        minWidth: \"10rem\",\n        display: webStore.selectedProject ? \"\" : \"none\",\n      }}\n      value={webStore.selectedProject?.id || \"\"}\n      variant=\"outlined\"\n      onChange={(e) => {\n        if (!webStore.profile) {\n          return;\n        }\n        webStore.setSelectedProject(\n          (webStore.profile.project || []).filter(\n            ({ id }) => id === e.target.value\n          )[0]\n        );\n        history.push(\"/\");\n      }}\n    >\n      {(webStore.profile?.project || []).map((project) => {\n        const { id, name_th } = project;\n        console.warn(\"loop project\", webStore.selectedProject?.id, id);\n        return <MenuItem value={id}>{name_th}</MenuItem>;\n      })}\n    </Select>\n  );\n});\n\nexport const PrivateContainer = observer(({ children, title }: any) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const { fire_logout } = useLogout();\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const [anchorLeftMenu, setAnchorLeftMenu] = useState<boolean>(false);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [anchorNoti, setAnchorNoti] = useState<null | HTMLElement>(null);\n  const openNoti = Boolean(anchorNoti);\n  const handleNotiClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorNoti(event.currentTarget);\n  };\n  const handleNotiClose = () => {\n    setAnchorNoti(null);\n  };\n  const [notiCount, setNotiCount] = useState(0);\n  const location = useLocation();\n\n  // console.log(\"token\", localStorage.getItem(\"token\"));\n\n  return (\n    <div>\n      <AppBar color=\"inherit\" position=\"fixed\">\n        <Toolbar>\n          <Box display={{ xs: \"block\", md: \"none\" }}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={() => {\n                setAnchorLeftMenu(true);\n              }}\n            >\n              <MenuIcon />\n            </IconButton>\n          </Box>\n          <SwipeableDrawer\n            // anchor={anchor}\n            open={anchorLeftMenu}\n            onClose={() => {\n              setAnchorLeftMenu(false);\n            }}\n            onOpen={() => {\n              setAnchorLeftMenu(true);\n            }}\n          >\n            <Box className={classes.leftMenu} py={4} px={1}>\n              <ListMenu />\n            </Box>\n          </SwipeableDrawer>\n          {webStore.profile && webStore.profile.logo && (\n            <img\n              onClick={() => history.push(\"/\")}\n              className={classes.logo}\n              src={webStore.profile.logo}\n            />\n          )}\n          {webStore.device !== \"mobile\" && <ProfileSelector />}\n\n          {webStore.profile && (\n            <>\n              <Box\n                textAlign=\"center\"\n                className={classes.root}\n                display={{ xs: \"none\", md: \"flex\" }}\n                justifyContent=\"center\"\n              >\n                <ListMenu />\n              </Box>\n              <Box\n                className={classes.root}\n                display={{ xs: \"block\", md: \"none\" }}\n              ></Box>\n              <Box display={{ xs: \"none\", md: \"block\" }}>\n                {/* <MenuItem className={classes.menuButton}>\n                  <IconButton\n                    onClick={() => {\n                      history.push(\"/setting\");\n                    }}\n                    size=\"small\"\n                  >\n                    <SettingsIcon />\n                  </IconButton>\n                </MenuItem> */}\n              </Box>\n              <MenuItem className={classes.menuButton}>\n                  <IconButton\n                    onClick={() => {\n                      history.push(\"/setting\");\n                    }}\n                    size=\"small\"\n                  >\n                    <SettingsIcon />\n                  </IconButton>\n                </MenuItem>\n              <MenuItem\n                className={classes.menuButton}\n                onClick={(e) => {\n                  location.pathname === \"/notification\"\n                    ? console.log(\"clicked\")\n                    : webStore.device === \"mobile\"\n                    ? history.push(\"/notification\")\n                    : handleNotiClick(e);\n                }}\n                css={{\n                  borderBottom:\n                    location.pathname === \"/notification\"\n                      ? \"4px solid var(--primary)\"\n                      : \"\",\n                }}\n              >\n                <IconButton\n                  aria-label=\"show 11 new notifications\"\n                  color=\"inherit\"\n                  size=\"small\"\n                >\n                  {location.pathname === \"/notification\" ? (\n                    <NotificationsIcon css={{ color: \"var(--primary)\" }} />\n                  ) : (\n                    <Badge\n                      color=\"secondary\"\n                      badgeContent=\" \"\n                      variant=\"dot\"\n                      overlap=\"circle\"\n                    >\n                      <NotificationsIcon />\n                    </Badge>\n                  )}\n                </IconButton>\n              </MenuItem>\n              <MenuItem className={classes.menuButton}>\n                <IconButton onClick={handleMenu} size=\"small\">\n                  <Avatar\n                    alt={webStore.profile.name}\n                    src={webStore.profile.avatar}\n                    className={classes.avatar}\n                  />\n                </IconButton>\n              </MenuItem>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: \"center\",\n                  horizontal: \"center\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"center\",\n                  horizontal: \"center\",\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem\n                  style={{ minWidth: \"10rem\" }}\n                  onClick={() => {\n                    handleClose();\n                  }}\n                >\n                  Profile\n                </MenuItem>\n                <MenuItem\n                  style={{ minWidth: \"10rem\" }}\n                  onClick={() => {\n                    fire_logout().then(() => {\n                      enqueueSnackbar(\"ออกจากระบบ\", {\n                        key: \"logoutSuccess\",\n                        variant: \"success\",\n                        autoHideDuration: 3000,\n                        anchorOrigin: {\n                          vertical: \"top\",\n                          horizontal: \"center\",\n                        },\n                      });\n                    });\n                    handleClose();\n                  }}\n                >\n                  Logout\n                </MenuItem>\n              </Menu>\n              <Popover\n                id=\"menu-noti\"\n                open={openNoti}\n                anchorEl={anchorNoti}\n                onClose={handleNotiClose}\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"right\",\n                }}\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n              >\n                <Box\n                  display=\"flex\"\n                  justifyContent=\"space-between\"\n                  fontSize={14}\n                  fontWeight={600}\n                  px={3}\n                  py={2}\n                  css={{ width: \"100%\" }}\n                >\n                  <Box>Notification ({notiCount})</Box>\n                  <Box\n                    color=\"var(--primary)\"\n                    css={{ cursor: \"pointer\", userSelect: \"none\" }}\n                    onClick={() => {\n                      history.push(\"/notification\");\n                      handleNotiClose();\n                    }}\n                  >\n                    VIEW ALL\n                  </Box>\n                </Box>\n                <Divider />\n                <Notification\n                  popup={true}\n                  handleNotiClose={handleNotiClose}\n                  setNotiCount={setNotiCount}\n                />\n              </Popover>\n            </>\n          )}\n        </Toolbar>\n      </AppBar>\n      <div style={{ paddingTop: \"4rem\" }}>{children}</div>\n    </div>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/AfterLogin.tsx",["640","641","642","643"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useMe } from \"../services/api/auth/useMe\";\nimport { webStore } from \"../stores/webStore\";\nimport logo from \"../components/assets/PMH.svg\";\nexport const AfterLogin = () => {\n  const { result_me, loading_me } = useMe();\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    console.log(\"set profile\", result_me, loading_me, pathname);\n    if (!loading_me && result_me) {\n      result_me.logo = logo;\n      webStore.setProfile(result_me);\n    }\n  }, [localStorage.getItem(\"token\"), loading_me, pathname || \"/\"]);\n  return <></>;\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/ProjectWrapper.tsx",["644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664"],"import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport { observer } from \"mobx-react-lite\";\nimport { webStore } from \"../stores/webStore\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\n\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Avatar,\n  Button,\n  Box,\n  CircularProgress,\n  Grid,\n  CardActionArea,\n  Paper,\n  Container,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useLogout } from \"../services/api/auth/useLogout\";\nimport { useSnackbar } from \"notistack\";\nimport { useHistory } from \"react-router-dom\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nexport const ProjectWrapper = observer(({ children }: any) => {\n  if (!webStore.selectedProject) {\n    return (\n      <Box m={5}>\n        <Container maxWidth=\"sm\">\n          <Grid container direction=\"column\" spacing={3}>\n            <Grid item>\n              <Typography variant=\"subtitle1\">กรุณา เลือก Project</Typography>\n            </Grid>\n            {(webStore.profile?.project || []).map((project) => {\n              const { name_th } = project;\n              return (\n                <Grid item>\n                  <CardActionArea\n                    onClick={() => {\n                      webStore.setSelectedProject(project);\n                    }}\n                  >\n                    <Paper>\n                      <Box p={6} fontSize=\"large\" fontWeight=\"bold\">\n                        <Grid\n                          container\n                          direction=\"row\"\n                          alignItems=\"center\"\n                          justify=\"space-between\"\n                          spacing={3}\n                        >\n                          <div>{name_th}</div>\n                          <ChevronRightIcon />\n                        </Grid>\n                      </Box>\n                    </Paper>\n                  </CardActionArea>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Container>\n      </Box>\n    );\n  }\n\n  return <>{children}</>;\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/RequestOTP.tsx",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardTotalUserByGender.tsx",["665","666","667","668","669","670","671","672","673","674","675"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  LinearProgress,\n  Divider,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { PaginationItem, Pagination } from \"@material-ui/lab\";\nimport { CardTopValue } from \"./Dashboard\";\n\nexport interface customeLabels {\n  data: any;\n  labels: any;\n  color: any;\n  showValue?: boolean;\n  itemsCountPerPage?: number;\n}\n\nexport const CustomeLabels = observer(\n  ({\n    data,\n    labels = [],\n    color = GRAPH_COLOR,\n    showValue = false,\n    itemsCountPerPage = 10,\n  }: customeLabels) => {\n    const [page, setPage] = React.useState(1);\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n      setPage(value);\n    };\n    const pageCount = Math.ceil(data.length / itemsCountPerPage);\n    let sum = data.reduce((a: any, b: any) => a + b, 0);\n    return (\n      <>\n        {labels.map((label: string, key: number) => {\n          return (\n            <Box\n              css={{\n                display:\n                  key >= itemsCountPerPage * (page - 1) &&\n                  key < itemsCountPerPage * page\n                    ? \"block\"\n                    : \"none\",\n              }}\n            >\n              <Box py={1.5} px={{ xs: 4, md: 0 }}>\n                <Grid\n                  container\n                  css={{\n                    padding: \"0.5em 0\",\n                  }}\n                  direction=\"row\"\n                  justify=\"space-between\"\n                  alignItems=\"center\"\n                >\n                  <Grid item direction=\"row\" alignItems=\"center\" xs={9}>\n                    <Box\n                      css={{\n                        width: 10,\n                        height: 10,\n                        backgroundColor: color[key],\n                        borderRadius: \"100%\",\n                      }}\n                      mr={1}\n                    ></Box>\n                    <Box css={{ color: \"#5A5A68\" }}>{label}</Box>\n                  </Grid>\n                  <Grid item xs={3}>\n                    {showValue ? (\n                      <Box textAlign=\"right\">\n                        <Box\n                          css={{\n                            fontWeight: 700,\n                            fontSize: \"1.2em\",\n                            lineHeight: \"1em\",\n                          }}\n                        >{`${Math.round((data[key] * 100) / sum)}%`}</Box>\n                        <Box\n                          css={{\n                            color: \"#5A5A68\",\n                            fontSize: \"1em\",\n                            lineHeight: \"1em\",\n                            marginTop: \"0.25em\",\n                          }}\n                        >\n                          {data[key]}\n                        </Box>\n                      </Box>\n                    ) : (\n                      <Box\n                        textAlign=\"right\"\n                        css={{ color: \"#5A5A68\", fontWeight: 700 }}\n                      >{`${Math.round((data[key] * 100) / sum)}%`}</Box>\n                    )}\n                  </Grid>\n                </Grid>\n              </Box>\n              {key < labels.length - 1 && <Divider />}\n            </Box>\n          );\n        })}\n        {pageCount > 1 && (\n          <Pagination\n            count={pageCount}\n            page={page}\n            onChange={handleChange}\n            renderItem={(item) => {\n              if (item.type == \"previous\") {\n                return (\n                  <>\n                    <PaginationItem {...item} />\n                    <Box display=\"inline\" mx={1}>{`${page}/${pageCount}`}</Box>\n                  </>\n                );\n              } else if (item.type == \"next\") {\n                return <PaginationItem {...item} />;\n              } else {\n                return;\n              }\n            }}\n            css={{ justifyContent: \"center\" }}\n          />\n        )}\n      </>\n    );\n  }\n);\n\nexport const CustomeLabelsMobile = observer(\n  ({\n    data,\n    labels = [],\n    color = GRAPH_COLOR,\n    showValue = false,\n    itemsCountPerPage = 10,\n  }: customeLabels) => {\n    let sum = data.reduce((a: any, b: any) => a + b, 0);\n    return (\n      <>\n        {labels.map((label: string, key: number) => {\n          return (\n            <Box my={2}>\n              <Grid direction=\"row\" container>\n                <Box\n                  css={{\n                    width: 10,\n                    height: 10,\n                    backgroundColor: color[key],\n                    borderRadius: \"100%\",\n                    marginTop: \"0.5em\",\n                  }}\n                  mr={1}\n                ></Box>\n                <Box>\n                  <Box css={{ color: \"#5A5A68\" }} fontSize={14}>\n                    {label}\n                  </Box>\n                  <Box\n                    css={{\n                      fontWeight: 700,\n                      fontSize: \"1.6em\",\n                      color: \"#5A5A68\",\n                    }}\n                  >{`${Math.round((data[key] * 100) / sum)}%`}</Box>\n                </Box>\n              </Grid>\n            </Box>\n          );\n        })}\n      </>\n    );\n  }\n);\n\nexport const CardTotalUserByGender = observer(() => {\n  const { result_user_by_gender, loading_user_by_gender } = useReadUserByGender(\n    webStore.latestTimeStamp\n  );\n\n  return (\n    <Box\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flex: 1,\n        minHeight: \"100%\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 5,\n        backgroundColor: \"#fff\",\n      }}\n    >\n      {loading_user_by_gender && (\n        <LinearProgress\n          style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n        />\n      )}\n      <Box style={{ width: \"100%\" }} p={2}>\n        <Box display={{ sm: \"none\", xs: \"none\", md: \"block\" }}>\n          <Typography gutterBottom>\n            <Box fontWeight=\"bold\" textAlign=\"center\">\n              Total customers\n            </Box>\n            <Box\n              fontWeight=\"bold\"\n              textAlign=\"center\"\n              lineHeight={\"56px\"}\n              fontSize={48}\n            >\n              {result_user_by_gender?.total}\n            </Box>\n            <Box\n              fontWeight=\"bold\"\n              textAlign=\"center\"\n              mb={3}\n              css={{ color: \"#14AF5C\" }}\n            >\n              +5% from previous week\n            </Box>\n          </Typography>\n        </Box>\n        <Box display={{ xs: \"block\", md: \"none\" }}>\n          <Typography style={{ fontWeight: \"bold\" }}>Gender</Typography>\n        </Box>\n        <Grid container>\n          <Grid item md={12} xs={9}>\n            <Doughnut\n              height={200}\n              legend={{ position: \"bottom\" }}\n              data={{\n                datasets: [\n                  {\n                    data: [\n                      result_user_by_gender?.male,\n                      result_user_by_gender?.female,\n                    ],\n                    backgroundColor: GRAPH_COLOR,\n                  },\n                ],\n              }}\n              options={{\n                tooltips: {\n                  callbacks: {\n                    label: (tooltipItem: any, data: any) => {\n                      return ` ${[\"Male\", \"Female\"][tooltipItem.index]} ${\n                        data.datasets[0].data[tooltipItem.index]\n                      }`;\n                    },\n                  },\n                },\n              }}\n            />\n          </Grid>\n          <Grid item md={12} xs={3}>\n            <Box display={{ sm: \"none\", xs: \"none\", md: \"block\" }}>\n              <CustomeLabels\n                data={[\n                  result_user_by_gender?.male,\n                  result_user_by_gender?.female,\n                ]}\n                labels={[\"Male\", \"Female\"]}\n                color={GRAPH_COLOR}\n                showValue={true}\n              />\n            </Box>\n            <Box display={{ sm: \"block\", xs: \"block\", md: \"none\" }}>\n              <CustomeLabelsMobile\n                data={[\n                  result_user_by_gender?.male,\n                  result_user_by_gender?.female,\n                ]}\n                labels={[\"Male\", \"Female\"]}\n                color={GRAPH_COLOR}\n                showValue={true}\n              />\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n});\n\nexport const CardTopTotalUserByGender = observer(() => {\n  const { result_user_by_gender, loading_user_by_gender } = useReadUserByGender(\n    webStore.latestTimeStamp\n  );\n  return (\n    <CardTopValue\n      title=\"Total customers\"\n      value={result_user_by_gender?.total}\n      total={`+5% from previous week`}\n      primary={true}\n    />\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardNationality.tsx",["676","677","678","679","680","681","682","683","684","685","686","687"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  LinearProgress,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { CustomeLabels } from \"./CardTotalUserByGender\";\nimport { CardTopValue } from \"./Dashboard\";\n\nexport const CardNationality = observer(() => {\n  const {\n    result_user_by_nation,\n    loading_user_by_nation,\n  } = useReadUserByNationality(webStore.latestTimeStamp); //\n  return (\n    <CardActionArea\n      style={{\n        display: \"flex\",\n        flex: 1,\n        minHeight: \"100%\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Box\n        css={{\n          width: \"100%\",\n          flex: 1,\n          minHeight: \"100%\",\n          display: \"flex\",\n          flexFlow: \"column\",\n          borderRadius: 5,\n          backgroundColor: \"#fff\",\n        }}\n      >\n        {loading_user_by_nation && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n        <Box\n          style={{\n            display: \"flex\",\n            flex: 1,\n            flexDirection: \"column\",\n          }}\n          p={2}\n        >\n          <Box fontWeight=\"bold\" mb={2}>\n            Nationality\n          </Box>\n          <Grid\n            item\n            direction=\"row\"\n            container\n            style={{\n              display: \"flex\",\n              flex: 1,\n            }}\n          >\n            <Grid\n              item\n              xs={12}\n              md={5}\n              style={{ display: \"flex\", alignItems: \"center\" }}\n            >\n              <Doughnut\n                height={200}\n                legend={{ position: \"bottom\" }}\n                data={{\n                  datasets: [\n                    {\n                      data: (result_user_by_nation || []).map(\n                        ({ value }) => value\n                      ),\n                      backgroundColor: GRAPH_COLOR,\n                    },\n                  ],\n                }}\n                options={{\n                  maintainAspectRatio: false,\n                  tooltips: {\n                    callbacks: {\n                      label: (tooltipItem: any, data: any) => {\n                        return ` ${\n                          (result_user_by_nation || [])[tooltipItem.index].title\n                        } ${data.datasets[0].data[tooltipItem.index]}`;\n                      },\n                    },\n                  },\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} md={7}>\n              <Box pl={{ md: 4, xs: 2 }} pr={{ md: 2, xs: 3 }} fontSize={14}>\n                <CustomeLabels\n                  data={(result_user_by_nation || []).map(({ value }) => value)}\n                  labels={(result_user_by_nation || []).map(\n                    ({ title }) => title\n                  )}\n                  color={GRAPH_COLOR}\n                  itemsCountPerPage={4}\n                  showValue={true}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </CardActionArea>\n  );\n});\n\nexport const CardTopNationality = observer(() => {\n  const {\n    result_user_by_nation,\n    loading_user_by_nation,\n  } = useReadUserByNationality(webStore.latestTimeStamp);\n  let data = (result_user_by_nation || []).map(({ value }) => value);\n  let sum = data.reduce((a: any, b: any) => a + b, 0);\n  let max = Math.max.apply(Math, data);\n  let index = data.indexOf(Math.max(max));\n  return (\n    <CardTopValue\n      title=\"Top nationality\"\n      value={(result_user_by_nation || [])[index]?.title}\n      // total={`${sum} people`}\n      total={`${(result_user_by_nation || [])[index]?.value} people`}\n    />\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardAge.tsx",["688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Doughnut, Bar } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { CardTopValue } from \"./Dashboard\";\n\nexport const CardAge = observer(() => {\n  const { result_user_by_age, loading_user_by_age } = useReadUserByAge(\n    webStore.latestTimeStamp\n  );\n  return (\n    <Box\n      css={{\n        borderRadius: 5,\n        backgroundColor: \"#fff\",\n        display: \"flex\",\n        flex: 1,\n        minHeight: \"100%\",\n        flexFlow: \"column\",\n      }}\n    >\n      {loading_user_by_age && (\n        <LinearProgress\n          style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n        />\n      )}\n      <Box\n        style={{\n          width: \"100%\",\n          flex: 1,\n          minHeight: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n        p={2}\n      >\n        <Typography gutterBottom style={{ marginBottom: \"1rem\" }}>\n          <Box fontWeight=\"bold\"> People by age </Box>\n        </Typography>\n        <div\n          style={{\n            minHeight: 200,\n            flex: \"1\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <Bar\n            height={180}\n            legend={{ position: \"bottom\", display: false }}\n            options={{\n              barRoundness: 0.3,\n              scales: {\n                yAxes: [\n                  {\n                    ticks: {\n                      autoSkip: false,\n                      // beginAtZero: true,\n                      stepSize: 5,\n                      min: 0,\n                    },\n                    gridLines: {\n                      offsetGridLines: false,\n                    },\n                  },\n                ],\n                xAxes: [\n                  {\n                    gridLines: {\n                      drawBorder: false,\n                      display: false,\n                    },\n                    barThickness: 10,\n                  },\n                ],\n              },\n              legend: {\n                labels: {\n                  boxWidth: 5,\n                },\n                position: \"bottom\",\n              },\n            }}\n            data={{\n              datasets: [\n                {\n                  data: (result_user_by_age || []).map(({ value }) => value),\n                  backgroundColor: \"#4684E2\",\n                  // backgroundColor: GRAPH_COLOR,\n                },\n              ],\n              labels: (result_user_by_age || []).map(({ title }) => title),\n            }}\n          />\n        </div>\n      </Box>\n    </Box>\n  );\n});\n\nexport const CardTopAge = observer(() => {\n  const { result_user_by_age, loading_user_by_age } = useReadUserByAge(\n    webStore.latestTimeStamp\n  );\n  let data = (result_user_by_age || []).map(({ value }) => value);\n  let sum = data.reduce((a: any, b: any) => a + b, 0);\n  let max = Math.max.apply(Math, data);\n  let index = data.indexOf(Math.max(max));\n  return (\n    <CardTopValue\n      title=\"Top age\"\n      value={(result_user_by_age || [])[index]?.title}\n      total={`${(result_user_by_age || [])[index]?.value} people`}\n      // total={`${sum} people`}\n    />\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardLengthOfStay.tsx",["704","705","706","707","708","709","710","711","712","713","714","715","716","717"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  LinearProgress,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport { CardTopValue } from \"./Dashboard\";\n\nexport const CardLengthOfStay = observer(() => {\n  const { result_length_of_stay, loading_length_of_stay } = useReadLengthOfStay(\n    webStore.latestTimeStamp\n  );\n  return (\n    <Box css={{ borderRadius: 5, backgroundColor: \"#fff\" }}>\n      {loading_length_of_stay && (\n        <LinearProgress\n          style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n        />\n      )}\n      <Box p={2}>\n        <Box mb={3}>\n          <Typography>\n            <Box fontWeight=\"bold\">Length Of Stay</Box>\n          </Typography>\n        </Box>\n        <Bar\n          height={200}\n          legend={{ position: \"bottom\", display: false }}\n          options={{\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true,\n                  },\n                  gridLines: {\n                    offsetGridLines: false,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    drawBorder: false,\n                    display: false,\n                  },\n                  barThickness: 10,\n                },\n              ],\n            },\n          }}\n          data={{\n            datasets: [\n              {\n                data: (result_length_of_stay || []).map(({ y }) => y),\n                // backgroundColor: GRAPH_COLOR,\n                backgroundColor: \"#4684E2\",\n              },\n            ],\n            labels: (result_length_of_stay || []).map(({ x }) => x),\n          }}\n        />\n      </Box>\n    </Box>\n  );\n});\n\nexport const CardTopLengthOfStay = observer(() => {\n  const { result_length_of_stay, loading_length_of_stay } = useReadLengthOfStay(\n    webStore.latestTimeStamp\n  );\n  let data = (result_length_of_stay || []).map(({ y }) => y);\n  // let sum = data.reduce((a: any, b: any) => a + b, 0);\n  let max = Math.max.apply(Math, data);\n  let index = data.indexOf(Math.max(max));\n\n  console.log(\"result_length_of_stay\", result_length_of_stay);\n  return (\n    <CardTopValue\n      title=\"Top length of stay\"\n      value={(result_length_of_stay || [])[index]?.x}\n      total={`${max} days`}\n    />\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardMap.tsx",["718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\n\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { CardTotalUserByGender } from \"./CardTotalUserByGender\";\nimport { CardNationality } from \"./CardNationality\";\nimport { CardAge } from \"./CardAge\";\nimport { CardLengthOfStay } from \"./CardLengthOfStay\";\nimport { Map } from \"../../components/Map\";\nimport { useHistory } from \"react-router-dom\";\nimport { UsersQuarantine } from \"../../types/user\";\n\nconst useStyles = makeStyles((theme: any) => ({\n  paper: {\n    [theme.breakpoints.down(\"xs\")]: {\n      paddingTop: \"100%\",\n    },\n  },\n}));\nexport const CardMap = observer(\n  ({\n    style,\n    mapRef,\n    result_userList,\n    loading_userList,\n    page,\n    perPage,\n    loadmore = false,\n  }: {\n    style?: any;\n    mapRef: any;\n    result_userList: UsersQuarantine[];\n    loading_userList: boolean;\n    page: number;\n    perPage: number;\n    loadmore?: boolean;\n  }) => {\n    const classes = useStyles();\n    const history = useHistory();\n\n    const handleClick = (id: string) => {\n      history.push(\"/user/\" + id + \"/preview\");\n    };\n\n    return (\n      <div style={style} className={classes.paper + \" flex-1 h-full relative\"}>\n        <Box\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: 5,\n          }}\n          css={{ borderWidth: 0 }}\n        >\n          {loading_userList && (\n            <LinearProgress\n              style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n            />\n          )}\n          <Map\n            mapRef={mapRef}\n            locations={(result_userList || [])\n              .map(({ device, user, id }, i) => {\n                return {\n                  lat: device ? device.latitude : 0,\n                  lng: device ? device.longitude : 0,\n                  name: loadmore\n                    ? (i + 1).toString()\n                    : ((page - 1) * perPage + i + 1).toString(),\n                  active: device?.device_status === 1 ? true : false,\n                  hoverText: user.name,\n                  onClick: () => {\n                    handleClick(id);\n                  },\n                };\n              })\n              .filter(({ lat, lng }) => {\n                return (\n                  lat > 0 &&\n                  lng > 0 &&\n                  Math.abs(lat) <= 90 &&\n                  Math.abs(lng) <= 180\n                );\n              })}\n          />\n        </Box>\n      </div>\n    );\n  }\n);\n\nexport const CardMapMemo = React.memo(\n  ({\n    style,\n    mapRef,\n    result_userList,\n    loading_userList,\n    page,\n    perPage,\n    loadmore = false,\n  }: {\n    style?: any;\n    mapRef: any;\n    result_userList: UsersQuarantine[];\n    loading_userList: boolean;\n    page: number;\n    perPage: number;\n    loadmore?: boolean;\n  }) => {\n    const [userLiser, setUserLiser] = useState<UsersQuarantine[]>([]);\n    useEffect(() => {\n      if (loadmore) {\n        setUserLiser([...userLiser, ...result_userList]);\n      } else {\n        setUserLiser(result_userList);\n      }\n    }, [result_userList]);\n    return (\n      <CardMap\n        style={style}\n        result_userList={userLiser}\n        loading_userList={loading_userList}\n        page={page}\n        perPage={perPage}\n        mapRef={mapRef}\n        loadmore={loadmore}\n      />\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardUserList.tsx",["745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  CardActionArea,\n  CircularProgress,\n  Container,\n  Grid,\n  LinearProgress,\n  MenuItem,\n  Paper,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport {\n  DataGrid,\n  ColDef,\n  ValueGetterParams,\n  CellParams,\n} from \"@material-ui/data-grid\";\n\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\n\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { CardTotalUserByGender } from \"./CardTotalUserByGender\";\nimport { CardNationality } from \"./CardNationality\";\nimport { CardAge } from \"./CardAge\";\nimport { CardLengthOfStay } from \"./CardLengthOfStay\";\nimport { useHistory } from \"react-router-dom\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { dateStr, dateStrAPI } from \"../../utils\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\nimport MyLocationIcon from \"@material-ui/icons/MyLocation\";\nimport WifiIcon from \"@material-ui/icons/Wifi\";\nimport WifiOffIcon from \"@material-ui/icons/WifiOff\";\nimport FavoriteIcon from \"../../components/assets/favorite.svg\";\nimport TemperatureIcon from \"../../components/assets/temperature.svg\";\nimport BloodIcon from \"../../components/assets/blood.svg\";\nimport BatteryIconFull from \"../../components/assets/noun_Battery_3408796.svg\";\nimport BatteryIconHigh from \"../../components/assets/noun_Battery_-1.svg\";\nimport BatteryIconMedium from \"../../components/assets/noun_Battery_-2.svg\";\nimport BatteryIconLow from \"../../components/assets/noun_Battery_-3.svg\";\nimport BatteryIconLoss from \"../../components/assets/noun_Battery_-4.svg\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\nimport { Filter, User, UserFromAPI, UsersQuarantine } from \"../../types/user\";\nimport { userDevice } from \"../../types/device\";\nimport { useListAllUser } from \"../../services/api/user/useListAllUser\";\nimport { Places } from \"../../types/places\";\n\nconst DeviceValue = observer(\n  ({\n    icon,\n    value,\n    position,\n  }: {\n    icon: any;\n    value: string;\n    position?: string;\n  }) => {\n    return (\n      <Box\n        display={{ md: \"flex\" }}\n        alignItems=\"center\"\n        css={{ color: \"#595960\", height: \"100%\" }}\n        justifyContent={\"flex-start\"}\n        textAlign=\"center\"\n      >\n        <Box\n          justifyContent=\"center\"\n          display=\"flex\"\n          mb={{ xs: 0.5, md: 0 }}\n          height={{ xs: 14, md: \"100%\" }}\n        >\n          <img\n            src={icon}\n            css={{\n              \"@media (max-width: 992px)\": { maxHeight: 14, maxWidth: 14 },\n            }}\n          />\n        </Box>\n        <Box ml={0.5} fontSize={13}>\n          {value}\n        </Box>\n      </Box>\n    );\n  }\n);\n\nexport const OnlineTab = observer(\n  ({ user, device }: { user: User; device?: userDevice }) => {\n    return (\n      <Box display=\"flex\" alignItems=\"center\">\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          mr={3}\n          css={{\n            color: device?.device_status === 1 ? \"#10940E\" : \"#C4C4C4\",\n          }}\n        >\n          <Box\n            css={{\n              width: 10,\n              height: 10,\n              borderRadius: \"50%\",\n              backgroundColor:\n                device?.device_status === 1 ? \"#10940E\" : \"#C4C4C4\",\n            }}\n          ></Box>\n          <Box ml={1} fontSize={12}>\n            {device?.device_status === 1 ? \"Wearing\" : \"Not Wear\"}\n          </Box>\n        </Box>\n        {device?.device_status === 1 ? (\n          <Box display=\"flex\" alignItems=\"center\" css={{ color: \"#10940E\" }}>\n            <WifiIcon css={{ width: 15 }} />\n            <Box ml={1} fontSize={12}>\n              Online\n            </Box>\n          </Box>\n        ) : (\n          <Box display=\"flex\" alignItems=\"center\" css={{ color: \"#C4C4C4\" }}>\n            <WifiOffIcon css={{ width: 15 }} />\n            <Box ml={1} fontSize={12}>\n              Offline\n            </Box>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n);\n\nexport const DeviceValueTab = observer(\n  ({ device }: { device?: userDevice }) => {\n    var iconBattery;\n    if(typeof device !== 'undefined'){\n      if(device.battery.toString() < \"0\"){\n        iconBattery = BatteryIconLoss;\n      }else if(device.battery.toString() == \"0\"){\n        iconBattery = BatteryIconLoss;\n      }else if(device.battery.toString() == \"1\"){\n        iconBattery = BatteryIconLow;\n      }else if(device.battery.toString() == \"2\"){\n        iconBattery = BatteryIconMedium;\n      }else if(device.battery.toString() == \"3\"){\n        iconBattery = BatteryIconHigh;\n      }else if(device.battery.toString() == \"4\"){\n        iconBattery = BatteryIconFull;\n      }else if(device.battery.toString() > \"4\"){\n        iconBattery = BatteryIconFull;\n      }\n    }\n    return (\n      <Grid container>\n        <Grid item xs={3} style={{ maxWidth: \"4.5rem\" }}>\n          {device?.body_temp ? (\n            <DeviceValue\n              icon={TemperatureIcon}\n              value={device?.body_temp.toString()}\n            />\n          ) : (\n            <DeviceValue icon={TemperatureIcon} value={\"?\"} />\n          )}\n        </Grid>\n        <Grid item xs={3} style={{ maxWidth: \"4.5rem\" }}>\n          {device?.heart_rate ? (\n            <DeviceValue\n              icon={FavoriteIcon}\n              value={device?.heart_rate.toString()}\n            />\n          ) : (\n            <DeviceValue icon={FavoriteIcon} value={\"?\"} />\n          )}\n        </Grid>\n        <Grid item xs={3} style={{ maxWidth: \"6rem\" }}>\n          <DeviceValue\n            icon={BloodIcon}\n            value={`${device?.blood_systolic || \"?\"} / ${\n              device?.blood_diastolic || \"?\"\n            }`}\n          />\n        </Grid>\n        <Grid item xs={3} style={{ maxWidth: \"3rem\" }}>\n          <DeviceValue\n            icon={iconBattery}\n            value={``}\n            position=\"right\"\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n);\n\nexport const UserItem = observer(\n  ({\n    user,\n    device,\n    place,\n    borderTop,\n    index,\n  }: {\n    user: User;\n    device?: userDevice;\n    place?: Places;\n    index: number;\n    borderTop?: boolean;\n  }) => {\n    const history = useHistory();\n    // console.log(\"UserItem\", device);\n    return (\n      <Box\n        className=\"relative\"\n        css={{\n          backgroundColor: \"#fff\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n          \"@media (max-width: 992px)\": { marginBottom: 15 },\n        }}\n        onClick={() => {\n          history.push(\"/user/\" + user.id + \"/preview\");\n        }}\n      >\n        <Box\n          display=\"flex\"\n          py={2}\n          px={{ xs: 2, md: 0 }}\n          borderTop={borderTop ? \"1px solid #ddd\" : 0}\n          css={{\n            opacity: device?.latitude && device?.longitude ? 1 : 0.5,\n            \"@media (max-width: 992px)\": { borderTop: 0 },\n            \"&:hover\": {\n              backgroundColor: \"rgba(3,169,244,0.08)\",\n              borderTop: 0,\n            },\n          }}\n        >\n          <Box pr={2}>\n            <Avatar css={{ width: 32, height: 32 }} src={user?.avatar}>\n              {user?.name.substring(0, 1)}\n            </Avatar>\n          </Box>\n          <Grid container>\n            <Grid item xs={12} md={8}>\n              <Box mb={2} position=\"relative\">\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  css={{ color: \"#35353F\" }}\n                >\n                  <Box fontWeight={600} fontSize={14} mr={1}>\n                    {`${user?.name} ${user.surname}`}\n                  </Box>\n                  {user?.isSos && (\n                    <ReportProblemIcon\n                      css={{\n                        color: \"#C83728\",\n                        width: 16,\n                        height: 16,\n                        marginRight: \"0.3em\",\n                      }}\n                    />\n                  )}\n                  <Box position=\"relative\">\n                    <Box\n                      className=\"pin\"\n                      css={{\n                        \"--color\":\n                          device?.device_status === 1 ? \"green\" : \"red\",\n                      }}\n                    >\n                      {index.toString()}\n                    </Box>\n                  </Box>\n                </Box>\n                <Box fontSize={12} css={{ color: \"#5B5B62\" }}>\n                  {`${\n                    user.gender === \"m\"\n                      ? \"Male\"\n                      : user.gender === \"f\"\n                      ? \"Female\"\n                      : \"\"\n                  }\n              | ${user.nationality} | ${place?.name_en}`}\n                </Box>\n                {/* <Box\n                  display={{ xs: \"block\", md: \"none\" }}\n                  position=\"absolute\"\n                  right={0}\n                  top=\"calc(50% - 15px)\"\n                >\n                  <ArrowForwardIosIcon css={{ fontSize: 15 }} />\n                </Box> */}\n              </Box>\n            </Grid>\n            <Grid item md={4}>\n              <Box\n                fontSize={12}\n                textAlign=\"right\"\n                css={{ color: \"rgba(30, 30, 30, 0.5)\" }}\n                display={{ xs: \"none\", md: \"block\" }}\n              >\n                {device?.updated_at && dateStr(new Date(device?.updated_at))}\n              </Box>\n            </Grid>\n            <Grid item md={6}>\n              <Box display={{ xs: \"none\", md: \"block\" }}>\n                <OnlineTab user={user} device={device} />\n              </Box>\n            </Grid>\n            <Grid\n              md={6}\n              xs={10}\n              item\n              // spacing={2}\n              style={{ justifyContent: \"flex-end\" }}\n            >\n              <DeviceValueTab device={device} />\n            </Grid>\n          </Grid>\n        </Box>\n        <Box\n          display={{ xs: \"flex\", md: \"none\" }}\n          px={2}\n          py={1}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          css={{\n            opacity: device?.latitude && device?.longitude ? 1 : 0.5,\n            \"@media (max-width: 992px)\": { borderTop: \"1px solid #ddd\" },\n          }}\n        >\n          <OnlineTab user={user} device={device} />\n          <Box\n            fontSize={12}\n            textAlign=\"right\"\n            css={{ color: \"rgba(30, 30, 30, 0.5)\" }}\n          >\n            {device?.updated_at && dateStr(new Date(device?.updated_at))}\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n);\n\nexport const CardUserList = observer(\n  ({\n    result_userList,\n    loading_userList,\n    total = 0,\n    filter,\n    mapRef,\n    setPage,\n  }: {\n    result_userList: UsersQuarantine[];\n    loading_userList: boolean;\n    total?: number;\n    mapRef?: any;\n    filter?: Filter;\n    setPage: (pn: number) => void;\n  }) => {\n    const [userLiser, setUserLiser] = useState<UsersQuarantine[]>([]);\n    useEffect(() => {\n      setUserLiser(\n        result_userList\n        // result_userList.filter((user) => {\n        //   return user.device?.latitude && user.device?.latitude;\n        //   return user.device?.latitude && user.device?.latitude;\n        // })\n      );\n    }, [result_userList]);\n    // const total = userLiser.length;\n    const pageCount = Math.ceil(total / (filter?.perPage || 10));\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n      setPage(value);\n    };\n\n    return (\n      <Box\n        className=\"relative\"\n        css={{\n          backgroundColor: \"#fff\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n          \"@media (max-width: 992px)\": { backgroundColor: \"transparent\" },\n          height: \"100%\",\n        }}\n      >\n        {loading_userList && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n        <Box py={2} px={{ xs: 0, md: 2 }}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            mb={2}\n          >\n            <Box fontSize={14} fontWeight={600}>\n              Total {total} User\n            </Box>\n            <Box display=\"flex\" alignItems=\"center\" fontSize={14}>\n              <Box mr={1}>Sort by</Box>\n              <Select\n                labelId=\"label\"\n                id=\"select\"\n                value=\"oldest_first\"\n                disableUnderline\n                css={{ fontSize: 14, fontFamily: \"inherit\", color: \"#4684E2\" }}\n              >\n                <MenuItem value=\"oldest_first\">Oldest first</MenuItem>\n              </Select>\n            </Box>\n          </Box>\n          <Box>\n            {(userLiser || []).map((user, i) => {\n              var index =\n                ((filter?.page || 1) - 1) * (filter?.perPage || 10) + i + 1;\n              return (\n                <div\n                  onMouseEnter={() => {\n                    mapRef &&\n                      mapRef.current &&\n                      user.device?.longitude &&\n                      user.device?.latitude &&\n                      mapRef.current.focus &&\n                      mapRef.current.focus(\n                        user.device?.latitude,\n                        user.device?.longitude,\n                        index.toString()\n                      );\n                  }}\n                  onMouseLeave={() => {\n                    mapRef &&\n                      mapRef.current &&\n                      mapRef.current.reset &&\n                      mapRef.current.reset();\n                  }}\n                >\n                  <UserItem {...user} index={index} borderTop={i !== 0} />\n                </div>\n              );\n            })}\n          </Box>\n          {pageCount > 1 && (\n            <Box mt={2}>\n              <Pagination\n                count={pageCount}\n                page={filter?.page || 1}\n                onChange={handleChange}\n                size=\"small\"\n              />\n            </Box>\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Dashboard/CardSOS.tsx",["789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  Container,\n  Grid,\n  GridList,\n  GridListTile,\n  Paper,\n  LinearProgress,\n  Typography,\n  Select,\n  MenuItem,\n  Badge,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DataGrid, ColDef, ValueGetterParams } from \"@material-ui/data-grid\";\n\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\n\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n} from \"@material-ui/core/styles\";\nimport { CardTotalUserByGender } from \"./CardTotalUserByGender\";\nimport { CardNationality } from \"./CardNationality\";\nimport { CardAge } from \"./CardAge\";\nimport { CardLengthOfStay } from \"./CardLengthOfStay\";\nimport { useHistory } from \"react-router-dom\";\nimport { useListSOSUser } from \"../../services/api/user/useListSOSUser\";\nimport { dateStr } from \"../../utils\";\nimport { User } from \"../../types/user\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { DeviceValueTab, OnlineTab } from \"./CardUserList\";\nimport { userDevice } from \"../../types/device\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { Places } from \"../../types/places\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    customBadge: {\n      backgroundColor: \"green\",\n      border: \"2px solid #fff\",\n      width: 15,\n      height: 15,\n      borderRadius: \"100%\",\n    },\n  })\n);\nconst SOSItem = observer(\n  ({\n    user,\n    device,\n    fullDetail,\n    border,\n    place,\n    BTUtcTime,\n  }: {\n    user: User;\n    device?: userDevice;\n    fullDetail?: boolean;\n    place?: Places;\n    border?: boolean;\n    BTUtcTime?: any;\n  }) => {\n    const classes = useStyles();\n    // console.log(\"BTUtcTime\",BTUtcTime);\n    return (\n      <>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          py={2}\n          borderBottom={border ? \"1px solid #ddd\" : \"\"}\n        >\n          <Box display=\"flex\">\n            <Badge\n              overlap=\"circle\"\n              variant=\"dot\"\n              classes={{ badge: classes.customBadge }}\n            >\n              <Avatar css={{ width: 32, height: 32 }} src={user?.avatar}>\n                {user?.name.substring(0, 1)}\n              </Avatar>\n            </Badge>\n            <Box mx={3}>\n              <Box fontWeight={600} display=\"flex\">\n                {`${user?.name} ${user?.surname}`}\n                {!fullDetail && (\n                  <Box\n                    ml={2}\n                    mx={{ xs: 0, md: 2 }}\n                    mt={{ xs: 1, md: 0 }}\n                    css={{ color: \"#C83728\" }}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    fontSize={12}\n                    fontWeight={400}\n                  >\n                    <WarningIcon fontSize=\"small\" />\n                    <Box ml={0.5}>{dateStr(new Date(BTUtcTime))}</Box>\n                  </Box>\n                )}\n              </Box>\n              <Box display=\"flex\" fontSize={12} flexWrap=\"wrap\">\n                <Box css={{ color: \"#5B5B62\" }}>\n                  {`${\n                    user?.gender === \"m\"\n                      ? \"Male\"\n                      : user?.gender === \"f\"\n                      ? \"Female\"\n                      : \"\"\n                  }\n              | ${user?.nationality} | ${place?.name_en || user?.yatch_name}`}\n                </Box>\n                {fullDetail && (\n                  <>\n                    <Box\n                      mx={{ xs: 0, md: 2 }}\n                      mt={{ xs: 1, md: 0 }}\n                      css={{ color: \"#C83728\" }}\n                      display=\"flex\"\n                      alignItems=\"center\"\n                    >\n                      <WarningIcon fontSize=\"small\" />\n                      <Box ml={0.5}>{dateStr(new Date(user.updated_at))}</Box>\n                    </Box>\n                    <Box mx={2} display={{ xs: \"none\", md: \"block\" }}>\n                      <OnlineTab user={user} device={device} />\n                    </Box>\n                    <Box\n                      mx={2}\n                      display={{ xs: \"none\", md: \"block\" }}\n                      css={{ minWidth: 250 }}\n                    >\n                      <DeviceValueTab device={device} />\n                    </Box>\n                  </>\n                )}\n              </Box>\n            </Box>\n          </Box>\n          <Box display={{ xs: \"none\", md: \"block\" }}>\n            <CheckIcon color=\"primary\" />\n          </Box>\n          <Box display={{ xs: \"block\", md: \"none\" }}>\n            <ChevronRightIcon css={{ color: \"#A9A2A2\" }} />\n          </Box>\n        </Box>\n      </>\n    );\n  }\n);\n\nexport const CardSOS = observer(({ fullDetail }: { fullDetail?: boolean }) => {\n  const history = useHistory();\n  const [page, setPage] = useState<number>(1);\n  const [pageCount, setPageCont] = useState<number>(0);\n  const perPage = 10;\n\n  const { result_userListSOS_raw, loading_userListSOS } = useListSOSUser();\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    console.log(\"result_userListSOS_raw\",result_userListSOS_raw);\n    setTotal(result_userListSOS_raw.length);\n    setPageCont(Math.ceil(result_userListSOS_raw.length / (perPage || 10)));\n  }, [result_userListSOS_raw]);\n\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  return (\n    <Box\n      css={{\n        display: \"flex\",\n        flex: 1,\n        minHeight: \"100%\",\n        flexFlow: \"column\",\n        // flexDirection: \"column\",\n        borderRadius: 10,\n        \"@media (min-width: 991px)\": { backgroundColor: \"#fff\" },\n      }}\n      className=\"relative\"\n    >\n      {loading_userListSOS && (\n        <LinearProgress\n          style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n        />\n      )}\n      <Box py={2} px={{ xs: 0, md: 2 }}>\n        <Box\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          mb={2}\n        >\n          <Box fontSize={14} fontWeight={600}>\n            {fullDetail ? `Total ${total} User` : `SOS user`}\n          </Box>\n          <Box display=\"flex\" alignItems=\"center\" fontSize={14}>\n            <Box mr={1}>Sort by</Box>\n            <Select\n              labelId=\"label\"\n              id=\"select\"\n              value=\"oldest_first\"\n              disableUnderline\n              css={{ fontSize: 14, fontFamily: \"inherit\", color: \"#4684E2\" }}\n            >\n              <MenuItem value=\"oldest_first\">Oldest first</MenuItem>\n            </Select>\n          </Box>\n        </Box>\n        <Box\n          css={{\n            \"@media (max-width: 992px)\": {\n              backgroundColor: \"#fff\",\n              borderRadius: 5,\n            },\n          }}\n          p={{ xs: 2, md: 0 }}\n        >\n          {(result_userListSOS_raw || []).map((user, i, BTUtcTime) => {\n            // console.log(\"user\", user);\n            if(user.BTUtcTime != null){\n              return (\n                <SOSItem\n                  {...user}\n                  fullDetail={fullDetail}\n                  border={i !== result_userListSOS_raw.length - 1}\n                />\n              );\n            }\n              \n          })}\n        </Box>\n        {pageCount > 1 && (\n          <Box mt={2}>\n            <Pagination\n              count={pageCount}\n              page={page || 1}\n              onChange={handleChange}\n              size=\"small\"\n            />\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n});\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/SwiperUserLists.tsx",["821","822","823","824","825","826"],"import { Box, LinearProgress } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Filter, UsersQuarantine } from \"../../types/user\";\nimport { UserItem } from \"../Dashboard/CardUserList\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport NavigateNextRoundedIcon from \"@material-ui/icons/NavigateNextRounded\";\nimport { realpath } from \"fs\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\n\nexport const SwiperUserLists = observer(\n  ({\n    result_userList,\n    loading_userList,\n    total = 0,\n    filter,\n    mapRef,\n    setPage,\n  }: {\n    result_userList: UsersQuarantine[];\n    loading_userList: boolean;\n    total?: number;\n    mapRef?: any;\n    filter?: Filter;\n    setPage: (pn: number) => void;\n  }) => {\n    const [userLiser, setUserLiser] = useState<UsersQuarantine[]>([]);\n    useEffect(() => {\n      setUserLiser([...userLiser, ...result_userList]);\n    }, [result_userList]);\n    const pageCount = Math.ceil(total / (filter?.perPage || 10));\n    const page = filter?.page || 1;\n    const ref = useRef<{\n      users?: UsersQuarantine[];\n    }>();\n    useEffect(() => {\n      if (!ref.current) {\n        ref.current = {};\n      }\n      ref.current.users = userLiser;\n    }, [userLiser]);\n    const focusMap = useCallback(\n      (realIndex: number) => {\n        var index = realIndex + 1;\n        if (realIndex === 0) {\n          mapRef &&\n            mapRef.current &&\n            userLiser[realIndex]?.device?.longitude &&\n            userLiser[realIndex]?.device?.latitude &&\n            mapRef.current.focus &&\n            mapRef.current.focus(\n              userLiser[realIndex]?.device?.latitude,\n              userLiser[realIndex]?.device?.longitude,\n              index.toString()\n            );\n        } else if (ref.current?.users) {\n          mapRef &&\n            mapRef.current &&\n            ref.current?.users[realIndex]?.device?.longitude &&\n            ref.current?.users[realIndex]?.device?.latitude &&\n            mapRef.current.focus &&\n            mapRef.current.focus(\n              ref.current?.users[realIndex]?.device?.latitude,\n              ref.current?.users[realIndex]?.device?.longitude,\n              index.toString()\n            );\n        }\n      },\n      [userLiser.map((u) => u.id).join(\",\")]\n    );\n    return (\n      <Box\n        className=\"relative\"\n        css={{\n          backgroundColor: \"#fff\",\n          borderRadius: 5,\n          cursor: \"pointer\",\n          \"@media (max-width: 992px)\": { backgroundColor: \"transparent\" },\n          height: \"100%\",\n        }}\n      >\n        {userLiser.length > 0 && (\n          <Box py={2} pl={1} className=\"flex\">\n            <Swiper\n              observer={true}\n              spaceBetween={10}\n              slidesPerView=\"auto\"\n              onSlideChange={(swiper) => {\n                focusMap(swiper.realIndex);\n              }}\n              onSwiper={(swiper) => focusMap(swiper.realIndex)}\n            >\n              {(userLiser || []).map((user, i) => {\n                return (\n                  <SwiperSlide className=\"w-10/12\">\n                    <UserItem {...user} index={i + 1} borderTop={i !== 0} />\n                  </SwiperSlide>\n                );\n              })}\n              {page < pageCount && (\n                <SwiperSlide>\n                  <Box\n                    onClick={() => {\n                      setPage(page + 1);\n                    }}\n                    className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center shadow-md\t\"\n                  >\n                    <NavigateNextRoundedIcon />\n                  </Box>\n                </SwiperSlide>\n              )}\n            </Swiper>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceToolbar.tsx",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceHeader.tsx",["827","828","829","830"],"import {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Button,\n} from \"@material-ui/core\";\nimport { AddIcon } from \"@material-ui/data-grid\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useListBranches } from \"../../../services/api/user/useListBranches\";\nimport { SubBar } from \"../../Dashboard/Dashboard\";\nimport { GEOFENCE_PAGE_MODE, useGeofenceContext } from \"./GeofenceFormWrapper\";\n\nexport const GeoFenceBranchIdSelector = () => {\n\n\n  // console.log(\"Project-Key:\"+localStorage.getItem(\"projectKey\"))\n  // console.log(\"Token-Key:\"+localStorage.getItem(\"token\"))\n  const g = useGeofenceContext();\n  const {\n    result_branches,\n    loading_branches,\n    error_branches,\n  } = useListBranches();\n  useEffect(() => {\n    if (result_branches && result_branches[0] && !g.branchId) {\n      let name: any;\n      let search = window.location.search; // could be '?foo=bar'\n      let params = new URLSearchParams(search);\n      let branchId = params.get(\"b\");\n      const b =\n        result_branches.find((bb) => bb.id === branchId) || result_branches[0];\n      if (b) {\n        g.setCurrentBranchId(b.id);\n      }\n    }\n  }, [result_branches]);\n  return (\n    <FormControl\n      variant=\"outlined\"\n      style={{ width: \"100%\", marginLeft: \"2rem\" }}\n      disabled={(result_branches || []).length === 0}\n      required={true}\n      size=\"small\"\n      margin=\"dense\"\n    >\n      <InputLabel id=\"demo-simple-select-outlined-label\">\n        Select branch\n      </InputLabel>\n      <Select\n        disabled={(result_branches || []).length === 0}\n        labelId=\"demo-simple-select-outlined-label\"\n        label=\"Select branch\"\n        name=\"branch\"\n        value={g.branchId || \"\"}\n        onChange={(e: any) => {\n          g.setCurrentBranchId(e.target.value);\n        }}\n        fullWidth\n        required={true}\n      >\n        {result_branches?.map((v: any) => {\n          return <MenuItem value={v.id}>{v.name_en}</MenuItem>;\n        })}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport const GeoFenceHeader = () => {\n  const g = useGeofenceContext();\n  const history = useHistory();\n  return (\n    <SubBar\n      reload={false}\n      back={true}\n      title={\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          {`GEOFENCE ${g.mode.toUpperCase()}`}\n          <GeoFenceBranchIdSelector />\n        </div>\n      }\n    >\n      {g.mode === GEOFENCE_PAGE_MODE.LIST ? (\n        <Box display=\"flex\" justifyContent=\"flex-end\" className=\"w-full\">\n          <Button\n            color=\"primary\"\n            css={{\n              fontWeight: \"bold\",\n              color: \"black\",\n            }}\n            startIcon={<AddIcon />}\n            size=\"large\"\n            variant=\"text\"\n            onClick={() => {\n              history.push(\n                `/setting/geofence/${GEOFENCE_PAGE_MODE.add}?b=${g.branchId}`\n              );\n            }}\n          >\n            ADD NEW FENCE\n          </Button>\n        </Box>\n      ) : (\n          <></>\n        )}\n    </SubBar>\n  );\n}; //\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceFormWrapper.tsx",["831","832","833","834","835","836"],"import { Container, makeStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { ReactElement } from \"react\";\nimport { useCreateGeofence } from \"../../../services/api/geofence/useCreateGeofence\";\nimport { useDeleteGeofence } from \"../../../services/api/geofence/useDeleteGeofence\";\nimport { useListAllGeofence } from \"../../../services/api/geofence/useListAllGeofence\";\nimport { useReadPlace } from \"../../../services/api/geofence/useReadPlace\";\nimport { useUpdateGeofence } from \"../../../services/api/geofence/useUpdateGeofence\";\nimport { usePlace } from \"../../../services/api/Options/usePlace\";\nimport { useListAllUser } from \"../../../services/api/user/useListAllUser\";\nimport { webStore } from \"../../../stores/webStore\";\nimport {\n  createStyles,\n  Theme,\n  Theme as ThemeNative,\n} from \"@material-ui/core/styles\";\nimport {\n  GeofenceCreateInput,\n  GeofenceUpdateInput,\n} from \"../../../types/geofence\";\nimport { Places } from \"../../../types/places\";\nimport { User } from \"../../../types/user\";\nimport { Geofence } from \"./Geofence\";\nexport enum GEOFENCE_PAGE_MODE {\n  LIST = \"LIST\",\n  add = \"add\",\n  edit = \"edit\",\n}\nexport type GEOFENCE_PAGE_MODE_STR = keyof typeof GEOFENCE_PAGE_MODE;\nconst useStyles2 = makeStyles((ThemeNative: ThemeNative) =>\n  createStyles({\n    formControl: {\n      // margin: ThemeNative.spacing(1),\n    },\n    selectEmpty: {\n      marginTop: ThemeNative.spacing(2),\n    },\n    form: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: \"auto\",\n      width: \"fit-content\",\n    },\n    formControl2: {\n      marginTop: ThemeNative.spacing(2),\n      minWidth: 120,\n    },\n    formControlLabel: {\n      marginTop: ThemeNative.spacing(1),\n    },\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    paper: {\n      backgroundColor: ThemeNative.palette.background.paper,\n      border: \"2px solid #000\",\n      boxShadow: ThemeNative.shadows[5],\n      padding: ThemeNative.spacing(2, 4, 3),\n      minWidth: \"80%\",\n      minHeight: \"80%\",\n    },\n    // datagrid: {\n    //   zIndex:1\n    // },\n  })\n);\n\nconst useGeofenceState = ({ mode }: { mode: GEOFENCE_PAGE_MODE_STR }) => {\n  const {\n    result_geofenceList,\n    loading_geofenceList,\n    fire_geofenceList,\n  } = useListAllGeofence();\n\n  const [geofenceForm, setGeofenceFormData] = useState<\n    | {\n        geofence: GeofenceCreateInput | GeofenceUpdateInput;\n        places: {\n          name_en: string;\n          id: string;\n          name_th: string;\n          created_at: string;\n        }[];\n        users: Partial<User>[];\n        distype: \"m\" | \"km\";\n      }\n    | undefined\n  >();\n  // console.log(\"geofenceForm\", geofenceForm);\n\n  const { result_userList, loading_userList, total } = useListAllUser({\n    startDate: webStore.startDate || new Date(),\n    endDate: webStore.endDate || new Date(),\n    filter_temp: \"\",\n    filter_wear: \"\",\n    filter_battery: \"\",\n    filter_yacht_name: \"\",\n    filter_Keyword: \"\",\n    page: 1,\n    perPage: 100,\n  });\n  const [isDrawing, setIsDrawing] = useState<boolean>(false);\n  const [geofenceId, setCurrentGeofenceId] = useState<string | undefined>(\n    undefined\n  );\n  const { fire_geofence_delete, loading_geofence_delete } = useDeleteGeofence();\n  const [branchId, setCurrentBranchId] = useState<string | undefined>(\n    undefined\n  );\n  const { enqueueSnackbar } = useSnackbar();\n  const refreshForm = () => {\n    if (geofenceForm) setGeofenceFormData({ ...geofenceForm });\n  };\n  const uiStyle = useStyles2();\n  const useStyles = makeStyles((theme: Theme) => ({\n    textfield: {\n      height: 10,\n    },\n    geofenceCard: {\n      \"&:hover\": {\n        backgroundColor: \"#F4F5FC !important\",\n        color: \"var(--primary)\",\n      },\n    },\n  }));\n  const setFormInitialData = () => {\n    setGeofenceFormData({\n      geofence: {\n        name: \"\",\n\n        coordinates: [],\n        branch_id: branchId || \"\",\n      },\n      places: [],\n      users: [],\n      distype: \"m\",\n    });\n  };\n\n  const classes = useStyles();\n  return {\n    classes,\n    result_userList,\n    loading_userList,\n    total,\n    mode,\n    uiStyle,\n    result_geofenceList,\n    loading_geofenceList,\n    setFormInitialData,\n    fire_geofenceList,\n    geofenceForm,\n    setGeofenceFormData,\n    isDrawing,\n    setIsDrawing,\n    geofenceId,\n    setCurrentGeofenceId,\n    branchId,\n    setCurrentBranchId,\n    fire_geofence_delete,\n    loading_geofence_delete,\n    enqueueSnackbar,\n    refreshForm,\n  };\n};\ntype GeofenceState = ReturnType<typeof useGeofenceState>;\nconst GeofenceContext = React.createContext<GeofenceState | undefined>(\n  undefined\n);\nexport const useGeofenceContext = () => {\n  const ctx = React.useContext(GeofenceContext);\n  if (!ctx) {\n    throw new Error(\"Must Wrap inside wrapper\");\n  }\n  return ctx;\n};\nexport const GeofenceWrapper = ({\n  children,\n  mode,\n}: {\n  mode: GEOFENCE_PAGE_MODE;\n  children: ReactElement;\n}) => {\n  return (\n    <Container maxWidth=\"lg\" className=\"py-4\">\n      <GeofenceContext.Provider value={useGeofenceState({ mode })}>\n        {children}\n      </GeofenceContext.Provider>\n    </Container>\n  );\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceForm.tsx",["837","838","839","840","841","842","843","844","845","846","847","848"],"import { Global, css } from \"@emotion/react\";\n\nimport {\n  Paper,\n  Box,\n  TextField,\n  FormControl,\n  Select,\n  Checkbox,\n  InputLabel,\n  MenuItem,\n  Button,\n  CircularProgress,\n  Backdrop,\n  Container,\n  DialogActions,\n  DialogContentText,\n  Fade,\n  Modal,\n  Dialog,\n  Avatar,\n} from \"@material-ui/core\";\nimport {\n  CellParams,\n  ColDef,\n  DataGrid,\n  GridApi,\n  LinkOperator,\n  ValueGetterParams,\n} from \"@material-ui/data-grid\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { useGeofenceContext } from \"./GeofenceFormWrapper\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport { useReadPlace } from \"../../../services/api/geofence/useReadPlace\";\nimport _ from \"lodash\";\nimport { User } from \"../../../types/user\";\nexport const GeofenceForm = observer(\n  (p: {\n    handleSave: (\n      f: ReturnType<typeof useGeofenceContext>[\"geofenceForm\"],\n      d: {\n        restrict: \"byUser\" | \"no\";\n        placeIds: string[];\n        userIds: string[];\n      }\n    ) => void;\n    saving: boolean;\n  }) => {\n    const [openPlaceModal, set_openPlaceModal] = useState<boolean>(false);\n    const [openUserModal, set_openUserModal] = useState<boolean>(false);\n    const [restrict, setRestrict] = useState<\"byUser\" | \"no\">(\"no\");\n    const [placeslist, setPlaceslist] = useState([\n      { name_en: \"\", id: \"\", name_th: \"\", created_at: \"\" },\n    ]); //ข้อมูลที่อยู่เมื่อเลือก branch\n    const [alluserinplace, setAlluserinplace] = useState<Partial<User>[]>([\n      { id: \"\", name: \"\", surname: \"\" },\n    ]); //ข้อมูล places ที่เลือก\n    const { fire_placesRead, fire_alluserPlacesRead } = useReadPlace(\"\");\n\n    const g = useGeofenceContext();\n\n    const onSelectBranch = async () => {\n      if (!g.branchId) {\n        return;\n      }\n      const param = g.branchId;\n      let placesData: any;\n      let getPlace: any;\n      getPlace = fire_placesRead(param);\n      placesData = await getPlace.then(({ data }: any) => {\n        return data.data;\n      });\n      setPlaceslist(placesData);\n    };\n    useEffect(() => {\n      onSelectBranch();\n    }, [g.branchId]);\n    ///\n    const afterSelectPlaces = async () => {\n      const param = g.geofenceForm?.places || [];\n      let getUserInPlace: any;\n      let Data: any;\n\n      Data = [];\n      for (let index = 0; index < param.length; index++) {\n        let Dataloop: any;\n        const element = param[index];\n        getUserInPlace = fire_alluserPlacesRead(element.id);\n        Dataloop = await getUserInPlace.then(({ data }: any) => {\n          // console.log(data.data)\n          if (data.data.length === 0) {\n            return [];\n          } else {\n            return data.data;\n          }\n        });\n        Data = Data.concat(Dataloop);\n      }\n      // console.log(\"==============================================================\")\n      // console.log(Data)\n      // console.log(\"==============================================================\")\n\n      if (Data.length === 0) {\n        setAlluserinplace([]);\n      } else {\n        setAlluserinplace(Data);\n      }\n    };\n    useEffect(() => {\n      afterSelectPlaces();\n    }, [(g?.geofenceForm?.places || []).map((p) => p.id).join(\",\")]);\n    ///\n\n    const formData = g.geofenceForm;\n    const disabled = !formData?.geofence.name;\n    console.log(formData);\n\n    const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\n    const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n    if (!g.geofenceForm || !formData) {\n      return <></>;\n    }\n    console.log(\"formData.places\", formData.places);\n    return (\n      <Paper className=\"lg:w-4/12 w-full lg:max-h-0\">\n        <div className=\"bg-white rounded-lg\">\n          <Box className=\"text-base\" css={{ color: \"#4B4C56\" }} p={2}>\n            <Box>Geofencer Information</Box>\n            <Box mt={3}>\n              <TextField\n                value={formData.geofence.name}\n                onChange={(e) => {\n                  formData.geofence.name = e.target.value;\n                  g.refreshForm();\n                }}\n                InputProps={{ classes: { input: g.classes.textfield } }}\n                id=\"name\"\n                placeholder=\"Name *\"\n                variant=\"outlined\"\n                css={{ width: \"100%\" }}\n              />\n            </Box>\n\n            <Box mt={2}>\n              <TextField\n                value={formData.geofence.max_distance}\n                onChange={(e) => {\n                  formData.geofence.max_distance = parseFloat(e.target.value);\n                  g.refreshForm();\n                }}\n                type=\"number\"\n                id=\"MaximumDistance\"\n                placeholder=\"Maximum distance\"\n                variant=\"outlined\"\n                css={{ width: \"70%\" }}\n                style={{ marginRight: \"3%\" }}\n              />\n              <FormControl\n                variant=\"outlined\"\n                className={g.uiStyle.formControl}\n                css={{ width: \"27%\" }}\n              >\n                <Select\n                  native\n                  value={formData.distype}\n                  onChange={(e: any) => {\n                    formData.distype = e.target.value;\n                  }}\n                >\n                  <option value={\"m\"}>m</option>\n                  <option value={\"km\"}>km</option>\n                </Select>\n              </FormControl>\n            </Box>\n            <Box mt={3}>Geofence restriction</Box>\n            <Box mt={1}>\n              <Autocomplete\n                multiple\n                className=\"w-full\"\n                options={placeslist}\n                value={formData.places}\n                open={false}\n                onOpen={() => set_openPlaceModal(true)}\n                onChange={(event, value) => {\n                  formData.places = value;\n                  g.refreshForm();\n                }}\n                disableCloseOnSelect\n                getOptionLabel={(option) => option.name_en}\n                renderOption={(option, { selected }) => (\n                  <React.Fragment>\n                    <Checkbox\n                      icon={icon}\n                      checkedIcon={checkedIcon}\n                      style={{ marginRight: 8 }}\n                      checked={selected}\n                    />\n                    {option.name_en}\n                  </React.Fragment>\n                )}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    label={\n                      placeslist.length === 0\n                        ? \"Don't have any place\"\n                        : \"Select place\"\n                    }\n                    placeholder=\"\"\n                  />\n                )}\n              />\n            </Box>\n\n            {formData.places.length > 0 && (\n              <>\n                <Box mt={1}>Target specific user</Box>\n                <Box mt={1}>\n                  <FormControl\n                    variant=\"outlined\"\n                    required={true}\n                    margin=\"dense\"\n                    className=\"w-full\"\n                  >\n                    <InputLabel id=\"select-label-strict\">\n                      Restrict user groups\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-label-strict\"\n                      label=\"Restrict user groups\"\n                      name=\"strict\"\n                      value={restrict}\n                      onChange={(e: any) => {\n                        setRestrict(e.target.value);\n                      }}\n                      fullWidth\n                      required={true}\n                    >\n                      <MenuItem value=\"no\">All User</MenuItem>\n                      <MenuItem value=\"byUser\">Restrict by user</MenuItem>\n                      {/* <MenuItem value=\"byPlace\">Restrict by place</MenuItem> */}\n                    </Select>\n                  </FormControl>\n                </Box>\n              </>\n            )}\n\n            {restrict === \"byUser\" && (\n              <Box mt={1}>\n                <Autocomplete\n                  multiple\n                  className=\"w-full\"\n                  disabled={(alluserinplace || []).length === 0}\n                  options={alluserinplace}\n                  value={formData.users}\n                  open={false}\n                  onOpen={() => set_openUserModal(true)}\n                  onChange={(event, value) => {\n                    formData.users = value;\n                    g.refreshForm();\n                  }}\n                  disableCloseOnSelect\n                  getOptionLabel={(option) =>\n                    `${option.name} ${option.surname}`\n                  }\n                  renderOption={(option, { selected }) => (\n                    <React.Fragment>\n                      <Checkbox\n                        icon={icon}\n                        checkedIcon={checkedIcon}\n                        style={{ marginRight: 8 }}\n                        checked={selected}\n                      />\n                      {`${option.name} ${option.surname}`}\n                    </React.Fragment>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label={\n                        alluserinplace.length === 0\n                          ? formData.places.length === 0\n                            ? \"Please select place first\"\n                            : \"Don't have any user in selected places\"\n                          : \"Select user\"\n                      }\n                      placeholder=\"\"\n                    />\n                  )}\n                />\n              </Box>\n            )}\n            <Box mt={4}>\n              <Button\n                disabled={disabled}\n                onClick={() => {\n                  // console.log(restrict)\n                  let placeIds: string[];\n                  let userIds: string[];\n                  placeIds = [];\n                  userIds = [];\n                  if (restrict === \"no\") {\n                    // console.log(\"all user\")\n                    for (\n                      let index = 0;\n                      index < formData.places.length;\n                      index++\n                    ) {\n                      const element = formData.places[index];\n                      placeIds.push(element.id);\n                    }\n                    // console.log(placedata)\n                  }\n                  if (restrict == \"byUser\") {\n                    // console.log(\"some user\")\n                    for (\n                      let index = 0;\n                      index < formData.users.length;\n                      index++\n                    ) {\n                      const element = formData.users[index];\n                      userIds.push(element?.id || \"\");\n                    }\n                    // console.log(userIds)\n                    if (userIds[0] === \"\" || userIds.length === 0) {\n                      return alert(`Please select user`);\n                    }\n                  }\n                  p.handleSave(formData, {\n                    restrict,\n                    placeIds,\n                    userIds,\n                  });\n                }}\n                fullWidth\n                variant=\"contained\"\n                css={css`\n                  &.MuiButtonBase-root {\n                    text-transform: none;\n                    background-color: var(--primary);\n                    color: white;\n                    height: 50px;\n                    font-weight: 700;\n                  }\n                `}\n              >\n                {p.saving && (\n                  <Box mr={2}>\n                    <CircularProgress size=\"1rem\" color=\"inherit\" />\n                  </Box>\n                )}\n                SAVE\n              </Button>\n            </Box>\n          </Box>\n        </div>\n        <DatagridSearchModal\n          closeModal={() => set_openUserModal(false)}\n          open={openUserModal}\n          values={(g.geofenceForm.users || []).map((id) => id)}\n          rows={alluserinplace}\n          cols={[\n            {\n              field: \"Name\",\n              width: 300,\n              renderCell: (params: CellParams) => (\n                <strong style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Avatar\n                    css={{ width: 32, height: 32, marginRight: 10 }}\n                    src={params.row.avatar}\n                  >\n                    {params.row.name.substring(0, 1)}\n                  </Avatar>\n                  {[\n                    params.row.title_name,\n                    params.row.name,\n                    params.row.surname,\n                  ].join(\" \")}\n                </strong>\n              ),\n            },\n            { field: \"surname\", width: 200 },\n            { field: \"phone_number\", width: 200 },\n            { field: \"age\", width: 200 },\n            { field: \"nationality\", width: 200 },\n\n            { field: \"date_of_birth\", width: 200 },\n            { field: \"email\", width: 200 },\n            { field: \"gender\", width: 200 },\n          ]}\n          onSubmit={(value) => {\n            console.log(\"value\", value);\n            formData.users = value;\n            g.refreshForm();\n          }}\n        />\n        <DatagridSearchModal\n          closeModal={() => set_openPlaceModal(false)}\n          open={openPlaceModal}\n          rows={placeslist}\n          cols={[\n            { field: \"name_th\", width: 200 },\n            { field: \"name_en\", width: 200 },\n            { field: \"created_at\", width: 200 },\n          ]}\n          values={(g.geofenceForm.places || []).map((id) => id)}\n          onSubmit={(value) => {\n            console.log(\"value\", value);\n            formData.places = value;\n            g.refreshForm();\n          }}\n        />\n      </Paper>\n    );\n  }\n);\ntype DatagridSearch = {\n  open: boolean;\n  values: any[];\n  cols: ColDef[];\n  rows: any[];\n\n  onSubmit: (t: any[]) => void;\n  closeModal: () => void;\n};\nexport const DatagridSearchModal = (p: DatagridSearch) => {\n  const g = useGeofenceContext();\n  if (!g.geofenceForm) {\n    return <></>;\n  }\n  return (\n    <Dialog\n      open={p.open}\n      onClose={p.closeModal}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      maxWidth={\"xl\"}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div style={{ width: \"80vw\", padding: \"3rem\" }}>\n        {p.open ? <DatagridSearchModalInner {...p} /> : <></>}\n      </div>\n    </Dialog>\n  );\n};\nconst DatagridSearchModalInner = (p: DatagridSearch) => {\n  const [keyword, onSearch] = useState(\"\");\n  const apiRef = React.useRef<any>(null);\n  const [rowIds, setSelection] = React.useState<(string | number)[]>(\n    p.values.map(({ id }) => id)\n  );\n  const [_rows, setRows] = useState<any[]>([]);\n  const [apiReady, setApiReady] = useState<boolean>(false);\n  const toggle = (rowId: string | number) => {\n    if (rowIds.indexOf(rowId) >= 0) {\n      setSelection(rowIds.filter((r) => r !== rowId));\n    } else {\n      setSelection([...rowIds, rowId]);\n    }\n  };\n  const toggleAll = () => {\n    let isSelectAll = _.every(p.rows, (r) => rowIds.indexOf(r.id) >= 0);\n    if (isSelectAll) {\n      setSelection([]);\n    } else {\n      setSelection([...p.rows.map((r) => r.id)]);\n    }\n  };\n  useEffect(() => {\n    setRows([\n      ...p.rows.filter((r) => {\n        if (!r) {\n          return false;\n        }\n        const search = _.values(r)\n          .filter(\n            (k) =>\n              k && typeof k === \"string\" && k.indexOf && k.indexOf(\"_at\") < 0\n          )\n          .join(\"\");\n\n        return (\n          search.indexOf(keyword) >= 0 ||\n          search.toUpperCase().indexOf(keyword) >= 0 ||\n          search.toLowerCase().indexOf(keyword) >= 0 ||\n          search.toUpperCase().indexOf(keyword.toLowerCase()) >= 0 ||\n          search.toLowerCase().indexOf(keyword.toLowerCase()) >= 0 ||\n          search.toUpperCase().indexOf(keyword.toUpperCase()) >= 0 ||\n          search.toLowerCase().indexOf(keyword.toUpperCase()) >= 0 ||\n          !keyword\n        );\n      }),\n    ]);\n  }, [keyword]);\n\n  useEffect(() => {\n    if (!apiReady) {\n      return;\n    }\n    const rows = apiRef.current?.getRowModels();\n    const selectedIds: any[] = [];\n\n    rows?.forEach((r: any) => {\n      if (rowIds.indexOf(r.id) >= 0) {\n        selectedIds.push(r.id);\n      }\n    });\n\n    apiRef.current?.selectRows(selectedIds);\n  }, [_rows, apiReady, rowIds]);\n\n  return (\n    <div>\n      <DialogContentText>\n        <Box css={{ backgroundColor: \"#fff\" }} borderRadius={2}>\n          <TextField\n            type=\"search\"\n            id=\"outlined-basic\"\n            label=\"Search\"\n            variant=\"outlined\"\n            style={{ width: \"30%\" }}\n            onChange={(e: any) => onSearch(e.target.value)}\n          />\n        </Box>\n      </DialogContentText>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          checkboxSelection\n          onColumnHeaderClick={(param) => {\n            if (param.field === \"__check__\") {\n              toggleAll();\n            }\n          }}\n          onRowSelected={(param) => {\n            toggle(param.data.id);\n          }}\n          components={{\n            noRowsOverlay: (params: any) => {\n              if (!apiRef.current) {\n                apiRef.current = params.api.current;\n                setApiReady(true);\n              }\n              return <div></div>;\n            },\n          }}\n          rows={_rows}\n          columns={p.cols}\n        />\n      </div>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            console.log(\"rowIds\", rowIds);\n            p.onSubmit(p.rows.filter((r) => rowIds.indexOf(r.id) >= 0));\n            p.closeModal();\n          }}\n          color=\"primary\"\n        >\n          Submit\n        </Button>\n        <Button onClick={p.closeModal} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </div>\n  );\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GefenceMapView.tsx",["849","850","851","852","853","854","855"],"import { observer } from \"mobx-react-lite\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useGeofenceContext } from \"./GeofenceFormWrapper\";\nimport _ from \"lodash\";\n\nconst GeofenceMapViewInner = (data: any) => {\n  const g = useGeofenceContext();\n  const [googleMap, setGooglaMap] = useState<any | undefined>();\n  const activeGeofence = g.geofenceForm?.geofence;\n  const users = g.result_userList;\n  const geofences = _.uniqBy(\n    activeGeofence\n      ? [...g.result_geofenceList, activeGeofence]\n      : [...g.result_geofenceList],\n    \"id\"\n  ).filter((g) => (g.coordinates || []).length > 0);\n  // console.log(\"geofences\", geofences);\n  const setToggleDraw = g.setIsDrawing;\n  const ref = useRef<{\n    g: ReturnType<typeof useGeofenceContext>;\n    activeGeofence: typeof activeGeofence;\n  }>();\n  useEffect(() => {\n    ref.current = {\n      g: g,\n      activeGeofence: activeGeofence,\n    };\n  }, [g.geofenceForm, activeGeofence]);\n  const setCoords = (p: { lat: number; lng: number }[]) => {\n    if (!ref.current) {\n      return;\n    }\n    console.log(\"setCoords\", p);\n    if (ref.current.activeGeofence) {\n      ref.current.activeGeofence.coordinates = p;\n      ref.current.activeGeofence.radius = undefined;\n      if (ref.current.g.geofenceForm) {\n        ref.current.g.setGeofenceFormData({ ...ref.current.g.geofenceForm });\n      }\n    }\n  };\n  const setCircle = (p: { radius: number; lat: number; lng: number }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (ref.current.activeGeofence) {\n      ref.current.activeGeofence.coordinates = [{ lat: p.lat, lng: p.lng }];\n      ref.current.activeGeofence.radius = p.radius;\n      if (ref.current.g.geofenceForm) {\n        ref.current.g.setGeofenceFormData({ ...ref.current.g.geofenceForm });\n      }\n    }\n  };\n  const clearDrawing = () => {\n    if (!ref.current) {\n      return;\n    }\n    if (ref.current.activeGeofence) {\n      ref.current.activeGeofence.coordinates = [];\n      ref.current.activeGeofence.radius = undefined;\n      if (ref.current.g.geofenceForm) {\n        ref.current.g.setGeofenceFormData({ ...ref.current.g.geofenceForm });\n      }\n    }\n  };\n\n  const initMap = () => {\n    let centerLat = 0,\n      centerLng = 0;\n    let latLngCount = 0;\n    geofences.map((d: any, i: any) => {\n      d.coordinates.map((j: any, k: any) => {\n        centerLat += j.lat;\n        centerLng += j.lng;\n      });\n      latLngCount += d.coordinates.length;\n    });\n    if (latLngCount > 0) {\n      centerLat /= latLngCount;\n      centerLng /= latLngCount;\n    }\n\n    const map = new google.maps.Map(\n      document.getElementById(\"map\") as HTMLElement,\n      {\n        center: { lat: centerLat, lng: centerLng },\n        zoom: 6,\n        gestureHandling: \"greedy\",\n        mapTypeControlOptions: { mapTypeIds: [] },\n        streetViewControl: false,\n        fullscreenControl: false,\n      }\n    );\n\n    if (users) {\n      users.map((d: any, i: any) => {\n        if (d.device) {\n          new google.maps.Marker({\n            position: { lat: d.device.latitude, lng: d.device.longitude },\n            map,\n          });\n        }\n      });\n    }\n\n    let dump_count = 0;\n    geofences.map((d, i: any) => {\n      const isActive =\n        activeGeofence && activeGeofence.id && d.id === activeGeofence.id;\n      const fenceCards: any = document.getElementsByClassName(\"fencecard\");\n      // console.log(fenceCards)\n      const fenceCard = fenceCards[dump_count++];\n\n      // console.log(fenceCards)\n      if (d.radius) {\n        const circle = new google.maps.Circle({\n          fillColor: isActive ? \"rgba(70,132,226,0.3)\" : \"#96989A\",\n          fillOpacity: isActive ? 1 : 0.1,\n          strokeWeight: 2,\n          strokeColor: isActive ? \"#4684E2\" : \"#43444B\",\n          strokeOpacity: isActive ? 1 : 0.2,\n          center: {\n            lat: (d.coordinates || [])[0].lat,\n            lng: (d.coordinates || [])[0].lng,\n          },\n          radius: d.radius,\n          editable: isActive ? true : false,\n        });\n        circle.setMap(map);\n        if (fenceCard) {\n          google.maps.event.addDomListener(fenceCard, \"mouseover\", function () {\n            circle.setOptions({\n              fillColor: \"rgba(70,132,226,0.3)\",\n              fillOpacity: 1,\n              strokeWeight: 2,\n              strokeOpacity: 1,\n              strokeColor: \"#4684E2\",\n            });\n          });\n          google.maps.event.addDomListener(fenceCard, \"mouseout\", function () {\n            circle.setOptions({\n              fillColor: \"#96989A\",\n              fillOpacity: 0.1,\n              strokeWeight: 2,\n              strokeColor: \"#43444B\",\n              strokeOpacity: 0.2,\n            });\n          });\n        }\n        if (isActive) {\n          setCircle({\n            radius: circle.getRadius(),\n            lat: circle.getCenter().lat(),\n            lng: circle.getCenter().lng(),\n          });\n        }\n        google.maps.event.addListener(circle, \"radius_changed\", function () {\n          setCircle({\n            radius: circle.getRadius(),\n            lat: circle.getCenter().lat(),\n            lng: circle.getCenter().lng(),\n          });\n        });\n        google.maps.event.addListener(circle, \"center_changed\", function () {\n          setCircle({\n            radius: circle.getRadius(),\n            lat: circle.getCenter().lat(),\n            lng: circle.getCenter().lng(),\n          });\n        });\n      } else {\n        const shape = new google.maps.Polygon({\n          paths: d.coordinates,\n          fillColor: isActive ? \"rgba(70,132,226,0.3)\" : \"#96989A\",\n          fillOpacity: isActive ? 1 : 0.1,\n          strokeWeight: 2,\n          strokeColor: isActive ? \"#4684E2\" : \"#43444B\",\n          strokeOpacity: isActive ? 1 : 0.2,\n          editable: isActive ? true : false,\n        });\n        shape.setMap(map);\n        if (fenceCard) {\n          google.maps.event.addDomListener(fenceCard, \"mouseover\", function () {\n            shape.setOptions({\n              fillColor: \"rgba(70,132,226,0.3)\",\n              fillOpacity: 1,\n              strokeWeight: 2,\n              strokeOpacity: 1,\n              strokeColor: \"#4684E2\",\n            });\n          });\n          google.maps.event.addDomListener(fenceCard, \"mouseout\", function () {\n            shape.setOptions({\n              fillColor: \"#96989A\",\n              fillOpacity: 0.1,\n              strokeWeight: 2,\n              strokeColor: \"#43444B\",\n              strokeOpacity: 0.2,\n            });\n          });\n        }\n        google.maps.event.addListener(\n          shape.getPath(),\n          \"insert_at\",\n          function (index, obj) {\n            const coords = shape\n              .getPath()\n              .getArray()\n              .map((coord: any) => {\n                return {\n                  lat: coord.lat(),\n                  lng: coord.lng(),\n                };\n              });\n            setCoords(coords);\n          }\n        );\n        google.maps.event.addListener(\n          shape.getPath(),\n          \"set_at\",\n          function (index, obj) {\n            const coords = shape\n              .getPath()\n              .getArray()\n              .map((coord: any) => {\n                return {\n                  lat: coord.lat(),\n                  lng: coord.lng(),\n                };\n              });\n            setCoords(coords);\n          }\n        );\n        const coords = shape\n          .getPath()\n          .getArray()\n          .map((coord: any) => {\n            return {\n              lat: coord.lat(),\n              lng: coord.lng(),\n            };\n          });\n        if (isActive) {\n          setCoords(coords);\n        }\n      }\n    });\n\n    // CenterLat,CenterLong\n\n    map.setCenter({ lat: centerLat, lng: centerLng }); //จุดศูนย์กลาง map\n    const drawingManager = new google.maps.drawing.DrawingManager({\n      drawingControl: false,\n      drawingControlOptions: {\n        position: google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          google.maps.drawing.OverlayType.CIRCLE,\n          google.maps.drawing.OverlayType.POLYGON,\n        ],\n      },\n      polygonOptions: {\n        fillColor: \"rgba(70,132,226,0.3)\",\n        fillOpacity: 1,\n        strokeWeight: 2,\n        strokeColor: \"#4684E2\",\n        clickable: false,\n        editable: true,\n        zIndex: 1,\n      },\n      circleOptions: {\n        fillColor: \"rgba(70,132,226,0.3)\",\n        fillOpacity: 1,\n        strokeWeight: 2,\n        strokeColor: \"#4684E2\",\n        clickable: false,\n        editable: true,\n        zIndex: 1,\n      },\n    });\n    drawingManager.setMap(map);\n\n    let lastOverlay: any;\n\n    google.maps.event.addListener(\n      drawingManager,\n      \"overlaycomplete\",\n      function (event: any) {\n        if (lastOverlay) {\n          lastOverlay.setMap(null);\n        }\n        event.overlay.overlayType = event.type;\n        lastOverlay = event.overlay; // Save it\n        if (event.type === \"circle\") {\n          const circle = event.overlay;\n          setCircle({\n            radius: circle.getRadius(),\n            lat: circle.getCenter().lat(),\n            lng: circle.getCenter().lng(),\n          });\n\n          google.maps.event.addListener(circle, \"radius_changed\", function () {\n            setCircle({\n              radius: circle.getRadius(),\n              lat: circle.getCenter().lat(),\n              lng: circle.getCenter().lng(),\n            });\n          });\n          google.maps.event.addListener(circle, \"center_changed\", function () {\n            setCircle({\n              radius: circle.getRadius(),\n              lat: circle.getCenter().lat(),\n              lng: circle.getCenter().lng(),\n            });\n          });\n        } else {\n          const polygon = event.overlay;\n          const coords = polygon\n            .getPath()\n            .getArray()\n            .map((coord: any) => {\n              return {\n                lat: coord.lat(),\n                lng: coord.lng(),\n              };\n            });\n          setCoords(coords);\n\n          google.maps.event.addListener(\n            polygon.getPath(),\n            \"insert_at\",\n            function (index, obj) {\n              const coords = polygon\n                .getPath()\n                .getArray()\n                .map((coord: any) => {\n                  return {\n                    lat: coord.lat(),\n                    lng: coord.lng(),\n                  };\n                });\n              setCoords(coords);\n            }\n          );\n          google.maps.event.addListener(\n            polygon.getPath(),\n            \"set_at\",\n            function (index, obj) {\n              const coords = polygon\n                .getPath()\n                .getArray()\n                .map((coord: any) => {\n                  return {\n                    lat: coord.lat(),\n                    lng: coord.lng(),\n                  };\n                });\n              setCoords(coords);\n            }\n          );\n        }\n      }\n    );\n\n    if (document) {\n      const draw: any = document.getElementById(\"draw\");\n      const circle: any = document.getElementById(\"circle\");\n      const clearall: any = document.getElementById(\"clearall\");\n      const apply: any = document.getElementById(\"apply\");\n      const clearToggle = () => {\n        setToggleDraw(false);\n      };\n      if (apply) {\n        apply.onclick = () => {\n          drawingManager.setDrawingMode(null);\n          clearToggle();\n        };\n      }\n      if (draw) {\n        draw.onclick = () => {\n          drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n          );\n          clearToggle();\n          setToggleDraw(true);\n        };\n      }\n      if (circle) {\n        circle.onclick = () => {\n          drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n          clearToggle();\n          setToggleDraw(true);\n        };\n      }\n      if (clearall) {\n        clearall.onclick = () => {\n          drawingManager.setDrawingMode(null);\n          clearToggle();\n          if (lastOverlay) {\n            lastOverlay.setMap(null);\n          }\n          clearDrawing();\n        };\n      }\n    }\n\n    setGooglaMap(map);\n  };\n\n  useEffect(() => {\n    initMap();\n  }, []);\n\n  useEffect(() => {\n    if (typeof googleMap !== \"undefined\") {\n      googleMap.setCenter({ lat: data.data.lat, lng: data.data.long }); //จุดศูนย์กลาง map\n    }\n  }, [data.data.lat, data.data.long, googleMap]);\n\n  return <div id=\"map\" css={{ height: \"70vh\" }}></div>;\n};\n\nexport const GeofenceMapView = (data: any) => {\n  console.log(data);\n  const lat = data.data.lat;\n  const long = data.data.long;\n\n  const g = useGeofenceContext();\n\n  return (\n    <GeofenceMapViewInner\n      data={{ lat: lat, long: long }}\n      key={(g.result_geofenceList || []).map((g) => g.id).join(\"\")}\n    />\n  );\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/Setting/Geofence/GeofenceList.tsx",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/auth/useLogout.ts",["856"],"import { useHistory } from \"react-router-dom\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useLogout = () => {\n  const history = useHistory();\n\n  const [{ data, loading, error }, fire] = useCallAPI<{ status: number }>(\n    {\n      url: `/auth/logout`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_logout: data?.status,\n    loading_logout: loading,\n    error_logout: error,\n    fire_logout: () => {\n      return resolveMockup({ data: { status: 1 } }).then(() => {\n        localStorage.clear();\n        history.push(\"/\");\n      });\n      return fire().then(() => {\n        localStorage.clear();\n        history.push(\"/\");\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/useChangePassword.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/usePasswordVerifyOTP.ts",["857","858","859","860"],"import { useHistory } from \"react-router-dom\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { Profile } from \"../../../types/profile\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const usePasswordVerifyOTP = () => {\n  const history = useHistory();\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: {\n      secret_code: string;\n    };\n  }>(\n    {\n      url: `/api/v1/users/change-password/verify-otp`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n  return {\n    result_token: res?.data?.secret_code,\n    loading_verify_otp: loading,\n    error_verify_otp: error,\n    fire_verify_otp: (ref_code: string, otp: string) => {\n      return fire({\n        data: {\n          ref_code,\n          otp,\n        },\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/usePasswordRequestOTP.ts",["861"],"import { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const usePasswordRequestOTP = () => {\n  const [{ data, loading, error }, fire] = useCallAPI<{\n    data?: { phone_number: string; ref_code: string };\n  }>(\n    {\n      url: `/api/v1/users/change-password`,\n      method: \"POST\",\n    },\n    { manual: true }\n  );\n\n  return {\n    result_request_otp: data?.data?.phone_number,\n    result_request_otp_ref: data?.data?.ref_code,\n    loading_request_otp: loading,\n    error_request_otp: error,\n    fire_request_otp: (phone_number: string) => {\n      return fire({\n        data: {\n          phone_number,\n        },\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/UserInfoCard.tsx",["862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879"],"import {\n  ListItem,\n  ListItemText,\n  List,\n  Divider,\n  Button,\n  Avatar,\n  IconButton,\n  TextField,\n  CircularProgress,\n  Grid,\n  Box,\n  Modal,\n  OutlinedInput,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { User } from \"../../types/user\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { dateStr, dateStrAPI } from \"../../utils\";\nimport { useSnackbar } from \"notistack\";\nimport { useUpdateUser } from \"../../services/api/user/useUpdateUser\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { InputDate } from \"./UserCreate\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { keyframes } from \"@emotion/react\";\nimport { useClipboard } from \"use-clipboard-copy\";\n\nconst Field = observer(\n  ({\n    label,\n    value,\n    copy,\n    edit,\n    ...rest\n  }: {\n    label?: string;\n    value: any;\n    copy?: boolean;\n    edit?: any;\n  }) => {\n    const { enqueueSnackbar } = useSnackbar();\n    const clipboard = useClipboard();\n    return (\n      <Box my={1}>\n        <Box fontSize={14} css={{ color: \"rgba(255, 255, 255, 0.5)\" }}>\n          {label}\n        </Box>\n\n        <Box fontSize={18} display=\"flex\" alignItems=\"center\">\n          {copy ? (\n            <Box\n              css={{ cursor: \"pointer\" }}\n              onClick={() => {\n                clipboard.copy(value);\n                enqueueSnackbar(`copy ${value}`, {\n                  variant: \"success\",\n                  autoHideDuration: 3000,\n                  anchorOrigin: {\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                  },\n                });\n              }}\n            >\n              {value}\n              <FileCopyIcon\n                css={{ fontSize: 14, marginLeft: 5, cursor: \"pointer\" }}\n              />\n            </Box>\n          ) : (\n            value\n          )}\n          {edit && (\n            <BorderColorIcon\n              css={{ fontSize: 14, marginLeft: 5, cursor: \"pointer\" }}\n              onClick={edit}\n            />\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n\nexport const EditField = observer(\n  ({\n    isEdit,\n    label,\n    value,\n    field,\n    onClick,\n    setIsEdit,\n    type = \"text\",\n    setValue,\n    buttonName = \"SAVE\",\n  }: {\n    isEdit: boolean;\n    setIsEdit: any;\n    label: string;\n    field: string;\n    value: any;\n    onClick?: any;\n    type?: string;\n    setValue: any;\n    buttonName?: string;\n  }) => {\n    return (\n      <Modal\n        open={isEdit}\n        onClose={() => {}}\n        css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Box\n          css={{ backgroundColor: \"#fff\", width: 300, borderRadius: 5 }}\n          p={2}\n        >\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            mb={1}\n          >\n            <Box css={{ color: \"#4B4C56\" }} fontSize={14}>\n              {label}\n            </Box>\n            <Box\n              onClick={() => {\n                setIsEdit(false);\n              }}\n            >\n              <CloseIcon css={{ cursor: \"pointer\" }} />\n            </Box>\n          </Box>\n          <Box>\n            {type === \"text\" && (\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                size=\"small\"\n                value={value}\n                defaultValue={value}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setValue({\n                    label: label,\n                    type: type,\n                    field: field,\n                    value: event.target.value,\n                  });\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <Button\n                      onClick={onClick}\n                      color=\"primary\"\n                      size=\"small\"\n                      variant=\"text\"\n                    >\n                      {buttonName}\n                    </Button>\n                  ),\n                }}\n              />\n            )}\n            {type === \"date\" && (\n              <Box display=\"flex\">\n                <InputDate\n                  input={{ label: \"\", name: \"start_date\" }}\n                  value={value}\n                  onChange={(date: MaterialUiPickersDate) => {\n                    setValue({\n                      label: label,\n                      type: type,\n                      field: field,\n                      value: date ? new Date(date.toString()) : null,\n                    });\n                  }}\n                  error={false}\n                />\n                <Button\n                  onClick={onClick}\n                  color=\"primary\"\n                  size=\"small\"\n                  variant=\"text\"\n                >\n                  {buttonName}\n                </Button>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Modal>\n    );\n  }\n);\n\nexport const UserInfoCard = ({\n  user,\n  userRaw,\n  reload,\n}: {\n  user: User;\n  userRaw?: any;\n  reload: any;\n}) => {\n  // console.log(\"user\", userRaw);\n  const [isEdit, setIsEdit] = useState(false);\n  const [editValue, setEditValue] = useState<any>();\n  const [loading, setLoading] = useState(false);\n  const { fire_userUpdate } = useUpdateUser();\n  const [dateStart, setDateStart] = useState(user.date_start || \"?\");\n  const [dateEnd, setDateEnd] = useState(user.date_end || \"?\");\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item md={3} xs={12}>\n        <Field label=\"Place Name\" value={user.yatch_name.toString()} />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field label=\"Date of birth\" value={user.date_of_birth} />\n      </Grid>\n      <Grid item md={6} xs={12}>\n        <Field\n          label=\"Passport Number\"\n          value={user.passport?.passport_number.toString()}\n          copy={true}\n        />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field label=\"Length of stay\" value={user.length_of_stay.toString()} />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field\n          label=\"Start quarantine\"\n          value={dateStrAPI(dateStart)}\n          edit={() => {\n            setEditValue({\n              label: \"Edit start quarntine\",\n              value: user.date_start ? dateStrAPI(user.date_start) : \"\",\n              type: \"date\",\n              field: \"date_start\",\n            });\n            setIsEdit(true);\n          }}\n        />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field\n          label=\"End quarantine\"\n          value={dateStrAPI(dateEnd)}\n          edit={() => {\n            setEditValue({\n              label: \"Edit end quarntine\",\n              value: user.date_end ? dateStrAPI(user.date_end) : \"\",\n              type: \"date\",\n              field: \"date_end\",\n            });\n            setIsEdit(true);\n          }}\n        />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field label=\"Type\" value={user.passport?.type || \"?\"} />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field\n          label=\"Contracted hospital\"\n          value={userRaw?.hospital?.name_en || \"?\"}\n        />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field\n          label=\"Contracted agency\"\n          value={userRaw?.agency?.name_en || \"?\"}\n        />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field label=\"Departure port\" value={userRaw?.departure_port || \"?\"} />\n      </Grid>\n      <Grid item md={3} xs={12}>\n        <Field\n          label=\"Destination port\"\n          value={userRaw?.destination_port || \"?\"}\n        />\n      </Grid>\n      <EditField\n        {...editValue}\n        isEdit={isEdit}\n        setIsEdit={setIsEdit}\n        setValue={setEditValue}\n        onClick={async () => {\n          setLoading(true);\n          if (editValue.field === \"date_start\") {\n            await setDateStart(editValue.value);\n            await fire_userUpdate({ ...user, date_start: editValue.value });\n          }\n          if (editValue.field === \"date_end\") {\n            await setDateEnd(editValue.value);\n            await fire_userUpdate({ ...user, date_end: editValue.value });\n          }\n          setDateStart(editValue.value);\n          await reload();\n          setIsEdit(false);\n          setLoading(false);\n          enqueueSnackbar(`${editValue.label} success`, {\n            key: \"updateSuccess\",\n            variant: \"success\",\n            autoHideDuration: 3000,\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"right\",\n            },\n          });\n        }}\n      />\n    </Grid>\n  );\n};\n\nexport const UserProfile = ({ user, reload }: { user: User; reload: any }) => {\n  // console.log(\"user\", user);\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box mr={3}>\n        <Avatar\n          src={user.avatar}\n          alt={user.name}\n          css={{ width: \"120px\", height: \"120px\" }}\n        />\n      </Box>\n      <Box>\n        <Box fontSize=\"h6.fontSize\" fontWeight={600}>\n          {`${user.name.toString()} ${user.surname.toString()}`}\n        </Box>\n        <Box fontSize={14}>{`${\n          user.gender == \"m\"\n            ? \"Male\"\n            : user.gender == \"f\"\n            ? \"Female\"\n            : user.gender.toString()\n        }, ${user.nationality.toString()}`}</Box>\n      </Box>\n    </Box>\n  );\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/setting/useListPushData.ts",["880","881","882"],"import { useEffect, useState } from \"react\";\nimport { useCallAPI } from \"../../useCallAPI\";\nimport { PushDataArray, PushDataStatus } from \"../../../types/setting\";\n\n\nexport const useListPushData = () => {\n  const [data, setData]: any = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n\n  const MOCKUP_PUSH_DATA: PushDataArray = [\n    { status: PushDataStatus.SENDED, devices: ['Any device'], message: 'Do you still be save fjwgjiverni vgnrenviernivjgner ijgnijerngijvremnjvnmerjignm ijnj ?', time: 'Every Monday 5PM' },\n    { status: PushDataStatus.SCHEDULE, devices: ['IMEI12012012', 'IMEI12012012', 'IMEI12012012', 'IMEI12012012', 'IMEI12012012', 'IMEI12012012', 'IMEI12012012', 'IMEI12012012'], message: 'Do you still be save ?', time: '13 Jan 2020  5PM' },\n    { status: PushDataStatus.SENDED, devices: ['IMEI12012012', 'IMEI12012012', 'IMEI12012012'], message: 'Do you still be save ?', time: '13 Jan 2020  5PM' },\n  ]\n\n  useEffect(() => {\n    setTimeout(() => {\n      setData(MOCKUP_PUSH_DATA);\n      setLoading(false);\n    }, 2000);\n  }, []);\n\n  return {\n    result: data,\n    loading: loading,\n    error: error,\n  };\n};","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/useCallAPI.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListSOSUser.ts",["883","884","885","886","887"],"import { observer } from \"mobx-react-lite\";\nimport { webStore } from \"../../../stores/webStore\";\nimport { Filter, User, UserFromAPI } from \"../../../types/user\";\nimport { userDevice } from \"../../../types/device\";\nimport { useCallAPI } from \"../../useCallAPI\";\nimport { processServerUser } from \"./useReadUser\";\n// import { MOCKUP_USER } from \"./useReadUser\";\n\nexport const useListSOSUser = (filter?: Filter) => {\n  // const MOCKUP_USERS: User[] = Array.from(Array(10).keys()).map((v, index) => {\n  //   return {\n  //     ...MOCKUP_USER,\n  //     id: index.toString(),\n  //     latest_lat: 10 + index / 10,\n  //     latest_lng: 10 + index / 10,\n  //   };\n  // });\n\n  // return {\n  //   result_userList: MOCKUP_USERS,\n  //   loading_userList: false,\n  //   error_userList: false,\n  // };\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: UserFromAPI[];\n  }>({\n    url: `/api/v1/dashboard/sos`,\n    method: \"GET\",\n    // data: {\n    //   filter: filter,\n    // },\n    params: {\n      page: filter?.page || 1,\n      perPage: filter?.perPage || 10,\n    },\n  });\n\n  let user = (res?.data || []).map((v) => {\n    return processServerUser(v);\n  });\n  let BTUtcTime = (res?.data || []).map((v) => {\n    return processServerUser(v);\n  });\n\n  return {\n    result_userListSOS_raw: res?.data || [],\n    result_userListSOS: user,\n    result_userListSOS_BTUtcTime: BTUtcTime,\n    loading_userListSOS: loading,\n    error_userListSOS: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/utils/index.tsx",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/data/graphColor.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByAge.ts",["888"],"import { UserByAgeReport } from \"../../../types/overviewReport\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useReadUserByAge = (endDate?: Date, startDate?: Date) => {\n  // const MOCKUP_REPORT: UserByAgeReport = [\n  //   {\n  //     age: \"12-13\",\n  //     total: 12,\n  //   },\n  //   {\n  //     age: \"11\",\n  //     total: 13,\n  //   },\n  //   {\n  //     age: \"13-19\",\n  //     total: 24,\n  //   },\n  // ];\n  // return {\n  //   result_user_by_age: MOCKUP_REPORT,\n  //   loading_user_by_age: false,\n  //   error_user_by_age: false,\n  // };\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: {\n      age: UserByAgeReport;\n    };\n  }>({\n    url: `/api/v1/dashboard/personals`,\n    method: \"GET\",\n    data: {\n      startDate,\n      endDate,\n    },\n  });\n  return {\n    result_user_by_age: res?.data?.age,\n    loading_user_by_age: loading,\n    error_user_by_age: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadLengthOfStay.ts",["889","890","891","892","893","894","895","896","897","898","899","900"],"import { error } from \"console\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport { GeneralReport } from \"../../../types/overviewReport\";\nimport { useCallAPI } from \"../../useCallAPI\";\nimport { useListUser } from \"../user/useListUser\";\nimport { callReadUser } from \"../user/useReadUser\";\nimport { User } from \"../../../types/user\";\nimport { dateStr } from \"../../../utils\";\nimport { DateTime } from \"luxon\";\n\nexport const useReadLengthOfStay = (endDate?: Date, startDate?: Date) => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data?: {\n      group_length_of_stay: {\n        name_en: string;\n        name_th: string;\n        length_of_stay: number;\n      }[];\n    };\n  }>({\n    url: `/api/v1/dashboard/group-quarantines`,\n    method: \"GET\",\n  });\n\n  return {\n    result_length_of_stay: (res?.data?.group_length_of_stay || []).map(\n      ({ name_en, length_of_stay }) => {\n        return {\n          y: length_of_stay,\n          x: name_en,\n        };\n      }\n    ),\n    loading_length_of_stay: loading,\n    error_length_of_stay: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListBranches.ts",["901","902","903"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useListBranches = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: { id: string; name_en: string; name_th: string }[];\n  }>({\n    url: `/api/v1/branches`,\n    method: \"GET\",\n  });\n  return {\n    result_branches: res?.data || [],\n    loading_branches: loading,\n    error_branches: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useReadPlace.ts",["904","905"],"import { Places } from \"../../../types/places\";\nimport _ from \"lodash\";\nimport { callAPI, useCallAPI } from \"../../useCallAPI\";\n\nexport const useReadPlace = (branch_id: string, manual = false) => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: Places[];\n  }>(\n    {\n      url: `/api/v1/branches/${branch_id}/places`,\n      method: \"GET\",\n      data: {\n        branch_id,\n      },\n    },\n    {\n      manual,\n    }\n  );\n  const result_placesRead = res?.data;\n  return {\n    result_placesRead,\n    loading_placesRead: loading,\n    error_placesRead: error,\n    fire_placesRead: (id: string) => {\n      return fire({\n        url: `/api/v1/branches/${id}/places`,\n        method: \"GET\",\n      });\n    },\n    fire_alluserPlacesRead: (id: string) => {\n      return fire({\n        url: `/api/v1/users/places/${id}`,\n        method: \"GET\",\n      });\n    },\n  };\n};\n\n//  const GeofenceCreate = observer((props: any) => {\n//   return (\n//     <GeofenceWrapper mode={GEOFENCE_PAGE_MODE.add}>\n//       <GeofenceCreateInner />\n//     </GeofenceWrapper>\n//   );\n// });","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useListAllGeofence.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/geofence/useDeleteGeofence.ts",["906","907"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { Geofence, GeofenceDeleteInput } from \"../../../types/geofence\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useDeleteGeofence = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: Geofence;\n  }>(\n    {\n      url: `/api/v1/geofence`,\n      method: \"DELETE\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_geofence_delete: res?.data,\n    loading_geofence_delete: loading,\n    error_geofence_delete: error,\n    fire_geofence_delete: (geofence: GeofenceDeleteInput) => {\n      return fire({\n        url: `/api/v1/geofence/${geofence.id}`,\n        method: \"DELETE\",\n        data: geofence,\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useReadUser.ts",["908","909","910"],"import { User, UserFromAPI } from \"../../../types/user\";\nimport _ from \"lodash\";\nimport { callAPI, useCallAPI } from \"../../useCallAPI\";\nimport { userInfo } from \"os\";\nimport { isNull } from \"util\";\nimport { DateTime } from \"luxon\";\nimport dayjs from \"dayjs\";\nimport { dateStrAPI } from \"../../../utils\";\nimport {\n  BatteryHistoryReport,\n  BloodPressureHistoryReport,\n  HeartRateHistoryReport,\n  TempHistoryReport,\n  WearingHistoryReport,\n} from \"../../../types/personalReport\";\n// export const MOCKUP_USER: User = {\n//   id: Math.random().toString(),\n//   name: \"name\",\n//   avatar: \"https://material-ui.com/static/images/avatar/1.jpg\",\n//   surname: \"surname\",\n//   passport_id: \"11231\",\n//   gender: \"male\",\n//   nationality: \"thai\",\n//   birth_date: new Date(),\n//   imei: \"112\",\n//   isSos: false,\n//   yatch_name: \"test\",\n//   length_of_stay: 10,\n//   date_start: new Date(),\n//   date_end: new Date(),\n//   latest_lng: 10,\n//   latest_lat: 10,\n//   latest_body_temp: 10,\n//   latest_heart_rate: 10,\n//   latest_blood_pressure: \"10\",\n//   latest_device_status: true,\n//   latest_battery: \"30%\",\n//   timeStamp: new Date(),\n// };\n\nexport const processServerUser = (serverUser: UserFromAPI) => {\n  // serverUser.user.avatar = \"https://material-ui.com/static/images/avatar/1.jpg\";\n  serverUser.user.isSos = false;\n  serverUser.user.yatch_name = serverUser.place?.name_th || \"\";\n  serverUser.user.length_of_stay = serverUser.length_of_stay;\n  serverUser.user.quarantine_start = serverUser.user.quarantine_start\n    ? new Date(serverUser.user.quarantine_start)\n    : new Date();\n  serverUser.user.quarantine_end = serverUser.user.quarantine_end\n    ? new Date(serverUser.user.quarantine_end)\n    : new Date();\n\n  let device;\n  if (serverUser.device) {\n    device = serverUser.device;\n  } else if (serverUser.devices) {\n    device = _.last(serverUser.devices);\n  }\n\n  if (serverUser.devices) {\n    serverUser.user.total_step = _.sumBy(serverUser.devices, \"step\");\n  } else if (serverUser.device) {\n    serverUser.user.total_step = serverUser.device.step;\n  } else {\n    serverUser.user.total_step = \"?\";\n  }\n\n  if (device) {\n    serverUser.user.imei = device.imei;\n    serverUser.user.latest_device_status =\n      device.device_status > 0 ? true : false;\n    serverUser.user.latest_battery = device.battery;\n  }\n\n  if (device && device.heart_rate) {\n    serverUser.user.latest_heart_rate = device.heart_rate;\n  } else if (serverUser.heart_rates && serverUser.heart_rates[0]) {\n    serverUser.user.latest_heart_rate = serverUser.heart_rates[0].heart_rate;\n  } else {\n    serverUser.user.latest_heart_rate = \"?\";\n  }\n\n  if (device && device.body_temp) {\n    serverUser.user.latest_body_temp = device.body_temp;\n  } else if (serverUser.temperatures && serverUser.temperatures[0]) {\n    serverUser.user.latest_body_temp = serverUser.temperatures[0].body_temp;\n  } else {\n    serverUser.user.latest_body_temp = \"?\";\n  }\n\n  if (device && device.latitude >= 0 && device.longitude >= 0) {\n    serverUser.user.latest_lat = device.latitude;\n    serverUser.user.latest_lng = device.longitude;\n  } else if (serverUser.locations && serverUser.locations[0]) {\n    serverUser.user.latest_lat = serverUser.locations[0].latitude;\n    serverUser.user.latest_lng = serverUser.locations[0].longitude;\n  } else {\n    serverUser.user.latest_lat = 0.1;\n    serverUser.user.latest_lng = 0.1;\n  }\n\n  if (device && device.blood_systolic && device.blood_diastolic) {\n    serverUser.user.latest_blood_pressure =\n      device.blood_systolic + \"/\" + device.blood_diastolic;\n  } else if (serverUser.blood_pressures && serverUser.blood_pressures[0]) {\n    serverUser.user.latest_blood_pressure =\n      serverUser.blood_pressures[0].blood_systolic +\n      \"/\" +\n      serverUser.blood_pressures[0].blood_diastolic;\n  } else {\n    serverUser.user.latest_blood_pressure = \"?\";\n  }\n  if (!serverUser.user.latest_blood_pressure) {\n    serverUser.user.latest_blood_pressure = \"\";\n  }\n  serverUser.user.timeStamp = new Date(serverUser.updated_at);\n\n  let lastDevice = _.last(serverUser.devices);\n  if (lastDevice) {\n    serverUser.user.latest_device_timeStamp = new Date(lastDevice.updated_at);\n  }\n\n  serverUser.user.date_start = serverUser.date_start;\n  serverUser.user.date_end = serverUser.date_end;\n  return serverUser.user;\n};\n\nexport const callReadUser = (\n  userId: string,\n  endDate?: Date,\n  startDate?: Date,\n  filterHour?: string\n) => {\n  return new Promise<User>((resolve, reject) => {\n    callAPI({\n      url: `/api/v1/dashboard/quarantines/users/${userId}`,\n      method: \"GET\",\n      data: {\n        userId,\n      },\n      params: {\n        start_date: startDate,\n        end_date: endDate,\n        filter_hour: filterHour,\n      },\n    }).then((res: { data: { data: UserFromAPI } }) => {\n      if (!res) {\n        reject();\n      } else {\n        resolve(processServerUser(res?.data.data));\n      }\n    });\n  });\n};\n\nexport type ReadUserFilter = {\n  endDate: Date | string | null;\n  startDate?: Date | string | null;\n  filterHour?: number | null;\n};\nexport const useReadUser = (\n  userId: string,\n  filter: ReadUserFilter = {\n    endDate: new Date(),\n  },\n  manual = false\n) => {\n  if (filter.endDate && typeof filter.endDate !== \"string\") {\n    filter.endDate = dateStrAPI(filter.endDate);\n  }\n  if (filter.startDate && typeof filter.startDate !== \"string\") {\n    filter.startDate = dateStrAPI(filter.startDate);\n  }\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: UserFromAPI;\n  }>(\n    {\n      url: `/api/v1/dashboard/quarantines/users/${userId}`,\n      method: \"GET\",\n      data: {\n        userId,\n      },\n      params: {\n        start_date: filter.startDate,\n        end_date: filter.endDate,\n        filter_hour: filter.filterHour,\n      },\n    },\n    {\n      manual,\n    }\n  );\n  const result_userRead_raw = res?.data;\n  let result_battery_history: null | BatteryHistoryReport = null;\n  if (result_userRead_raw) {\n    result_battery_history = _.sortBy(\n      (result_userRead_raw.batteries || []).map(({ battery, created_at }) => {\n        const timestamp = new Date(created_at);\n        const diff = DateTime.fromJSDate(new Date()).diff(\n          DateTime.fromJSDate(new Date(created_at)),\n          \"days\"\n        ).days;\n\n        return {\n          battery: battery,\n          length_of_stay: Math.floor(diff),\n          timestamp: timestamp,\n        };\n      }),\n      \"length_of_stay\"\n    );\n  }\n  let result_blood_pressure_history: null | BloodPressureHistoryReport = null;\n  if (result_userRead_raw) {\n    result_blood_pressure_history = _.sortBy(\n      (result_userRead_raw.blood_pressures || []).map(\n        ({ blood_systolic, blood_diastolic, device_id, created_at }) => {\n          const timestamp = new Date(created_at);\n          const diff = DateTime.fromJSDate(new Date()).diff(\n            DateTime.fromJSDate(new Date(created_at)),\n            \"days\"\n          ).days;\n\n          return {\n            blood_pressure: blood_systolic + \"/\" + blood_diastolic,\n            blood_systolic: blood_systolic,\n            blood_diastolic: blood_diastolic,\n            length_of_stay: Math.floor(diff),\n            timestamp: timestamp,\n          };\n        }\n      ),\n      \"length_of_stay\"\n    );\n  }\n\n  let result_heart_rate_history: null | HeartRateHistoryReport = null;\n  if (result_userRead_raw) {\n    result_heart_rate_history = _.sortBy(\n      (result_userRead_raw.heart_rates || []).map(\n        ({ heart_rate, created_at }) => {\n          const timestamp = new Date(created_at);\n          const diff = DateTime.fromJSDate(new Date()).diff(\n            DateTime.fromJSDate(new Date(created_at)),\n            \"days\"\n          ).days;\n\n          return {\n            heart_rate: heart_rate,\n            length_of_stay: Math.floor(diff),\n            timestamp: timestamp,\n          };\n        }\n      ),\n      \"length_of_stay\"\n    );\n  }\n\n  let result_temp_history: null | TempHistoryReport = null;\n  if (result_userRead_raw) {\n    result_temp_history = _.sortBy(\n      (result_userRead_raw.temperatures || []).map(\n        ({ body_temp, created_at }) => {\n          const timestamp = new Date(created_at);\n          const diff = DateTime.fromJSDate(new Date()).diff(\n            DateTime.fromJSDate(new Date(created_at)),\n            \"days\"\n          ).days;\n\n          return {\n            body_temp: body_temp,\n            length_of_stay: Math.floor(diff),\n            timestamp: timestamp,\n          };\n        }\n      ),\n      \"length_of_stay\"\n    );\n  }\n\n  let result_wearing_history: null | WearingHistoryReport = null;\n  if (result_userRead_raw) {\n    result_wearing_history = _.sortBy(\n      (result_userRead_raw.device_status || []).map(\n        ({ device_status, created_at }) => {\n          const timestamp = new Date(created_at);\n          const diff = DateTime.fromJSDate(new Date()).diff(\n            DateTime.fromJSDate(new Date(created_at)),\n            \"days\"\n          ).days;\n\n          return {\n            device_status: device_status,\n            length_of_stay: Math.floor(diff),\n            timestamp: timestamp,\n          };\n        }\n      ),\n      \"length_of_stay\"\n    );\n  }\n\n  return {\n    result_userRead: res?.data ? processServerUser(res?.data) : null,\n    result_battery_history,\n    result_blood_pressure_history,\n    result_heart_rate_history,\n    result_temp_history,\n    result_wearing_history,\n    result_userRead_raw: res?.data,\n    loading_userRead: loading,\n    error_userRead: error,\n    fire_userRead: fire,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/Options/usePlace.ts",["911"],"import { Places } from \"../../../types/places\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const usePlace = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data?: Places[];\n  }>({\n    url: `/api/v1/places`,\n    method: \"GET\",\n  });\n\n  return {\n    result_places: res?.data || [],\n    loading_places: loading,\n    error_places: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useImportUser.ts",["912","913","914","915","916"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { User, UserCreateInput, UserImportInput } from \"../../../types/user\";\nimport { dateStrAPI, resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useImportUser = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: User;\n  }>(\n    {\n      url: `/api/v1/files/import/tourist`,\n      method: \"POST\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_user_import: res?.code === 1 ? res?.data : null,\n    loading_user_import: loading,\n    error_user_import: res?.code === 0 ? res?.message : null,\n    fire_user_import: (userImportInput: UserImportInput) => {\n      return new Promise((resolve, reject) => {\n        fire({\n          data: userImportInput,\n        })\n          .then(({ data: { data, code, message } }) => {\n            if (code === 0) {\n              reject(message);\n            } else {\n              resolve(data);\n            }\n          })\n          .catch((ex) => {\n            reject(ex.toString());\n          });\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByGender.ts",["917"],"import { UserByGenderReport } from \"../../../types/overviewReport\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useReadUserByGender = (endDate?: Date, startDate?: Date) => {\n  // const MOCKUP_REPORT: UserByGenderReport = {\n  //   total: 130,\n  //   total_female: 100,\n  //   total_male: 30,\n  // };\n  // return {\n  //   result_user_by_gender: MOCKUP_REPORT,\n  //   loading_user_by_gender: false,\n  //   error_user_by_gender: false,\n  // };\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: {\n      gender: UserByGenderReport;\n    };\n  }>({\n    url: `/api/v1/dashboard/personals`,\n    method: \"GET\",\n    data: {\n      startDate,\n      endDate,\n    },\n  });\n  return {\n    result_user_by_gender: res?.data?.gender,\n    loading_user_by_gender: loading,\n    error_user_by_gender: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/dashboard_report/useReadUserByNationality.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/utils/const.tsx",["918"],"export const API_PATH =\n  window.location.protocol + \"//\" + \"quarantine.pmhsolution.com\";\n\n  // console.log(window.location.protocol)\nif (window.location.protocol === \"https:\") {\n  window.location.replace(\n    `http:${window.location.href.substring(window.location.protocol.length)}`\n  );\n}\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/Map.tsx",["919","920","921","922"],"import { css, jsx } from \"@emotion/react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { ReactComponent as Pin } from \"./assets/pin.svg\";\nimport { ReactComponent as UserPin } from \"./assets/user-pin.svg\";\nimport { Box, makeStyles, Popover } from \"@material-ui/core\";\n\nfunction deviceIconStyles() {\n  return {\n    successIcon: {\n      color: \"green\",\n    },\n    errorIcon: {\n      color: \"red\",\n    },\n  };\n}\n\nexport const WPopover = ({\n  open,\n  anchorEl,\n  hoverText,\n}: {\n  open: boolean;\n  anchorEl: any;\n  hoverText?: string;\n}) => {\n  return (\n    <Popover\n      open={open}\n      anchorEl={anchorEl}\n      style={{ pointerEvents: \"none\" }}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"left\",\n      }}\n    >\n      <div\n        style={{ padding: \"0.2em\", backgroundColor: \"black\", color: \"white\" }}\n      >\n        {hoverText}\n      </div>\n    </Popover>\n  );\n};\n\nconst Marker = observer(\n  ({\n    lat,\n    lng,\n    name,\n    active,\n    hoverText,\n    onClick,\n    hilight,\n    dot,\n  }: {\n    lat: number;\n    lng: number;\n    active: boolean;\n    hilight?: boolean;\n    name: string;\n    hoverText?: string;\n    dot: boolean;\n    onClick?: () => void;\n  }) => {\n    const classes = makeStyles(deviceIconStyles)();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handlePopoverOpen = (event: any) => {\n      setAnchorEl(event.currentTarget);\n    };\n    const handlePopoverClose = () => {\n      setAnchorEl(null);\n    };\n\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          cursor: \"pointer\",\n          transition: \"all 0.5s\",\n        }}\n      >\n        <div\n          style={{\n            position: \"relative\",\n            opacity: 1,\n            transformOrigin: \"50% 100%\",\n            transition: \"all 0.25s\",\n            zIndex: hilight ? 99 : 1,\n            transform: `translate(-50%, -50%) scale(${hilight ? 1.5 : 1})`,\n          }}\n          css={css`\n            .pin path {\n              fill: ${active ? (hilight ? \"#5ad01b\" : \"green\") : \"red\"};\n            }\n          `}\n          onMouseEnter={handlePopoverOpen}\n          onMouseLeave={handlePopoverClose}\n          onClick={onClick}\n        >\n          {dot ? (\n            <UserPin style={{ width: \"1.5rem\", height: \"auto\" }} />\n          ) : (\n            <>\n              <Pin\n                style={{ width: \"2rem\", height: \"auto\" }}\n                className={`pin ${\n                  active ? classes.successIcon : classes.errorIcon\n                }`}\n                fontSize=\"large\"\n              />\n              <div\n                style={{\n                  position: \"absolute\",\n                  lineHeight: \"2rem\",\n                  color: \"white\",\n                }}\n                className=\"w-full text-center top-0 left-0 font-bold\"\n              >\n                {name}\n              </div>\n            </>\n          )}\n        </div>\n        <WPopover\n          {...{\n            open: hoverText ? open : false,\n            anchorEl: anchorEl,\n            hoverText: hoverText,\n          }}\n        />\n      </div>\n    );\n  }\n);\n\nexport const Map = observer(\n  ({\n    locations,\n    mapRef,\n  }: {\n    locations: {\n      lat: number;\n      lng: number;\n      active: boolean;\n      name: string;\n      hoverText?: string;\n      dot?: boolean;\n      onClick?: () => void;\n    }[];\n    mapRef?: any;\n  }) => {\n    let lat = 0,\n      lng = 0;\n\n    const [center, setCenter] = useState<any>();\n    const [zoom, setZoom] = useState<any>();\n    const [focusName, setFocusName] = useState<string>();\n    if (locations.length > 0) {\n      for (const l of locations) {\n        lat += l.lat;\n        lng += l.lng;\n      }\n      lat /= locations.length;\n      lng /= locations.length;\n    }\n    useEffect(() => {\n      if (mapRef) {\n        mapRef.current = {\n          focus: (lat: number, lng: number, name: string) => {\n            const valid =\n              !isNaN(lat) &&\n              !isNaN(lng) &&\n              lat > 0 &&\n              lng > 0 &&\n              Math.abs(lat) <= 90 &&\n              Math.abs(lng) <= 180;\n            if (valid) {\n              setCenter({ lat, lng });\n              setZoom(13);\n              setFocusName(name);\n            }\n          },\n          reset: () => {\n            console.log(\"reset\");\n            setCenter(undefined);\n            setZoom(undefined);\n            setFocusName(undefined);\n          },\n        };\n      }\n    }, []);\n    // console.log(center, zoom);\n\n    return (\n      // Important! Always set the container height explicitly\n      <div className=\"w-full h-full top-0 left-0 absolute\">\n        {locations.length > 0 ? (\n          <GoogleMapReact\n            key={zoom || \"default\"}\n            options={{\n              disableDoubleClickZoom: true,\n            }}\n            bootstrapURLKeys={{\n              key: \"AIzaSyAfhKE9MOf0H3VwfJJAgS_gjS9oPdkHfZQ\",\n            }}\n            center={center || { lat: lat, lng: lng }}\n            zoom={zoom || 9}\n          >\n            {locations.map((location) => {\n              return (\n                <Marker\n                  {...{\n                    hilight:\n                      center &&\n                      center.lat === location.lat &&\n                      center.lng === location.lng &&\n                      focusName === location.name,\n                    lat: location.lat,\n                    lng: location.lng,\n                    name: location.name,\n                    active: location.active,\n                    hoverText: location.hoverText,\n                    onClick: location.onClick,\n                    dot: location.dot ? location.dot : false,\n                  }}\n                />\n              );\n            })}\n          </GoogleMapReact>\n        ) : (\n          <div\n            style={{\n              top: \"50%\",\n              left: \"50%\",\n              transform: \"translate(-50%,-50%)\",\n              position: \"absolute\",\n              opacity: \"0.5\",\n            }}\n          >\n            Map Info : All locations are unknown\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/notification/useListNotifications.ts",["923","924","925"],"import { useEffect, useState } from \"react\";\nimport { NotificationArray, NotificationType } from \"../../../types/notification\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\n\nexport const useListNotifications = () => {\n  const [data, setData]: any = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n\n  const MOCKUP_NOTIFICATION: NotificationArray = [\n    { type: NotificationType.ERROR, title: 'There is new alertfaijgio sjiogejwio gjiwoejgriorwiogvrjwio jgewi fewkojgorewj ogjreio gjoierjogvjo rejfoijeroj goiwj', content: 'This is notification alert description fjio gjreiogjoerjno gjeriogjiorej iogjerio gjioerj iajgioweigjrewi jgfirewjg irejwiugj rewi', datetime: new Date(\"2021-01-31 19:44\"), read: false },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-31 17:35\"), read: false },\n    { type: NotificationType.INFO, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-31 16:04\"), read: false },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-30 17:04\"), read: false },\n    { type: NotificationType.INFO, title: 'There is new information', content: 'This is notification information description', datetime: new Date(\"2021-01-30 06:54\"), read: true },\n    { type: NotificationType.INFO, title: 'There is new information', content: 'This is notification information description', datetime: new Date(\"2021-01-24 06:44\"), read: true },\n    { type: NotificationType.INFO, title: 'There is new information', content: 'This is notification information description', datetime: new Date(\"2021-01-23 08:42\"), read: true },\n    { type: NotificationType.INFO, title: 'There is new information', content: 'This is notification information description', datetime: new Date(\"2021-01-22 11:22\"), read: true },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-21 05:02\"), read: true },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-21 02:02\"), read: true },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-20 02:01\"), read: true },\n    { type: NotificationType.ERROR, title: 'There is new alert', content: 'This is notification alert description', datetime: new Date(\"2021-01-18 00:08\"), read: true },\n  ]\n\n  useEffect(() => {\n    setTimeout(() => {\n      setData(MOCKUP_NOTIFICATION);\n      setLoading(false);\n    }, 2000);\n  }, []);\n\n  return {\n    result: data,\n    loading: loading,\n    error: error,\n  };\n};","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListAgencies.ts",["926","927","928"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { Agencies } from \"../../../types/agencies\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useListAgencies = (branch_id: string) => {\n\n\n      const [{ data: res, loading, error }, fire] = useCallAPI<{\n        data: Agencies[];\n      }>\n    ({\n      url: `/api/v1/agencies/branches/${branch_id}`,\n      method: \"GET\",\n      data: {\n        branch_id,\n      },\n    });\n    return {\n      result_agencies: res?.data || [],\n      loading_agencies: loading,\n      error_agencies: error,\n    };\n    \n\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useUploadImage.ts",["929","930","931","932","933","934"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { User, UserCreateInput } from \"../../../types/user\";\nimport { dateStrAPI, resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useUploadImage = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: number;\n    message: string;\n    data?: {\n      id: string;\n      image_url: string;\n    };\n  }>(\n    {\n      url: `/api/v1/files/images/uploads`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_upload_image: res?.data,\n    loading_upload_image: loading,\n    fire_upload_image: (formData: any) => {\n      return fire({\n        data: formData,\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useListHospital.ts",["935","936","937"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { Hospital } from \"../../../types/hospital\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useListHospital = (branch_id: string) => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    data: Hospital[];\n  }>({\n    url: `/api/v1/hospitals/branches/${branch_id}`,\n    method: \"GET\",\n    data: {\n      branch_id,\n    },\n  });\n  return {\n    result_hospital: res?.data || [],\n    loading_hospital: loading,\n    error_hospital: error,\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useCreateUser.ts",["938","939","940"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { User, UserCreateInput } from \"../../../types/user\";\nimport { dateStrAPI, resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useCreateUser = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    code: 0 | 1;\n    message: string;\n    data: User;\n  }>(\n    {\n      url: `/api/v1/users/register/tourist/quarantines`,\n      method: \"POST\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_user_create: res?.code === 1 ? res?.data : null,\n    loading_user_create: loading,\n    error_user_create: res?.code === 0 ? res?.message : null,\n    fire_user_create: (userInput: UserCreateInput) => {\n      userInput.date_of_birth = dateStrAPI(userInput.date_of_birth);\n      userInput.start_date = dateStrAPI(userInput.start_date);\n      userInput.end_date = dateStrAPI(userInput.end_date);\n      return new Promise((resolve, reject) => {\n        fire({\n          data: userInput,\n        })\n          .then(({ data: { data, code, message } }) => {\n            if (code === 0) {\n              reject(message);\n            } else {\n              resolve(data);\n            }\n          })\n          .catch((ex) => {\n            reject(ex.toString());\n          });\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/HeartRateGraph.tsx",["941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  LinearProgress,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Line } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport { useParams } from \"react-router-dom\";\nimport { timeStr } from \"../../utils\";\nimport { UserPreviewData } from \"./UserPreview\";\nimport { ResponsiveLineChart } from \"../../components/ResponsiveLineChat\";\n\nexport const HeartRateGraph = observer(\n  ({\n    data: { loading, result_heart_rate_history },\n  }: {\n    data: UserPreviewData;\n  }) => {\n    const { userId }: any = useParams();\n    const GraphHeight = 300;\n    const GraphColor = [\"#FF9A9E\"];\n    const GraphData = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\");\n      const gradient = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient.addColorStop(0, GraphColor[0]);\n      gradient.addColorStop(1, `#FECFEF`);\n      return {\n        datasets: [\n          {\n            data: (result_heart_rate_history || []).map(\n              ({ heart_rate }) => heart_rate\n            ),\n            borderColor: GraphColor[0],\n            backgroundColor: gradient,\n            fill: \"start\",\n            // pointBackgroundColor: \"transparent\",\n            // pointBorderColor: \"transparent\",\n          },\n        ],\n        labels: (result_heart_rate_history || []).map(({ timestamp }, i) =>\n          i === 0 ? \"\" : timeStr(timestamp)\n        ),\n      };\n    }; //\n    const lineProps = {\n      legend: { position: \"bottom\", display: false },\n      options: {\n        maintainAspectRatio: false,\n\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n          xAxes: [\n            {\n              gridLines: {\n                drawBorder: false,\n                display: false,\n              },\n            },\n          ],\n        },\n      },\n      data: GraphData,\n    };\n    return (\n      <Box css={{ borderRadius: 5, backgroundColor: \"#fff\", padding: 20 }}>\n        {loading && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n        <Box fontWeight={600} mb={2}>\n          Heart Rate\n        </Box>\n        <ResponsiveLineChart\n          {...{\n            device: webStore.device,\n            lineProps: lineProps,\n            GraphHeight,\n          }}\n        />\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/BloodPressureGrph.tsx",["958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  LinearProgress,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Line } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\n\nimport { useParams } from \"react-router-dom\";\nimport { timeStr } from \"../../utils\";\nimport { UserPreviewData } from \"./UserPreview\";\nimport { ResponsiveLineChart } from \"../../components/ResponsiveLineChat\";\n\nexport const BloodPressureGraph = observer(\n  ({\n    data: { loading, result_blood_pressure_history },\n  }: {\n    data: UserPreviewData;\n  }) => {\n    const { userId }: any = useParams();\n    const GraphHeight = 300;\n    const GraphColor = [\"#84FAB0\", \"#A1B1FD\"];\n    const GraphData = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\");\n      const gradient1 = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient1.addColorStop(0, GraphColor[0]);\n      gradient1.addColorStop(1, `#8FD3F4`);\n\n      const gradient2 = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient2.addColorStop(0, GraphColor[1]);\n      gradient2.addColorStop(1, `#C2E9FB`);\n\n      return {\n        datasets: [\n          {\n            label: \"blood_diastolic\",\n            data: (result_blood_pressure_history || []).map(\n              ({ blood_diastolic }) => blood_diastolic\n            ),\n            borderColor: GraphColor[1],\n            backgroundColor: gradient2,\n            fill: \"start\",\n            // pointBackgroundColor: \"transparent\",\n            // pointBorderColor: \"transparent\",\n          },\n          {\n            label: \"blood_systolic\",\n            data: (result_blood_pressure_history || []).map(\n              ({ blood_systolic }) => blood_systolic\n            ),\n            borderColor: GraphColor[0],\n            backgroundColor: gradient1,\n            fill: \"start\",\n            // pointBackgroundColor: \"transparent\",\n            // pointBorderColor: \"transparent\",\n          },\n        ],\n        labels: (result_blood_pressure_history || []).map(({ timestamp }, i) =>\n          i === 0 ? \"\" : timeStr(timestamp)\n        ),\n      };\n    };\n    const lineProps = {\n      legend: { position: \"bottom\", display: false },\n      options: {\n        maintainAspectRatio: false,\n\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n          xAxes: [\n            {\n              gridLines: {\n                drawBorder: false,\n                display: false,\n              },\n            },\n          ],\n        },\n      },\n      data: GraphData,\n    };\n\n    return (\n      <Box css={{ borderRadius: 5, backgroundColor: \"#fff\", padding: 20 }}>\n        {loading && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n        <Box fontWeight={600} mb={2}>\n          Blood pressure\n        </Box>\n        <ResponsiveLineChart\n          {...{\n            device: webStore.device,\n            lineProps: lineProps,\n            GraphHeight,\n          }}\n        />\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/BodyTempGraph.tsx",["975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991"],"import React, { Fragment, useEffect } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  CardActionArea,\n  Container,\n  Grid,\n  LinearProgress,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\nimport { Line } from \"react-chartjs-2\";\nimport { useReadUserByNationality } from \"../../services/api/dashboard_report/useReadUserByNationality\";\nimport { GRAPH_COLOR } from \"../../data/graphColor\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\n\nimport { useParams } from \"react-router-dom\";\nimport { timeStr } from \"../../utils\";\nimport { UserPreviewData } from \"./UserPreview\";\nimport { ResponsiveLineChart } from \"../../components/ResponsiveLineChat\";\nexport const BodyTempGraph = observer(\n  ({ data: { loading, result_temp_history } }: { data: UserPreviewData }) => {\n    const { userId }: any = useParams();\n    const GraphHeight = 300;\n    const GraphColor = [\"#66a6ff\", \"#3FCE67\", \"#E39090\"];\n    const GraphData = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\");\n      const gradient1 = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient1.addColorStop(0, GraphColor[0]);\n      gradient1.addColorStop(1, `#89f7fe`);\n\n      const gradient2 = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient2.addColorStop(0, GraphColor[1]);\n      gradient2.addColorStop(1, `rgba(255,255,255, 0)`);\n\n      const gradient3 = ctx.createLinearGradient(0, 0, 0, GraphHeight);\n      gradient3.addColorStop(0, GraphColor[2]);\n      gradient3.addColorStop(1, `rgba(255,255,255, 0)`);\n\n      return {\n        datasets: [\n          {\n            data: (result_temp_history || []).map(({ body_temp }) => body_temp),\n            borderColor: GraphColor[0],\n            backgroundColor: gradient1,\n            fill: \"start\",\n            // pointBackgroundColor: \"transparent\",\n            // pointBorderColor: \"transparent\",\n          },\n          {\n            label: \"minimum standard\",\n            data: (result_temp_history || []).map(({ body_temp }) => 35),\n            borderColor: GraphColor[1],\n            fill: false,\n            pointBackgroundColor: \"transparent\",\n            pointBorderColor: \"transparent\",\n            // backgroundColor: gradient2,\n          },\n          {\n            label: \"maximum standard\",\n            data: (result_temp_history || []).map(({ body_temp }) => 37.8),\n            borderColor: GraphColor[2],\n            fill: false,\n            pointBackgroundColor: \"transparent\",\n            pointBorderColor: \"transparent\",\n            // backgroundColor: gradient3,\n          },\n        ],\n        labels: (result_temp_history || []).map(({ timestamp }, i) =>\n          i === 0 ? \"\" : timeStr(timestamp)\n        ),\n      };\n    };\n    const lineProps = {\n      legend: { position: \"bottom\", display: false },\n      options: {\n        maintainAspectRatio: false,\n\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                suggestedMin: 34,\n              },\n            },\n          ],\n          xAxes: [\n            {\n              gridLines: {\n                drawBorder: false,\n                display: false,\n              },\n            },\n          ],\n        },\n      },\n      data: GraphData,\n    };\n    return (\n      <Box css={{ borderRadius: 5, backgroundColor: \"#fff\", padding: 20 }}>\n        {loading && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n        <Box fontWeight={600} mb={2}>\n          Temperature\n        </Box>\n        <ResponsiveLineChart\n          {...{\n            device: webStore.device,\n            lineProps: lineProps,\n            GraphHeight,\n          }}\n        />\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/features/UserManage/DeviceHistoryDatagrid.tsx",["992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardActionArea,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  LinearProgress,\n  Tabs,\n  Tab,\n  List,\n} from \"@material-ui/core\";\nimport { webStore } from \"../../stores/webStore\";\nimport { DataGrid, ColDef, ValueGetterParams } from \"@material-ui/data-grid\";\n\nimport { DateTime } from \"luxon\";\nimport { observer } from \"mobx-react-lite\";\nimport classes from \"*.module.css\";\nimport { useReadUserByGender } from \"../../services/api/dashboard_report/useReadUserByGender\";\n\nimport { useReadUserByAge } from \"../../services/api/dashboard_report/useReadUserByAge\";\nimport { useReadUser } from \"../../services/api/user/useReadUser\";\nimport { useListUser } from \"../../services/api/user/useListUser\";\nimport { useReadLengthOfStay } from \"../../services/api/dashboard_report/useReadLengthOfStay\";\nimport {\n  Chart,\n  PieSeries,\n  Title,\n  Legend,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport { dateStr } from \"../../utils\";\nimport {\n  BatteryHistoryReport,\n  BloodPressureHistoryReport,\n  HeartRateHistoryReport,\n  WearingHistoryReport,\n} from \"../../types/personalReport\";\nimport { UserPreviewData } from \"./UserPreview\";\n\nfunction tapsStyles() {\n  return {\n    indicator: {\n      backgroundColor: \"#fff\",\n    },\n  };\n}\n\nfunction dataGridStyles() {\n  return {\n    root: {\n      color: \"inherit\",\n      borderWidth: 0,\n    },\n  };\n}\n\nexport const DeviceHistoryDatagrid = observer(\n  ({\n    mode,\n    data: {\n      loading,\n      result_temp_history,\n      result_heart_rate_history,\n      result_blood_pressure_history,\n      result_battery_history,\n      result_wearing_history,\n    },\n  }: {\n    mode?: string;\n    data: UserPreviewData;\n  }) => {\n    const { userId }: any = useParams();\n    const classesTab = makeStyles(tapsStyles)();\n    const classesDataGrid = makeStyles(dataGridStyles)();\n\n    const history = useHistory();\n    const TYPES = [\n      {\n        name: \"Tempurature\",\n        field: \"body_temp\",\n        data: result_temp_history || [],\n      },\n      {\n        name: \"Heart Rate\",\n        field: \"heart_rate\",\n        data: result_heart_rate_history || [],\n      },\n      {\n        name: \"Blood pressrue\",\n        field: \"blood_pressure\",\n        data: result_blood_pressure_history || [],\n      },\n      {\n        name: \"Battery\",\n        field: \"battery\",\n        data: result_battery_history || [],\n      },\n      {\n        name: \"Wearing status\",\n        field: \"device_status\",\n        data: result_wearing_history || [],\n      },\n\n      // { name: \"Wearing Status\"},\n      // { name: \"Battery\"},\n    ];\n\n    const [t, setType] = useState(TYPES[0].name);\n    const [valueTabs, setValueTabs] = useState(0);\n    const selected: any = TYPES[TYPES.map(({ name }) => name).indexOf(t)];\n    const columns: ColDef[] = [\n      { field: \"timeStamp\", width: 200 },\n      { field: selected.field, width: 100 },\n      // { field: \"length_of_stay\", headerName: \"length_of_stay\", width: 200 },\n    ];\n    const data = (selected.data || []).map(({ ...d }) => {\n      return { ...d, id: d.timestamp, timeStamp: dateStr(d.timestamp) };\n    });\n\n    const handleChangeTabs = (\n      event: React.ChangeEvent<{}>,\n      newValue: number\n    ) => {\n      console.log(\"handleChangeTabs\", TYPES[newValue].name);\n      setValueTabs(newValue);\n      setType(TYPES[newValue].name);\n    };\n    console.log(\"data\", data);\n    return (\n      <Box\n        css={{\n          borderRadius: 5,\n          backgroundColor: \"#3D6BAF\",\n          color: \"#fff\",\n          height: \"calc(100vh - 10rem)\",\n        }}\n      >\n        {loading && (\n          <LinearProgress\n            style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n          />\n        )}\n\n        <Tabs\n          value={valueTabs}\n          textColor=\"inherit\"\n          variant=\"scrollable\"\n          onChange={handleChangeTabs}\n          css={{ paddingTop: 10 }}\n          classes={{\n            indicator: classesTab.indicator,\n          }}\n        >\n          {TYPES.map(({ name }) => (\n            <Tab\n              label={name}\n              css={{\n                borderBottom: \"1px solid rgba(255,255,255,0.5)\",\n              }}\n            />\n          ))}\n        </Tabs>\n        \n        <Box\n          css={{\n            width: \"100%\",\n            height: \"85%\",\n            // height: \"calc(100vh - 10rem)\",\n            overflow: \"scroll\",\n            \"::-webkit-scrollbar\": {\n              display: \"none\",\n            },\n            \" .MuiDataGrid-root\": {\n              borderWidth: 0,\n              color: \"inherit\",\n            },\n          }}\n          mt={2}\n          px={2}\n          id=\"tableDeviceHistoryDatagrid\"\n        >\n          <List css={{maxHeight: '100%', overflow: 'auto', height: '100%'}}>\n            <DataGrid\n              rows={data || []}\n              columns={columns}\n              // pageSize={21}\n              pagination\n              disableSelectionOnClick={true}\n              headerHeight={0}\n              autoHeight={true}\n              scrollbarSize={0}\n              rowHeight={37}\n              hideFooterPagination={true}\n              hideFooterRowCount={true}\n              // loading={true}\n              // rowsPerPageOptions={[20, 50, 100]}\n              // density=\"compact\"\n              // autoPageSize={true}\n            />\n          </List>\n        </Box>\n      </Box>\n    );\n  }\n);\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/services/api/user/useUpdateUser.ts",["1024","1025","1026"],"import { TempHistoryReport } from \"../../../types/personalReport\";\nimport { User, UserUpdateInput } from \"../../../types/user\";\nimport { resolveMockup } from \"../../../utils\";\nimport { useCallAPI } from \"../../useCallAPI\";\n\nexport const useUpdateUser = () => {\n  const [{ data: res, loading, error }, fire] = useCallAPI<{\n    user: User;\n  }>(\n    {\n      url: `/user/update`,\n      method: \"POST\",\n    },\n    {\n      manual: true,\n    }\n  );\n  return {\n    result_userUpdate: res?.user,\n    loading_userUpdate: loading,\n    error_userUpdate: error,\n    fire_userUpdate: (user: User) => {\n      return resolveMockup({\n        data: {\n          ...user,\n        },\n      } as { data: User });\n      return fire({\n        data: user,\n      });\n    },\n  };\n};\n","/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/types/setting.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/types/notification.ts",[],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/components/ResponsiveLineChat.tsx",[],["1027","1028"],"/Applications/MAMP/htdocs/new-aqua-dashboard-V2/new-aqua-dashboard/src/firebase.js",["1029","1030","1031"],"import firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport { API_PATH } from \"./utils/const\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDzef8AiE3Fw8jPGnvJZHEreKYgl4kGWp0\",\n  authDomain: \"aqua-dashboard.firebaseapp.com\",\n  databaseURL: \"https://aqua-dashboard.firebaseio.com\",\n  projectId: \"aqua-dashboard\",\n  storageBucket: \"aqua-dashboard.appspot.com\",\n  messagingSenderId: \"515081409051\",\n  appId: \"1:515081409051:web:e5ecb915c3c9818f405ebe\",\n  measurementId: \"G-RRXEWY2CJD\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\n\nexport const getToken = (setTokenFound) => {\n  return messaging.getToken({vapidKey: 'BNwAxADuq0dpiRcQg2QysgSAt6oynpkPfg_7vYRNify9Hy7p7ynUmvDNXUCLaNjCH5UFiN4MenMxv3GMof39E6g'}).then((currentToken) => {\n    if (currentToken) {\n      console.log('current token for client: ', currentToken);\n      axios.put(API_PATH+'/api/v1/settings/notifications/push-token', \n        { \n          fcm_push_token: currentToken \n        }, \n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Project-Key\": localStorage.getItem(\"projectKey\"),\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          }\n        }\n      ).then((res) => {\n        console.log(\"data2\",res.data.message)\n      }).catch((error) => {\n        console.log(\"ERROR2\",error)\n      });\n      setTokenFound(true);\n      // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n\n        // this.setState({ name: '', email: '' })\n    } else {\n      console.log('No registration token available. Request permission to generate one.');\n      setTokenFound(false);\n  \n      // shows on the UI that permission is required \n    }\n  }).catch((err) => {\n    console.log('An error occurred while retrieving token. ', err);\n    // catch error while creating client token\n  });\n}\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    messaging.onMessage((payload) => {\n      resolve(payload);\n    });\n});",["1032","1033"],{"ruleId":"1034","severity":1,"message":"1035","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1038","replacedBy":"1039"},{"ruleId":"1040","replacedBy":"1041"},{"ruleId":"1034","severity":1,"message":"1035","line":1,"column":38,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":46},{"ruleId":"1034","severity":1,"message":"1042","line":15,"column":10,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1043","line":36,"column":17,"nodeType":"1036","messageId":"1037","endLine":36,"endColumn":28},{"ruleId":"1034","severity":1,"message":"1044","line":44,"column":10,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1045","line":44,"column":20,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":37},{"ruleId":"1034","severity":1,"message":"1046","line":1,"column":8,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1047","line":3,"column":3,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1048","line":4,"column":3,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1049","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1050","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1051","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1052","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1053","line":11,"column":17,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1054","line":13,"column":20,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1055","line":16,"column":3,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1056","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1057","line":21,"column":24,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1058","line":21,"column":36,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":41},{"ruleId":"1059","severity":1,"message":"1060","line":38,"column":8,"nodeType":"1061","endLine":38,"endColumn":18,"suggestions":"1062"},{"ruleId":"1034","severity":1,"message":"1049","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1057","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1063","line":13,"column":8,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1064","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1065","line":20,"column":8,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1066","line":28,"column":7,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":14},{"ruleId":"1067","severity":1,"message":"1068","line":163,"column":7,"nodeType":"1069","endLine":163,"endColumn":65},{"ruleId":"1070","severity":1,"message":"1071","line":168,"column":15,"nodeType":"1069","endLine":168,"endColumn":59},{"ruleId":"1034","severity":1,"message":"1072","line":4,"column":8,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1073","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1074","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1075","line":13,"column":3,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1050","line":14,"column":3,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":19,"column":8,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1078","line":22,"column":10,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1079","line":23,"column":10,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":25,"column":10,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1081","line":27,"column":3,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1082","line":28,"column":3,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1083","line":29,"column":3,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1084","line":30,"column":3,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1057","line":34,"column":10,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1085","line":34,"column":22,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":32},{"ruleId":"1034","severity":1,"message":"1086","line":42,"column":10,"nodeType":"1036","messageId":"1037","endLine":42,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1087","line":51,"column":8,"nodeType":"1036","messageId":"1037","endLine":51,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1088","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1089","line":13,"column":3,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1057","line":14,"column":3,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1085","line":15,"column":3,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1086","line":18,"column":10,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1090","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1091","line":22,"column":10,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1092","line":28,"column":3,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1093","line":46,"column":10,"nodeType":"1036","messageId":"1037","endLine":46,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1094","line":102,"column":26,"nodeType":"1036","messageId":"1037","endLine":102,"endColumn":40},{"ruleId":"1034","severity":1,"message":"1095","line":102,"column":42,"nodeType":"1036","messageId":"1037","endLine":102,"endColumn":54},{"ruleId":"1034","severity":1,"message":"1096","line":1,"column":15,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1050","line":16,"column":3,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1097","line":17,"column":3,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1098","line":18,"column":3,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1099","line":24,"column":22,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1079","line":25,"column":10,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1100","line":32,"column":10,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1101","line":34,"column":10,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1102","line":35,"column":10,"nodeType":"1036","messageId":"1037","endLine":35,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1091","line":36,"column":10,"nodeType":"1036","messageId":"1037","endLine":36,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1103","line":38,"column":10,"nodeType":"1036","messageId":"1037","endLine":38,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1104","line":39,"column":10,"nodeType":"1036","messageId":"1037","endLine":39,"endColumn":24},{"ruleId":"1034","severity":1,"message":"1105","line":40,"column":10,"nodeType":"1036","messageId":"1037","endLine":40,"endColumn":28},{"ruleId":"1034","severity":1,"message":"1106","line":50,"column":10,"nodeType":"1036","messageId":"1037","endLine":50,"endColumn":23},{"ruleId":"1107","severity":1,"message":"1108","line":271,"column":54,"nodeType":"1109","messageId":"1110","endLine":271,"endColumn":61,"fix":"1111"},{"ruleId":"1034","severity":1,"message":"1112","line":278,"column":5,"nodeType":"1036","messageId":"1037","endLine":278,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1113","line":281,"column":46,"nodeType":"1036","messageId":"1037","endLine":281,"endColumn":60},{"ruleId":"1034","severity":1,"message":"1114","line":284,"column":46,"nodeType":"1036","messageId":"1037","endLine":284,"endColumn":60},{"ruleId":"1115","severity":1,"message":"1116","line":299,"column":54,"nodeType":"1117","messageId":"1118","endLine":299,"endColumn":56},{"ruleId":"1059","severity":1,"message":"1119","line":329,"column":6,"nodeType":"1061","endLine":329,"endColumn":30,"suggestions":"1120"},{"ruleId":"1059","severity":1,"message":"1121","line":329,"column":7,"nodeType":"1122","endLine":329,"endColumn":29},{"ruleId":"1115","severity":1,"message":"1116","line":419,"column":61,"nodeType":"1117","messageId":"1118","endLine":419,"endColumn":63},{"ruleId":"1115","severity":1,"message":"1116","line":519,"column":65,"nodeType":"1117","messageId":"1118","endLine":519,"endColumn":67},{"ruleId":"1107","severity":1,"message":"1108","line":623,"column":46,"nodeType":"1109","messageId":"1110","endLine":623,"endColumn":53,"fix":"1123"},{"ruleId":"1124","severity":1,"message":"1125","line":663,"column":61,"nodeType":"1126","messageId":"1127","endLine":663,"endColumn":63},{"ruleId":"1115","severity":1,"message":"1128","line":667,"column":59,"nodeType":"1117","messageId":"1118","endLine":667,"endColumn":61},{"ruleId":"1034","severity":1,"message":"1129","line":25,"column":8,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1130","line":78,"column":5,"nodeType":"1036","messageId":"1037","endLine":78,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1112","line":79,"column":5,"nodeType":"1036","messageId":"1037","endLine":79,"endColumn":19},{"ruleId":"1115","severity":1,"message":"1116","line":100,"column":29,"nodeType":"1117","messageId":"1118","endLine":100,"endColumn":31},{"ruleId":"1115","severity":1,"message":"1116","line":101,"column":29,"nodeType":"1117","messageId":"1118","endLine":101,"endColumn":31},{"ruleId":"1115","severity":1,"message":"1116","line":102,"column":29,"nodeType":"1117","messageId":"1118","endLine":102,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1131","line":125,"column":13,"nodeType":"1036","messageId":"1037","endLine":125,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1132","line":237,"column":12,"nodeType":"1036","messageId":"1037","endLine":237,"endColumn":22},{"ruleId":"1133","severity":1,"message":"1134","line":275,"column":21,"nodeType":"1069","endLine":279,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1136","line":3,"column":3,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1088","line":12,"column":3,"nodeType":"1036","messageId":"1037","endLine":12,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":13,"column":3,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1137","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1138","line":21,"column":3,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1091","line":34,"column":10,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1139","line":46,"column":10,"nodeType":"1036","messageId":"1037","endLine":46,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1140","line":137,"column":22,"nodeType":"1036","messageId":"1037","endLine":137,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1049","line":3,"column":3,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1141","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1142","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1143","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1144","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1145","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1146","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1147","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1148","line":16,"column":3,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1149","line":17,"column":3,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1150","line":18,"column":3,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1151","line":19,"column":3,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1152","line":20,"column":3,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1153","line":21,"column":3,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1154","line":22,"column":3,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1155","line":23,"column":3,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1156","line":24,"column":3,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1157","line":25,"column":3,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1158","line":26,"column":3,"nodeType":"1036","messageId":"1037","endLine":26,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1159","line":31,"column":10,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1160","line":31,"column":20,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":30},{"ruleId":"1034","severity":1,"message":"1099","line":31,"column":32,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":41},{"ruleId":"1034","severity":1,"message":"1161","line":44,"column":8,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":12},{"ruleId":"1059","severity":1,"message":"1162","line":65,"column":6,"nodeType":"1061","endLine":65,"endColumn":27,"suggestions":"1163"},{"ruleId":"1034","severity":1,"message":"1161","line":144,"column":10,"nodeType":"1036","messageId":"1037","endLine":144,"endColumn":14},{"ruleId":"1059","severity":1,"message":"1164","line":175,"column":6,"nodeType":"1061","endLine":175,"endColumn":24,"suggestions":"1165"},{"ruleId":"1034","severity":1,"message":"1047","line":12,"column":3,"nodeType":"1036","messageId":"1037","endLine":12,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1166","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1167","line":21,"column":22,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1168","line":21,"column":31,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":39},{"ruleId":"1034","severity":1,"message":"1169","line":33,"column":34,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":39},{"ruleId":"1034","severity":1,"message":"1066","line":75,"column":9,"nodeType":"1036","messageId":"1037","endLine":75,"endColumn":16},{"ruleId":"1115","severity":1,"message":"1116","line":91,"column":25,"nodeType":"1117","messageId":"1118","endLine":91,"endColumn":27},{"ruleId":"1115","severity":1,"message":"1116","line":95,"column":34,"nodeType":"1117","messageId":"1118","endLine":95,"endColumn":36},{"ruleId":"1115","severity":1,"message":"1116","line":103,"column":34,"nodeType":"1117","messageId":"1118","endLine":103,"endColumn":36},{"ruleId":"1115","severity":1,"message":"1116","line":194,"column":25,"nodeType":"1117","messageId":"1118","endLine":194,"endColumn":27},{"ruleId":"1115","severity":1,"message":"1116","line":198,"column":34,"nodeType":"1117","messageId":"1118","endLine":198,"endColumn":36},{"ruleId":"1115","severity":1,"message":"1116","line":206,"column":34,"nodeType":"1117","messageId":"1118","endLine":206,"endColumn":36},{"ruleId":"1115","severity":1,"message":"1116","line":295,"column":23,"nodeType":"1117","messageId":"1118","endLine":295,"endColumn":25},{"ruleId":"1115","severity":1,"message":"1116","line":299,"column":32,"nodeType":"1117","messageId":"1118","endLine":299,"endColumn":34},{"ruleId":"1115","severity":1,"message":"1116","line":307,"column":32,"nodeType":"1117","messageId":"1118","endLine":307,"endColumn":34},{"ruleId":"1115","severity":1,"message":"1116","line":389,"column":20,"nodeType":"1117","messageId":"1118","endLine":389,"endColumn":22},{"ruleId":"1115","severity":1,"message":"1116","line":397,"column":30,"nodeType":"1117","messageId":"1118","endLine":397,"endColumn":32},{"ruleId":"1115","severity":1,"message":"1116","line":432,"column":27,"nodeType":"1117","messageId":"1118","endLine":432,"endColumn":29},{"ruleId":"1115","severity":1,"message":"1116","line":442,"column":20,"nodeType":"1117","messageId":"1118","endLine":442,"endColumn":22},{"ruleId":"1115","severity":1,"message":"1116","line":477,"column":30,"nodeType":"1117","messageId":"1118","endLine":477,"endColumn":32},{"ruleId":"1115","severity":1,"message":"1116","line":483,"column":20,"nodeType":"1117","messageId":"1118","endLine":483,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1169","line":25,"column":40,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1035","line":1,"column":28,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1088","line":4,"column":36,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":41},{"ruleId":"1124","severity":1,"message":"1171","line":53,"column":17,"nodeType":"1172","messageId":"1173","endLine":53,"endColumn":24},{"ruleId":"1174","severity":1,"message":"1175","line":82,"column":25,"nodeType":"1176","messageId":"1177","endLine":82,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1178","line":23,"column":5,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1179","line":28,"column":5,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1180","line":29,"column":5,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1181","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1089","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1063","line":13,"column":8,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1160","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1182","line":4,"column":10,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1183","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1184","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1146","line":12,"column":3,"nodeType":"1036","messageId":"1037","endLine":12,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1087","line":22,"column":8,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1185","line":23,"column":8,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":24},{"ruleId":"1034","severity":1,"message":"1186","line":24,"column":8,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1187","line":25,"column":8,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1088","line":1,"column":16,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1188","line":9,"column":10,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1189","line":23,"column":5,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1190","line":24,"column":5,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":37},{"ruleId":"1059","severity":1,"message":"1191","line":53,"column":6,"nodeType":"1061","endLine":53,"endColumn":49,"suggestions":"1192"},{"ruleId":"1034","severity":1,"message":"1193","line":22,"column":33,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":56},{"ruleId":"1034","severity":1,"message":"1194","line":24,"column":5,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1195","line":27,"column":5,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":28},{"ruleId":"1059","severity":1,"message":"1191","line":42,"column":6,"nodeType":"1061","endLine":42,"endColumn":8,"suggestions":"1196"},{"ruleId":"1115","severity":1,"message":"1128","line":110,"column":32,"nodeType":"1117","messageId":"1118","endLine":110,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1047","line":4,"column":3,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":9},{"ruleId":"1174","severity":1,"message":"1175","line":23,"column":7,"nodeType":"1172","messageId":"1177","endLine":28,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1160","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1100","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1197","line":5,"column":10,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1198","line":25,"column":41,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1199","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1197","line":4,"column":10,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1066","line":44,"column":9,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1200","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1201","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1202","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1203","line":9,"column":10,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1204","line":11,"column":10,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1198","line":30,"column":41,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1200","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1202","line":3,"column":24,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1204","line":6,"column":10,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1198","line":26,"column":41,"nodeType":"1036","messageId":"1037","endLine":26,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1206","line":5,"column":18,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1169","line":5,"column":32,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":37},{"ruleId":"1034","severity":1,"message":"1050","line":3,"column":8,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1207","line":6,"column":8,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1208","line":7,"column":8,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1209","line":8,"column":8,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":24},{"ruleId":"1034","severity":1,"message":"1210","line":9,"column":8,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1211","line":14,"column":8,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1181","line":26,"column":3,"nodeType":"1036","messageId":"1037","endLine":26,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1212","line":29,"column":3,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1213","line":33,"column":3,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1214","line":37,"column":17,"nodeType":"1036","messageId":"1037","endLine":37,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1215","line":43,"column":3,"nodeType":"1036","messageId":"1037","endLine":43,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1216","line":111,"column":35,"nodeType":"1036","messageId":"1037","endLine":111,"endColumn":54},{"ruleId":"1067","severity":1,"message":"1068","line":278,"column":13,"nodeType":"1069","endLine":282,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1035","line":1,"column":38,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":46},{"ruleId":"1059","severity":1,"message":"1217","line":16,"column":6,"nodeType":"1061","endLine":16,"endColumn":66,"suggestions":"1218"},{"ruleId":"1059","severity":1,"message":"1121","line":16,"column":7,"nodeType":"1109","endLine":16,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1121","line":16,"column":50,"nodeType":"1122","endLine":16,"endColumn":65},{"ruleId":"1034","severity":1,"message":"1047","line":1,"column":8,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1048","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1049","line":4,"column":8,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1219","line":5,"column":8,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1207","line":6,"column":8,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1208","line":7,"column":8,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1209","line":8,"column":8,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":24},{"ruleId":"1034","severity":1,"message":"1210","line":9,"column":8,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1052","line":10,"column":8,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1051","line":11,"column":8,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1211","line":14,"column":8,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1057","line":17,"column":3,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1058","line":18,"column":3,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1056","line":19,"column":3,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1220","line":20,"column":3,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1181","line":21,"column":3,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1183","line":23,"column":3,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1035","line":29,"column":17,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1221","line":30,"column":10,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1222","line":31,"column":10,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1160","line":32,"column":10,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1088","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1076","line":15,"column":10,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":17,"column":8,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":15},{"ruleId":"1115","severity":1,"message":"1128","line":121,"column":29,"nodeType":"1117","messageId":"1118","endLine":121,"endColumn":31},{"ruleId":"1115","severity":1,"message":"1128","line":128,"column":36,"nodeType":"1117","messageId":"1118","endLine":128,"endColumn":38},{"ruleId":"1034","severity":1,"message":"1224","line":299,"column":34,"nodeType":"1036","messageId":"1037","endLine":299,"endColumn":56},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1223","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1225","line":130,"column":5,"nodeType":"1036","messageId":"1037","endLine":130,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1226","line":133,"column":7,"nodeType":"1036","messageId":"1037","endLine":133,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1227","line":18,"column":10,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1228","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1229","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1230","line":120,"column":31,"nodeType":"1036","messageId":"1037","endLine":120,"endColumn":50},{"ruleId":"1034","severity":1,"message":"1226","line":124,"column":7,"nodeType":"1036","messageId":"1037","endLine":124,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1228","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1229","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1231","line":84,"column":34,"nodeType":"1036","messageId":"1037","endLine":84,"endColumn":56},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1100","line":13,"column":10,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1078","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1079","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1232","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":22,"column":10,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1081","line":24,"column":3,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1082","line":25,"column":3,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1083","line":26,"column":3,"nodeType":"1036","messageId":"1037","endLine":26,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1084","line":27,"column":3,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1233","line":30,"column":10,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1085","line":31,"column":22,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":32},{"ruleId":"1034","severity":1,"message":"1234","line":32,"column":10,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1235","line":33,"column":10,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1236","line":34,"column":10,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1237","line":35,"column":10,"nodeType":"1036","messageId":"1037","endLine":35,"endColumn":26},{"ruleId":"1059","severity":1,"message":"1238","line":147,"column":8,"nodeType":"1061","endLine":147,"endColumn":25,"suggestions":"1239"},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1183","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1223","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1088","line":13,"column":3,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":15,"column":3,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1100","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1240","line":19,"column":3,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1241","line":20,"column":3,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1242","line":21,"column":3,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1243","line":22,"column":3,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":25,"column":10,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":27,"column":8,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":28,"column":10,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1078","line":30,"column":10,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1079","line":31,"column":10,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1232","line":32,"column":10,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":33,"column":10,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1081","line":35,"column":3,"nodeType":"1036","messageId":"1037","endLine":35,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1082","line":36,"column":3,"nodeType":"1036","messageId":"1037","endLine":36,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1083","line":37,"column":3,"nodeType":"1036","messageId":"1037","endLine":37,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1084","line":38,"column":3,"nodeType":"1036","messageId":"1037","endLine":38,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1233","line":41,"column":10,"nodeType":"1036","messageId":"1037","endLine":41,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1057","line":42,"column":10,"nodeType":"1036","messageId":"1037","endLine":42,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1085","line":42,"column":22,"nodeType":"1036","messageId":"1037","endLine":42,"endColumn":32},{"ruleId":"1034","severity":1,"message":"1234","line":43,"column":10,"nodeType":"1036","messageId":"1037","endLine":43,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1235","line":44,"column":10,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1236","line":45,"column":10,"nodeType":"1036","messageId":"1037","endLine":45,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1237","line":46,"column":10,"nodeType":"1036","messageId":"1037","endLine":46,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1244","line":48,"column":8,"nodeType":"1036","messageId":"1037","endLine":48,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1245","line":49,"column":8,"nodeType":"1036","messageId":"1037","endLine":49,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1246","line":50,"column":19,"nodeType":"1036","messageId":"1037","endLine":50,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1247","line":53,"column":8,"nodeType":"1036","messageId":"1037","endLine":53,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1248","line":64,"column":8,"nodeType":"1036","messageId":"1037","endLine":64,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1202","line":65,"column":24,"nodeType":"1036","messageId":"1037","endLine":65,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1249","line":67,"column":10,"nodeType":"1036","messageId":"1037","endLine":67,"endColumn":24},{"ruleId":"1067","severity":1,"message":"1068","line":94,"column":11,"nodeType":"1069","endLine":99,"endColumn":13},{"ruleId":"1115","severity":1,"message":"1128","line":160,"column":42,"nodeType":"1117","messageId":"1118","endLine":160,"endColumn":44},{"ruleId":"1115","severity":1,"message":"1128","line":162,"column":42,"nodeType":"1117","messageId":"1118","endLine":162,"endColumn":44},{"ruleId":"1115","severity":1,"message":"1128","line":164,"column":42,"nodeType":"1117","messageId":"1118","endLine":164,"endColumn":44},{"ruleId":"1115","severity":1,"message":"1128","line":166,"column":42,"nodeType":"1117","messageId":"1118","endLine":166,"endColumn":44},{"ruleId":"1115","severity":1,"message":"1128","line":168,"column":42,"nodeType":"1117","messageId":"1118","endLine":168,"endColumn":44},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1250","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1073","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1251","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1252","line":12,"column":3,"nodeType":"1036","messageId":"1037","endLine":12,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1088","line":13,"column":3,"nodeType":"1036","messageId":"1037","endLine":13,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":15,"column":3,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1100","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1240","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1241","line":21,"column":20,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1242","line":21,"column":28,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1076","line":23,"column":10,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1077","line":25,"column":10,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1078","line":27,"column":10,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1079","line":28,"column":10,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1232","line":29,"column":10,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":30,"column":10,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1081","line":32,"column":3,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1082","line":33,"column":3,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1083","line":34,"column":3,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1084","line":35,"column":3,"nodeType":"1036","messageId":"1037","endLine":35,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1233","line":38,"column":10,"nodeType":"1036","messageId":"1037","endLine":38,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1085","line":43,"column":3,"nodeType":"1036","messageId":"1037","endLine":43,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1234","line":45,"column":10,"nodeType":"1036","messageId":"1037","endLine":45,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1235","line":46,"column":10,"nodeType":"1036","messageId":"1037","endLine":46,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1236","line":47,"column":10,"nodeType":"1036","messageId":"1037","endLine":47,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1237","line":48,"column":10,"nodeType":"1036","messageId":"1037","endLine":48,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1066","line":179,"column":9,"nodeType":"1036","messageId":"1037","endLine":179,"endColumn":16},{"ruleId":"1124","severity":1,"message":"1125","line":246,"column":68,"nodeType":"1126","messageId":"1127","endLine":246,"endColumn":70},{"ruleId":"1034","severity":1,"message":"1075","line":1,"column":15,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1253","line":8,"column":10,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1232","line":9,"column":10,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1254","line":30,"column":8,"nodeType":"1061","endLine":30,"endColumn":25,"suggestions":"1255"},{"ruleId":"1059","severity":1,"message":"1256","line":69,"column":7,"nodeType":"1061","endLine":69,"endColumn":45,"suggestions":"1257"},{"ruleId":"1059","severity":1,"message":"1258","line":69,"column":8,"nodeType":"1109","endLine":69,"endColumn":44},{"ruleId":"1034","severity":1,"message":"1130","line":24,"column":5,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1112","line":25,"column":5,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1259","line":29,"column":11,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":20},{"ruleId":"1059","severity":1,"message":"1191","line":39,"column":6,"nodeType":"1061","endLine":39,"endColumn":23,"suggestions":"1260"},{"ruleId":"1034","severity":1,"message":"1261","line":5,"column":10,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1262","line":8,"column":10,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1263","line":9,"column":10,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1264","line":10,"column":10,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1265","line":22,"column":10,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1266","line":24,"column":10,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1267","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1223","line":15,"column":3,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1268","line":18,"column":3,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1269","line":19,"column":3,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1270","line":27,"column":3,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1271","line":28,"column":3,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1242","line":29,"column":3,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":20},{"ruleId":"1059","severity":1,"message":"1272","line":80,"column":8,"nodeType":"1061","endLine":80,"endColumn":20,"suggestions":"1273"},{"ruleId":"1059","severity":1,"message":"1274","line":114,"column":8,"nodeType":"1061","endLine":114,"endColumn":68,"suggestions":"1275"},{"ruleId":"1059","severity":1,"message":"1121","line":114,"column":9,"nodeType":"1109","endLine":114,"endColumn":67},{"ruleId":"1115","severity":1,"message":"1128","line":319,"column":32,"nodeType":"1117","messageId":"1118","endLine":319,"endColumn":34},{"ruleId":"1059","severity":1,"message":"1276","line":501,"column":6,"nodeType":"1061","endLine":501,"endColumn":15,"suggestions":"1277"},{"ruleId":"1034","severity":1,"message":"1200","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1191","line":28,"column":6,"nodeType":"1061","endLine":28,"endColumn":38,"suggestions":"1278"},{"ruleId":"1124","severity":1,"message":"1171","line":71,"column":36,"nodeType":"1126","messageId":"1279","endLine":71,"endColumn":38},{"ruleId":"1124","severity":1,"message":"1171","line":72,"column":42,"nodeType":"1126","messageId":"1279","endLine":72,"endColumn":44},{"ruleId":"1124","severity":1,"message":"1171","line":96,"column":34,"nodeType":"1126","messageId":"1279","endLine":96,"endColumn":36},{"ruleId":"1124","severity":1,"message":"1171","line":107,"column":31,"nodeType":"1126","messageId":"1279","endLine":107,"endColumn":33},{"ruleId":"1059","severity":1,"message":"1280","line":411,"column":6,"nodeType":"1061","endLine":411,"endColumn":8,"suggestions":"1281"},{"ruleId":"1174","severity":1,"message":"1175","line":24,"column":7,"nodeType":"1172","messageId":"1177","endLine":27,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1199","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1197","line":4,"column":10,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1066","line":8,"column":9,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1197","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1142","line":2,"column":3,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":11},{"ruleId":"1034","severity":1,"message":"1145","line":3,"column":3,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1141","line":4,"column":3,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1144","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":10},{"ruleId":"1034","severity":1,"message":"1049","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1183","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1282","line":14,"column":3,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1283","line":15,"column":3,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1135","line":17,"column":17,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":17,"column":27,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1284","line":19,"column":8,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1244","line":20,"column":8,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1285","line":21,"column":8,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1139","line":24,"column":10,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1286","line":32,"column":10,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1287","line":219,"column":10,"nodeType":"1036","messageId":"1037","endLine":219,"endColumn":17},{"ruleId":"1115","severity":1,"message":"1128","line":347,"column":23,"nodeType":"1117","messageId":"1118","endLine":347,"endColumn":25},{"ruleId":"1115","severity":1,"message":"1128","line":349,"column":27,"nodeType":"1117","messageId":"1118","endLine":349,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1288","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1289","line":9,"column":17,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1290","line":22,"column":6,"nodeType":"1061","endLine":22,"endColumn":8,"suggestions":"1291"},{"ruleId":"1034","severity":1,"message":"1200","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1201","line":3,"column":18,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1203","line":4,"column":10,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1198","line":24,"column":41,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1198","line":24,"column":41,"nodeType":"1036","messageId":"1037","endLine":24,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1292","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1170","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1035","line":2,"column":21,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1160","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1063","line":4,"column":8,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1293","line":5,"column":10,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1232","line":7,"column":10,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1294","line":8,"column":10,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":22},{"ruleId":"1034","severity":1,"message":"1201","line":9,"column":10,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1139","line":10,"column":10,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1076","line":11,"column":10,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1198","line":14,"column":41,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1198","line":6,"column":41,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1063","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1295","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1296","line":4,"column":10,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1297","line":5,"column":10,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":16},{"ruleId":"1034","severity":1,"message":"1298","line":7,"column":8,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1198","line":5,"column":41,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1299","line":2,"column":16,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1246","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":22,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1169","line":7,"column":32,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":37},{"ruleId":"1034","severity":1,"message":"1198","line":15,"column":41,"nodeType":"1036","messageId":"1037","endLine":15,"endColumn":45},{"ruleId":"1300","severity":1,"message":"1301","line":2,"column":35,"nodeType":"1117","messageId":"1302","endLine":2,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1096","line":1,"column":15,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1214","line":2,"column":28,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1303","line":8,"column":10,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":13},{"ruleId":"1059","severity":1,"message":"1304","line":201,"column":8,"nodeType":"1061","endLine":201,"endColumn":10,"suggestions":"1305"},{"ruleId":"1034","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1289","line":9,"column":17,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1306","line":31,"column":6,"nodeType":"1061","endLine":31,"endColumn":8,"suggestions":"1307"},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1198","line":9,"column":45,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":49},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1201","line":2,"column":10,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1299","line":2,"column":16,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":31},{"ruleId":"1034","severity":1,"message":"1246","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":20},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":22,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1169","line":7,"column":32,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":37},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1198","line":7,"column":41,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1197","line":3,"column":22,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":35},{"ruleId":"1034","severity":1,"message":"1169","line":7,"column":32,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":37},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1308","line":18,"column":10,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1228","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1229","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1309","line":33,"column":13,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1308","line":18,"column":10,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1228","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1229","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1309","line":34,"column":13,"nodeType":"1036","messageId":"1037","endLine":34,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1073","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1076","line":14,"column":10,"nodeType":"1036","messageId":"1037","endLine":14,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":16,"column":8,"nodeType":"1036","messageId":"1037","endLine":16,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1308","line":18,"column":10,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1228","line":19,"column":10,"nodeType":"1036","messageId":"1037","endLine":19,"endColumn":34},{"ruleId":"1034","severity":1,"message":"1229","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":21,"column":10,"nodeType":"1036","messageId":"1037","endLine":21,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1309","line":29,"column":13,"nodeType":"1036","messageId":"1037","endLine":29,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1135","line":1,"column":17,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1170","line":1,"column":27,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":36},{"ruleId":"1034","severity":1,"message":"1072","line":2,"column":8,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1181","line":5,"column":3,"nodeType":"1036","messageId":"1037","endLine":5,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1310","line":6,"column":3,"nodeType":"1036","messageId":"1037","endLine":6,"endColumn":14},{"ruleId":"1034","severity":1,"message":"1073","line":7,"column":3,"nodeType":"1036","messageId":"1037","endLine":7,"endColumn":17},{"ruleId":"1034","severity":1,"message":"1223","line":8,"column":3,"nodeType":"1036","messageId":"1037","endLine":8,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1213","line":9,"column":3,"nodeType":"1036","messageId":"1037","endLine":9,"endColumn":7},{"ruleId":"1034","severity":1,"message":"1088","line":10,"column":3,"nodeType":"1036","messageId":"1037","endLine":10,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1050","line":11,"column":3,"nodeType":"1036","messageId":"1037","endLine":11,"endColumn":13},{"ruleId":"1034","severity":1,"message":"1100","line":17,"column":10,"nodeType":"1036","messageId":"1037","endLine":17,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1242","line":18,"column":28,"nodeType":"1036","messageId":"1037","endLine":18,"endColumn":45},{"ruleId":"1034","severity":1,"message":"1076","line":20,"column":10,"nodeType":"1036","messageId":"1037","endLine":20,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1046","line":22,"column":8,"nodeType":"1036","messageId":"1037","endLine":22,"endColumn":15},{"ruleId":"1034","severity":1,"message":"1077","line":23,"column":10,"nodeType":"1036","messageId":"1037","endLine":23,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1078","line":25,"column":10,"nodeType":"1036","messageId":"1037","endLine":25,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1079","line":26,"column":10,"nodeType":"1036","messageId":"1037","endLine":26,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1232","line":27,"column":10,"nodeType":"1036","messageId":"1037","endLine":27,"endColumn":21},{"ruleId":"1034","severity":1,"message":"1080","line":28,"column":10,"nodeType":"1036","messageId":"1037","endLine":28,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1081","line":30,"column":3,"nodeType":"1036","messageId":"1037","endLine":30,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1082","line":31,"column":3,"nodeType":"1036","messageId":"1037","endLine":31,"endColumn":12},{"ruleId":"1034","severity":1,"message":"1083","line":32,"column":3,"nodeType":"1036","messageId":"1037","endLine":32,"endColumn":8},{"ruleId":"1034","severity":1,"message":"1084","line":33,"column":3,"nodeType":"1036","messageId":"1037","endLine":33,"endColumn":9},{"ruleId":"1034","severity":1,"message":"1233","line":36,"column":10,"nodeType":"1036","messageId":"1037","endLine":36,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1085","line":37,"column":22,"nodeType":"1036","messageId":"1037","endLine":37,"endColumn":32},{"ruleId":"1034","severity":1,"message":"1311","line":43,"column":3,"nodeType":"1036","messageId":"1037","endLine":43,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1312","line":44,"column":3,"nodeType":"1036","messageId":"1037","endLine":44,"endColumn":29},{"ruleId":"1034","severity":1,"message":"1313","line":45,"column":3,"nodeType":"1036","messageId":"1037","endLine":45,"endColumn":25},{"ruleId":"1034","severity":1,"message":"1314","line":46,"column":3,"nodeType":"1036","messageId":"1037","endLine":46,"endColumn":23},{"ruleId":"1034","severity":1,"message":"1309","line":82,"column":13,"nodeType":"1036","messageId":"1037","endLine":82,"endColumn":19},{"ruleId":"1034","severity":1,"message":"1315","line":84,"column":11,"nodeType":"1036","messageId":"1037","endLine":84,"endColumn":26},{"ruleId":"1034","severity":1,"message":"1066","line":86,"column":11,"nodeType":"1036","messageId":"1037","endLine":86,"endColumn":18},{"ruleId":"1034","severity":1,"message":"1205","line":1,"column":10,"nodeType":"1036","messageId":"1037","endLine":1,"endColumn":27},{"ruleId":"1034","severity":1,"message":"1316","line":2,"column":16,"nodeType":"1036","messageId":"1037","endLine":2,"endColumn":31},{"ruleId":"1174","severity":1,"message":"1175","line":28,"column":7,"nodeType":"1172","messageId":"1177","endLine":30,"endColumn":10},{"ruleId":"1038","replacedBy":"1317"},{"ruleId":"1040","replacedBy":"1318"},{"ruleId":"1319","severity":1,"message":"1320","line":3,"column":10,"nodeType":"1036","messageId":"1037","endLine":3,"endColumn":18},{"ruleId":"1319","severity":1,"message":"1321","line":4,"column":8,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":13},{"ruleId":"1319","severity":1,"message":"1322","line":4,"column":17,"nodeType":"1036","messageId":"1037","endLine":4,"endColumn":35},{"ruleId":"1038","replacedBy":"1323"},{"ruleId":"1040","replacedBy":"1324"},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1325"],"no-negated-in-lhs",["1326"],"'AfterLogin' is defined but never used.","'AlertMobile' is defined but never used.","'getToken' is defined but never used.","'onMessageListener' is defined but never used.","'classes' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Children' is defined but never used.","'Router' is defined but never used.","'useLocation' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["1327"],"'_' is defined but never used.","'VariantType' is defined but never used.","'ArrowBackIcon' is defined but never used.","'history' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component State_1 must be in PascalCase or SCREAMING_SNAKE_CASE","'RefreshIcon' is defined but never used.","'CardActionArea' is defined but never used.","'Hidden' is defined but never used.","'LinearProgress' is defined but never used.","'DateTime' is defined but never used.","'useReadUserByGender' is defined but never used.","'useReadUserByAge' is defined but never used.","'useReadUser' is defined but never used.","'useReadLengthOfStay' is defined but never used.","'Chart' is defined but never used.","'PieSeries' is defined but never used.","'Title' is defined but never used.","'Legend' is defined but never used.","'withStyles' is defined but never used.","'CardMap' is defined but never used.","'AddIcon' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'SubBar' is defined but never used.","'DateFilter' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'filterHour' is assigned a value but never used.","'loading_places' is assigned a value but never used.","'error_places' is assigned a value but never used.","'jsx' is defined but never used.","'MuiThemeProvider' is defined but never used.","'createMuiTheme' is defined but never used.","'useParams' is defined but never used.","'webStore' is defined but never used.","'UserInfoCard' is defined but never used.","'DeviceHistoryDatagrid' is defined but never used.","'BodyTempGraph' is defined but never used.","'HeartRateGraph' is defined but never used.","'BloodPressureGraph' is defined but never used.","'arrayIncludes' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","CallExpression","useLiteral",{"range":"1328","text":"1329"},"'error_branches' is assigned a value but never used.","'error_hospital' is assigned a value but never used.","'error_agencies' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'setVal'. Either include it or remove the dependency array.",["1330"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression",{"range":"1331","text":"1329"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '===' and instead saw '=='.","'CheckBoxIcon' is defined but never used.","'loading_branches' is assigned a value but never used.","'name' is assigned a value but never used.","'createData' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Fragment' is defined but never used.","'Accordion' is defined but never used.","'Skeleton' is defined but never used.","'ReadUserFilter' is defined but never used.","'dateStr' is defined but never used.","'setFilterHour' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'Divider' is defined but never used.","'ListItemText' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Accessibility' is defined but never used.","'ArrowBack' is defined but never used.","'Battery80' is defined but never used.","'Bluetooth' is defined but never used.","'Code' is defined but never used.","'BlurOn' is defined but never used.","'DirectionsWalk' is defined but never used.","'Favorite' is defined but never used.","'Fingerprint' is defined but never used.","'ShowChart' is defined but never used.","'Watch' is defined but never used.","'Redirect' is defined but never used.","'useHistory' is defined but never used.","'rest' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fire_userRead' and 'logs'. Either include them or remove the dependency array. You can also do a functional update 'setLogs(l => ...)' if you only need 'logs' in the 'setLogs' call.",["1332"],"React Hook useEffect has a missing dependency: 'result_userList'. Either include it or remove the dependency array.",["1333"],"'TabContext' is defined but never used.","'TabList' is defined but never used.","'TabPanel' is defined but never used.","'error' is assigned a value but never used.","'useEffect' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'result_token' is assigned a value but never used.","'result_changepassword' is assigned a value but never used.","'result_changepassword_message' is assigned a value but never used.","'Button' is defined but never used.","'useListPushData' is defined but never used.","'CircularProgress' is defined but never used.","'FilledInput' is defined but never used.","'ChevronRightIcon' is defined but never used.","'edit' is defined but never used.","'remove' is defined but never used.","'GeofenceToolbar' is defined but never used.","'fire_geofence_insert_all_user' is assigned a value but never used.","'fire_geofence_insert_custom_user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'g'. Either include it or remove the dependency array.",["1334"],"'loading_geofence_create' is assigned a value but never used.","'fire_geofence_update' is assigned a value but never used.","'loading_geofence_update' is assigned a value but never used.",["1335"],"'resolveMockup' is defined but never used.","'fire' is assigned a value but never used.","'Profile' is defined but never used.","'observer' is defined but never used.","'User' is defined but never used.","'UserFromAPI' is defined but never used.","'userDevice' is defined but never used.","'processServerUser' is defined but never used.","'TempHistoryReport' is defined but never used.","'res' is assigned a value but never used.","'AccountCircle' is defined but never used.","'Switch' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'MenuList' is defined but never used.","'Grid' is defined but never used.","'useRef' is defined but never used.","'NotificationMobile' is defined but never used.","'loading_userListSOS' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'pathname' and 'result_me'. Either include them or remove the dependency array.",["1336"],"'MenuIcon' is defined but never used.","'Avatar' is defined but never used.","'useLogout' is defined but never used.","'useSnackbar' is defined but never used.","'Container' is defined but never used.","'loading_user_by_gender' is assigned a value but never used.","'loading_user_by_nation' is assigned a value but never used.","'sum' is assigned a value but never used.","'Doughnut' is defined but never used.","'useReadUserByNationality' is defined but never used.","'GRAPH_COLOR' is defined but never used.","'loading_user_by_age' is assigned a value but never used.","'loading_length_of_stay' is assigned a value but never used.","'useListUser' is defined but never used.","'Animation' is defined but never used.","'CardTotalUserByGender' is defined but never used.","'CardNationality' is defined but never used.","'CardAge' is defined but never used.","'CardLengthOfStay' is defined but never used.","React Hook useEffect has missing dependencies: 'loadmore' and 'userLiser'. Either include them or remove the dependency array. You can also do a functional update 'setUserLiser(u => ...)' if you only need 'userLiser' in the 'setUserLiser' call.",["1337"],"'DataGrid' is defined but never used.","'ColDef' is defined but never used.","'ValueGetterParams' is defined but never used.","'CellParams' is defined but never used.","'CheckIcon' is defined but never used.","'CloseIcon' is defined but never used.","'dateStrAPI' is defined but never used.","'MyLocationIcon' is defined but never used.","'ArrowForwardIosIcon' is defined but never used.","'useListAllUser' is defined but never used.","'Card' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'realpath' is defined but never used.","React Hook useEffect has a missing dependency: 'userLiser'. Either include it or remove the dependency array. You can also do a functional update 'setUserLiser(u => ...)' if you only need 'userLiser' in the 'setUserLiser' call.",["1338"],"React Hook useCallback has missing dependencies: 'mapRef' and 'userLiser'. Either include them or remove the dependency array.",["1339"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","'name' is defined but never used.",["1340"],"'useCreateGeofence' is defined but never used.","'useReadPlace' is defined but never used.","'useUpdateGeofence' is defined but never used.","'usePlace' is defined but never used.","'Places' is defined but never used.","'Geofence' is defined but never used.","'Global' is defined but never used.","'Fade' is defined but never used.","'Modal' is defined but never used.","'GridApi' is defined but never used.","'LinkOperator' is defined but never used.","React Hook useEffect has a missing dependency: 'onSelectBranch'. Either include it or remove the dependency array.",["1341"],"React Hook useEffect has a missing dependency: 'afterSelectPlaces'. Either include it or remove the dependency array.",["1342"],"React Hook useEffect has a missing dependency: 'p.rows'. Either include it or remove the dependency array. If 'setRows' needs the current value of 'p.rows', you can also switch to useReducer instead of useState and read 'p.rows' in the reducer.",["1343"],["1344"],"expectedInside","React Hook useEffect has a missing dependency: 'initMap'. Either include it or remove the dependency array.",["1345"],"'OutlinedInput' is defined but never used.","'InputAdornment' is defined but never used.","'EditIcon' is defined but never used.","'CancelIcon' is defined but never used.","'keyframes' is defined but never used.","'loading' is assigned a value but never used.","'useCallAPI' is defined but never used.","'setError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'MOCKUP_PUSH_DATA'. Either include it or remove the dependency array.",["1346"],"'error' is defined but never used.","'GeneralReport' is defined but never used.","'callReadUser' is defined but never used.","'callAPI' is defined but never used.","'userInfo' is defined but never used.","'isNull' is defined but never used.","'dayjs' is defined but never used.","'UserCreateInput' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Box' is defined but never used.","React Hook useEffect has a missing dependency: 'mapRef'. Either include it or remove the dependency array.",["1347"],"React Hook useEffect has a missing dependency: 'MOCKUP_NOTIFICATION'. Either include it or remove the dependency array.",["1348"],"'Line' is defined but never used.","'userId' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'BatteryHistoryReport' is defined but never used.","'BloodPressureHistoryReport' is defined but never used.","'HeartRateHistoryReport' is defined but never used.","'WearingHistoryReport' is defined but never used.","'classesDataGrid' is assigned a value but never used.","'UserUpdateInput' is defined but never used.",["1325"],["1326"],"no-unused-vars","'API_PATH' is defined but never used.","'axios' is defined but never used.","'AxiosRequestConfig' is defined but never used.",["1325"],["1326"],"no-global-assign","no-unsafe-negation",{"desc":"1349","fix":"1350"},[7675,7682],"[]",{"desc":"1351","fix":"1352"},[21473,21480],{"desc":"1353","fix":"1354"},{"desc":"1355","fix":"1356"},{"desc":"1357","fix":"1358"},{"desc":"1359","fix":"1360"},{"desc":"1361","fix":"1362"},{"desc":"1363","fix":"1364"},{"desc":"1365","fix":"1366"},{"desc":"1367","fix":"1368"},{"desc":"1369","fix":"1370"},{"desc":"1371","fix":"1372"},{"desc":"1373","fix":"1374"},{"desc":"1375","fix":"1376"},{"desc":"1377","fix":"1378"},{"desc":"1379","fix":"1380"},{"desc":"1381","fix":"1382"},{"desc":"1383","fix":"1384"},{"desc":"1385","fix":"1386"},"Update the dependencies array to be: [error_me, history]",{"range":"1387","text":"1388"},"Update the dependencies array to be: [setVal]",{"range":"1389","text":"1390"},"Update the dependencies array to be: [userId, logs.length, fire_userRead, logs]",{"range":"1391","text":"1392"},"Update the dependencies array to be: [loading_userList, result_userList]",{"range":"1393","text":"1394"},"Update the dependencies array to be: [id, g.result_geofenceList, g.geofenceForm, g]",{"range":"1395","text":"1396"},"Update the dependencies array to be: [g]",{"range":"1397","text":"1398"},"Update the dependencies array to be: [loading_me, pathname, result_me]",{"range":"1399","text":"1400"},"Update the dependencies array to be: [loadmore, result_userList, userLiser]",{"range":"1401","text":"1402"},"Update the dependencies array to be: [result_userList, userLiser]",{"range":"1403","text":"1404"},"Update the dependencies array to be: [mapRef, userLiser]",{"range":"1405","text":"1406"},"Update the dependencies array to be: [g, result_branches]",{"range":"1407","text":"1408"},"Update the dependencies array to be: [g.branchId, onSelectBranch]",{"range":"1409","text":"1410"},"Update the dependencies array to be: [afterSelectPlaces]",{"range":"1411","text":"1412"},"Update the dependencies array to be: [keyword, p.rows]",{"range":"1413","text":"1414"},"Update the dependencies array to be: [g.geofenceForm, activeGeofence, g]",{"range":"1415","text":"1416"},"Update the dependencies array to be: [initMap]",{"range":"1417","text":"1418"},"Update the dependencies array to be: [MOCKUP_PUSH_DATA]",{"range":"1419","text":"1420"},"Update the dependencies array to be: [mapRef]",{"range":"1421","text":"1422"},"Update the dependencies array to be: [MOCKUP_NOTIFICATION]",{"range":"1423","text":"1424"},[1152,1162],"[error_me, history]",[9299,9323],"[setVal]",[1557,1578],"[userId, logs.length, fire_userRead, logs]",[4860,4878],"[loading_userList, result_userList]",[1660,1703],"[id, g.result_geofenceList, g.geofenceForm, g]",[1531,1533],"[g]",[575,635],"[loading_me, pathname, result_me]",[4085,4102],"[loadmore, result_userList, userLiser]",[996,1013],"[result_userList, userLiser]",[2327,2365],"[mapRef, userLiser]",[1189,1206],"[g, result_branches]",[2235,2247],"[g.branchId, onSelectBranch]",[3274,3334],"[afterSelectPlaces]",[16403,16412],"[keyword, p.rows]",[915,947],"[g.geofenceForm, activeGeofence, g]",[12182,12184],"[initMap]",[1096,1098],"[MOCKUP_PUSH_DATA]",[4678,4680],"[mapRef]",[2810,2812],"[MOCKUP_NOTIFICATION]"]